/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 175.0, "minX": 0.0, "maxY": 11936.0, "series": [{"data": [[0.0, 175.0], [0.1, 175.0], [0.2, 176.0], [0.3, 176.0], [0.4, 176.0], [0.5, 177.0], [0.6, 177.0], [0.7, 177.0], [0.8, 177.0], [0.9, 178.0], [1.0, 178.0], [1.1, 178.0], [1.2, 178.0], [1.3, 179.0], [1.4, 179.0], [1.5, 179.0], [1.6, 179.0], [1.7, 180.0], [1.8, 180.0], [1.9, 180.0], [2.0, 180.0], [2.1, 180.0], [2.2, 180.0], [2.3, 181.0], [2.4, 181.0], [2.5, 181.0], [2.6, 181.0], [2.7, 181.0], [2.8, 181.0], [2.9, 182.0], [3.0, 182.0], [3.1, 182.0], [3.2, 182.0], [3.3, 182.0], [3.4, 182.0], [3.5, 182.0], [3.6, 183.0], [3.7, 183.0], [3.8, 183.0], [3.9, 183.0], [4.0, 183.0], [4.1, 183.0], [4.2, 184.0], [4.3, 184.0], [4.4, 184.0], [4.5, 184.0], [4.6, 185.0], [4.7, 185.0], [4.8, 185.0], [4.9, 185.0], [5.0, 185.0], [5.1, 186.0], [5.2, 186.0], [5.3, 187.0], [5.4, 188.0], [5.5, 188.0], [5.6, 189.0], [5.7, 190.0], [5.8, 191.0], [5.9, 192.0], [6.0, 196.0], [6.1, 198.0], [6.2, 199.0], [6.3, 202.0], [6.4, 204.0], [6.5, 208.0], [6.6, 209.0], [6.7, 213.0], [6.8, 215.0], [6.9, 216.0], [7.0, 218.0], [7.1, 221.0], [7.2, 226.0], [7.3, 228.0], [7.4, 232.0], [7.5, 234.0], [7.6, 235.0], [7.7, 239.0], [7.8, 243.0], [7.9, 245.0], [8.0, 248.0], [8.1, 255.0], [8.2, 260.0], [8.3, 267.0], [8.4, 273.0], [8.5, 285.0], [8.6, 297.0], [8.7, 307.0], [8.8, 313.0], [8.9, 325.0], [9.0, 332.0], [9.1, 343.0], [9.2, 356.0], [9.3, 362.0], [9.4, 368.0], [9.5, 375.0], [9.6, 380.0], [9.7, 387.0], [9.8, 389.0], [9.9, 399.0], [10.0, 410.0], [10.1, 415.0], [10.2, 420.0], [10.3, 431.0], [10.4, 435.0], [10.5, 443.0], [10.6, 448.0], [10.7, 464.0], [10.8, 477.0], [10.9, 485.0], [11.0, 491.0], [11.1, 498.0], [11.2, 509.0], [11.3, 516.0], [11.4, 534.0], [11.5, 547.0], [11.6, 554.0], [11.7, 578.0], [11.8, 598.0], [11.9, 618.0], [12.0, 657.0], [12.1, 662.0], [12.2, 674.0], [12.3, 687.0], [12.4, 696.0], [12.5, 704.0], [12.6, 720.0], [12.7, 732.0], [12.8, 743.0], [12.9, 760.0], [13.0, 774.0], [13.1, 791.0], [13.2, 805.0], [13.3, 813.0], [13.4, 823.0], [13.5, 833.0], [13.6, 842.0], [13.7, 851.0], [13.8, 879.0], [13.9, 913.0], [14.0, 935.0], [14.1, 953.0], [14.2, 958.0], [14.3, 974.0], [14.4, 994.0], [14.5, 1010.0], [14.6, 1026.0], [14.7, 1059.0], [14.8, 1072.0], [14.9, 1087.0], [15.0, 1097.0], [15.1, 1112.0], [15.2, 1131.0], [15.3, 1149.0], [15.4, 1168.0], [15.5, 1178.0], [15.6, 1201.0], [15.7, 1219.0], [15.8, 1247.0], [15.9, 1263.0], [16.0, 1273.0], [16.1, 1294.0], [16.2, 1315.0], [16.3, 1332.0], [16.4, 1345.0], [16.5, 1369.0], [16.6, 1376.0], [16.7, 1397.0], [16.8, 1419.0], [16.9, 1434.0], [17.0, 1455.0], [17.1, 1480.0], [17.2, 1493.0], [17.3, 1528.0], [17.4, 1566.0], [17.5, 1585.0], [17.6, 1608.0], [17.7, 1643.0], [17.8, 1657.0], [17.9, 1682.0], [18.0, 1711.0], [18.1, 1739.0], [18.2, 1761.0], [18.3, 1785.0], [18.4, 1816.0], [18.5, 1852.0], [18.6, 1902.0], [18.7, 1924.0], [18.8, 1943.0], [18.9, 1967.0], [19.0, 2000.0], [19.1, 2027.0], [19.2, 2057.0], [19.3, 2073.0], [19.4, 2085.0], [19.5, 2118.0], [19.6, 2156.0], [19.7, 2219.0], [19.8, 2235.0], [19.9, 2267.0], [20.0, 2294.0], [20.1, 2327.0], [20.2, 2361.0], [20.3, 2399.0], [20.4, 2438.0], [20.5, 2464.0], [20.6, 2523.0], [20.7, 2569.0], [20.8, 2595.0], [20.9, 2665.0], [21.0, 2702.0], [21.1, 2728.0], [21.2, 2767.0], [21.3, 2790.0], [21.4, 2824.0], [21.5, 2867.0], [21.6, 2890.0], [21.7, 2929.0], [21.8, 2940.0], [21.9, 2960.0], [22.0, 2980.0], [22.1, 3012.0], [22.2, 3058.0], [22.3, 3093.0], [22.4, 3110.0], [22.5, 3150.0], [22.6, 3200.0], [22.7, 3248.0], [22.8, 3274.0], [22.9, 3302.0], [23.0, 3358.0], [23.1, 3381.0], [23.2, 3432.0], [23.3, 3474.0], [23.4, 3513.0], [23.5, 3552.0], [23.6, 3564.0], [23.7, 3592.0], [23.8, 3611.0], [23.9, 3638.0], [24.0, 3676.0], [24.1, 3731.0], [24.2, 3766.0], [24.3, 3790.0], [24.4, 3822.0], [24.5, 3849.0], [24.6, 3899.0], [24.7, 3961.0], [24.8, 4004.0], [24.9, 4038.0], [25.0, 4074.0], [25.1, 4089.0], [25.2, 4109.0], [25.3, 4142.0], [25.4, 4176.0], [25.5, 4219.0], [25.6, 4251.0], [25.7, 4271.0], [25.8, 4291.0], [25.9, 4306.0], [26.0, 4347.0], [26.1, 4365.0], [26.2, 4387.0], [26.3, 4413.0], [26.4, 4433.0], [26.5, 4454.0], [26.6, 4503.0], [26.7, 4519.0], [26.8, 4548.0], [26.9, 4567.0], [27.0, 4596.0], [27.1, 4625.0], [27.2, 4650.0], [27.3, 4683.0], [27.4, 4703.0], [27.5, 4734.0], [27.6, 4761.0], [27.7, 4785.0], [27.8, 4808.0], [27.9, 4818.0], [28.0, 4850.0], [28.1, 4890.0], [28.2, 4933.0], [28.3, 4943.0], [28.4, 4974.0], [28.5, 4992.0], [28.6, 4999.0], [28.7, 5025.0], [28.8, 5036.0], [28.9, 5058.0], [29.0, 5070.0], [29.1, 5088.0], [29.2, 5110.0], [29.3, 5131.0], [29.4, 5173.0], [29.5, 5180.0], [29.6, 5196.0], [29.7, 5214.0], [29.8, 5248.0], [29.9, 5284.0], [30.0, 5299.0], [30.1, 5307.0], [30.2, 5331.0], [30.3, 5342.0], [30.4, 5354.0], [30.5, 5367.0], [30.6, 5387.0], [30.7, 5417.0], [30.8, 5433.0], [30.9, 5451.0], [31.0, 5480.0], [31.1, 5490.0], [31.2, 5506.0], [31.3, 5522.0], [31.4, 5529.0], [31.5, 5545.0], [31.6, 5554.0], [31.7, 5567.0], [31.8, 5586.0], [31.9, 5611.0], [32.0, 5626.0], [32.1, 5635.0], [32.2, 5654.0], [32.3, 5667.0], [32.4, 5677.0], [32.5, 5687.0], [32.6, 5700.0], [32.7, 5709.0], [32.8, 5718.0], [32.9, 5726.0], [33.0, 5743.0], [33.1, 5751.0], [33.2, 5763.0], [33.3, 5776.0], [33.4, 5795.0], [33.5, 5808.0], [33.6, 5819.0], [33.7, 5829.0], [33.8, 5839.0], [33.9, 5856.0], [34.0, 5877.0], [34.1, 5903.0], [34.2, 5913.0], [34.3, 5921.0], [34.4, 5930.0], [34.5, 5936.0], [34.6, 5944.0], [34.7, 5952.0], [34.8, 5973.0], [34.9, 5982.0], [35.0, 5995.0], [35.1, 6002.0], [35.2, 6014.0], [35.3, 6031.0], [35.4, 6043.0], [35.5, 6057.0], [35.6, 6062.0], [35.7, 6073.0], [35.8, 6088.0], [35.9, 6102.0], [36.0, 6108.0], [36.1, 6111.0], [36.2, 6118.0], [36.3, 6130.0], [36.4, 6151.0], [36.5, 6174.0], [36.6, 6180.0], [36.7, 6192.0], [36.8, 6206.0], [36.9, 6209.0], [37.0, 6229.0], [37.1, 6241.0], [37.2, 6255.0], [37.3, 6280.0], [37.4, 6285.0], [37.5, 6294.0], [37.6, 6300.0], [37.7, 6307.0], [37.8, 6315.0], [37.9, 6321.0], [38.0, 6337.0], [38.1, 6347.0], [38.2, 6368.0], [38.3, 6382.0], [38.4, 6396.0], [38.5, 6412.0], [38.6, 6420.0], [38.7, 6430.0], [38.8, 6440.0], [38.9, 6447.0], [39.0, 6454.0], [39.1, 6467.0], [39.2, 6476.0], [39.3, 6486.0], [39.4, 6503.0], [39.5, 6513.0], [39.6, 6519.0], [39.7, 6539.0], [39.8, 6553.0], [39.9, 6567.0], [40.0, 6575.0], [40.1, 6582.0], [40.2, 6604.0], [40.3, 6618.0], [40.4, 6622.0], [40.5, 6637.0], [40.6, 6643.0], [40.7, 6662.0], [40.8, 6670.0], [40.9, 6689.0], [41.0, 6699.0], [41.1, 6703.0], [41.2, 6711.0], [41.3, 6724.0], [41.4, 6742.0], [41.5, 6753.0], [41.6, 6758.0], [41.7, 6767.0], [41.8, 6779.0], [41.9, 6789.0], [42.0, 6798.0], [42.1, 6805.0], [42.2, 6811.0], [42.3, 6818.0], [42.4, 6835.0], [42.5, 6842.0], [42.6, 6850.0], [42.7, 6857.0], [42.8, 6861.0], [42.9, 6871.0], [43.0, 6877.0], [43.1, 6889.0], [43.2, 6903.0], [43.3, 6917.0], [43.4, 6925.0], [43.5, 6939.0], [43.6, 6957.0], [43.7, 6966.0], [43.8, 6978.0], [43.9, 6985.0], [44.0, 6988.0], [44.1, 7006.0], [44.2, 7020.0], [44.3, 7029.0], [44.4, 7034.0], [44.5, 7045.0], [44.6, 7055.0], [44.7, 7061.0], [44.8, 7072.0], [44.9, 7078.0], [45.0, 7086.0], [45.1, 7099.0], [45.2, 7114.0], [45.3, 7122.0], [45.4, 7129.0], [45.5, 7137.0], [45.6, 7140.0], [45.7, 7153.0], [45.8, 7161.0], [45.9, 7167.0], [46.0, 7179.0], [46.1, 7195.0], [46.2, 7205.0], [46.3, 7212.0], [46.4, 7219.0], [46.5, 7238.0], [46.6, 7250.0], [46.7, 7255.0], [46.8, 7260.0], [46.9, 7265.0], [47.0, 7270.0], [47.1, 7276.0], [47.2, 7285.0], [47.3, 7296.0], [47.4, 7300.0], [47.5, 7315.0], [47.6, 7320.0], [47.7, 7330.0], [47.8, 7338.0], [47.9, 7339.0], [48.0, 7345.0], [48.1, 7352.0], [48.2, 7358.0], [48.3, 7368.0], [48.4, 7369.0], [48.5, 7374.0], [48.6, 7379.0], [48.7, 7386.0], [48.8, 7389.0], [48.9, 7394.0], [49.0, 7397.0], [49.1, 7401.0], [49.2, 7408.0], [49.3, 7413.0], [49.4, 7418.0], [49.5, 7425.0], [49.6, 7436.0], [49.7, 7442.0], [49.8, 7444.0], [49.9, 7450.0], [50.0, 7454.0], [50.1, 7460.0], [50.2, 7463.0], [50.3, 7472.0], [50.4, 7477.0], [50.5, 7482.0], [50.6, 7488.0], [50.7, 7495.0], [50.8, 7499.0], [50.9, 7503.0], [51.0, 7507.0], [51.1, 7508.0], [51.2, 7518.0], [51.3, 7523.0], [51.4, 7527.0], [51.5, 7531.0], [51.6, 7542.0], [51.7, 7553.0], [51.8, 7556.0], [51.9, 7559.0], [52.0, 7566.0], [52.1, 7574.0], [52.2, 7579.0], [52.3, 7585.0], [52.4, 7595.0], [52.5, 7602.0], [52.6, 7605.0], [52.7, 7606.0], [52.8, 7613.0], [52.9, 7619.0], [53.0, 7622.0], [53.1, 7626.0], [53.2, 7630.0], [53.3, 7634.0], [53.4, 7637.0], [53.5, 7641.0], [53.6, 7644.0], [53.7, 7649.0], [53.8, 7652.0], [53.9, 7655.0], [54.0, 7660.0], [54.1, 7670.0], [54.2, 7674.0], [54.3, 7678.0], [54.4, 7681.0], [54.5, 7687.0], [54.6, 7691.0], [54.7, 7693.0], [54.8, 7696.0], [54.9, 7698.0], [55.0, 7701.0], [55.1, 7705.0], [55.2, 7708.0], [55.3, 7713.0], [55.4, 7715.0], [55.5, 7717.0], [55.6, 7718.0], [55.7, 7721.0], [55.8, 7724.0], [55.9, 7728.0], [56.0, 7730.0], [56.1, 7733.0], [56.2, 7736.0], [56.3, 7743.0], [56.4, 7750.0], [56.5, 7754.0], [56.6, 7756.0], [56.7, 7759.0], [56.8, 7763.0], [56.9, 7767.0], [57.0, 7769.0], [57.1, 7773.0], [57.2, 7780.0], [57.3, 7784.0], [57.4, 7786.0], [57.5, 7789.0], [57.6, 7790.0], [57.7, 7792.0], [57.8, 7794.0], [57.9, 7796.0], [58.0, 7799.0], [58.1, 7801.0], [58.2, 7806.0], [58.3, 7811.0], [58.4, 7815.0], [58.5, 7818.0], [58.6, 7821.0], [58.7, 7823.0], [58.8, 7828.0], [58.9, 7831.0], [59.0, 7833.0], [59.1, 7835.0], [59.2, 7837.0], [59.3, 7840.0], [59.4, 7842.0], [59.5, 7844.0], [59.6, 7847.0], [59.7, 7849.0], [59.8, 7853.0], [59.9, 7854.0], [60.0, 7856.0], [60.1, 7858.0], [60.2, 7860.0], [60.3, 7864.0], [60.4, 7869.0], [60.5, 7872.0], [60.6, 7875.0], [60.7, 7878.0], [60.8, 7881.0], [60.9, 7883.0], [61.0, 7886.0], [61.1, 7887.0], [61.2, 7888.0], [61.3, 7890.0], [61.4, 7891.0], [61.5, 7892.0], [61.6, 7894.0], [61.7, 7896.0], [61.8, 7898.0], [61.9, 7900.0], [62.0, 7902.0], [62.1, 7903.0], [62.2, 7904.0], [62.3, 7907.0], [62.4, 7910.0], [62.5, 7912.0], [62.6, 7915.0], [62.7, 7917.0], [62.8, 7919.0], [62.9, 7922.0], [63.0, 7924.0], [63.1, 7925.0], [63.2, 7928.0], [63.3, 7930.0], [63.4, 7932.0], [63.5, 7936.0], [63.6, 7938.0], [63.7, 7939.0], [63.8, 7942.0], [63.9, 7942.0], [64.0, 7943.0], [64.1, 7946.0], [64.2, 7950.0], [64.3, 7951.0], [64.4, 7953.0], [64.5, 7955.0], [64.6, 7958.0], [64.7, 7960.0], [64.8, 7961.0], [64.9, 7964.0], [65.0, 7966.0], [65.1, 7968.0], [65.2, 7969.0], [65.3, 7972.0], [65.4, 7975.0], [65.5, 7977.0], [65.6, 7979.0], [65.7, 7980.0], [65.8, 7982.0], [65.9, 7985.0], [66.0, 7988.0], [66.1, 7990.0], [66.2, 7991.0], [66.3, 7994.0], [66.4, 7996.0], [66.5, 7996.0], [66.6, 7998.0], [66.7, 8000.0], [66.8, 8002.0], [66.9, 8003.0], [67.0, 8007.0], [67.1, 8010.0], [67.2, 8011.0], [67.3, 8014.0], [67.4, 8016.0], [67.5, 8020.0], [67.6, 8021.0], [67.7, 8023.0], [67.8, 8026.0], [67.9, 8027.0], [68.0, 8030.0], [68.1, 8032.0], [68.2, 8036.0], [68.3, 8041.0], [68.4, 8043.0], [68.5, 8045.0], [68.6, 8048.0], [68.7, 8051.0], [68.8, 8052.0], [68.9, 8054.0], [69.0, 8056.0], [69.1, 8059.0], [69.2, 8062.0], [69.3, 8063.0], [69.4, 8066.0], [69.5, 8068.0], [69.6, 8070.0], [69.7, 8072.0], [69.8, 8073.0], [69.9, 8075.0], [70.0, 8077.0], [70.1, 8079.0], [70.2, 8081.0], [70.3, 8085.0], [70.4, 8087.0], [70.5, 8089.0], [70.6, 8090.0], [70.7, 8091.0], [70.8, 8092.0], [70.9, 8093.0], [71.0, 8095.0], [71.1, 8098.0], [71.2, 8101.0], [71.3, 8101.0], [71.4, 8103.0], [71.5, 8104.0], [71.6, 8106.0], [71.7, 8108.0], [71.8, 8110.0], [71.9, 8113.0], [72.0, 8114.0], [72.1, 8115.0], [72.2, 8116.0], [72.3, 8118.0], [72.4, 8119.0], [72.5, 8120.0], [72.6, 8122.0], [72.7, 8124.0], [72.8, 8128.0], [72.9, 8130.0], [73.0, 8132.0], [73.1, 8133.0], [73.2, 8135.0], [73.3, 8138.0], [73.4, 8140.0], [73.5, 8143.0], [73.6, 8145.0], [73.7, 8149.0], [73.8, 8150.0], [73.9, 8152.0], [74.0, 8155.0], [74.1, 8158.0], [74.2, 8160.0], [74.3, 8163.0], [74.4, 8166.0], [74.5, 8168.0], [74.6, 8170.0], [74.7, 8172.0], [74.8, 8174.0], [74.9, 8176.0], [75.0, 8183.0], [75.1, 8187.0], [75.2, 8190.0], [75.3, 8192.0], [75.4, 8194.0], [75.5, 8198.0], [75.6, 8201.0], [75.7, 8203.0], [75.8, 8210.0], [75.9, 8212.0], [76.0, 8217.0], [76.1, 8224.0], [76.2, 8227.0], [76.3, 8229.0], [76.4, 8234.0], [76.5, 8237.0], [76.6, 8243.0], [76.7, 8248.0], [76.8, 8253.0], [76.9, 8258.0], [77.0, 8261.0], [77.1, 8265.0], [77.2, 8268.0], [77.3, 8271.0], [77.4, 8273.0], [77.5, 8276.0], [77.6, 8278.0], [77.7, 8285.0], [77.8, 8288.0], [77.9, 8295.0], [78.0, 8299.0], [78.1, 8304.0], [78.2, 8309.0], [78.3, 8314.0], [78.4, 8322.0], [78.5, 8326.0], [78.6, 8328.0], [78.7, 8330.0], [78.8, 8334.0], [78.9, 8340.0], [79.0, 8344.0], [79.1, 8350.0], [79.2, 8352.0], [79.3, 8357.0], [79.4, 8361.0], [79.5, 8370.0], [79.6, 8374.0], [79.7, 8378.0], [79.8, 8379.0], [79.9, 8384.0], [80.0, 8387.0], [80.1, 8393.0], [80.2, 8399.0], [80.3, 8403.0], [80.4, 8405.0], [80.5, 8408.0], [80.6, 8411.0], [80.7, 8416.0], [80.8, 8421.0], [80.9, 8430.0], [81.0, 8434.0], [81.1, 8441.0], [81.2, 8452.0], [81.3, 8462.0], [81.4, 8474.0], [81.5, 8484.0], [81.6, 8489.0], [81.7, 8494.0], [81.8, 8497.0], [81.9, 8501.0], [82.0, 8505.0], [82.1, 8509.0], [82.2, 8518.0], [82.3, 8522.0], [82.4, 8529.0], [82.5, 8535.0], [82.6, 8541.0], [82.7, 8547.0], [82.8, 8555.0], [82.9, 8568.0], [83.0, 8579.0], [83.1, 8585.0], [83.2, 8590.0], [83.3, 8602.0], [83.4, 8608.0], [83.5, 8612.0], [83.6, 8616.0], [83.7, 8622.0], [83.8, 8630.0], [83.9, 8633.0], [84.0, 8639.0], [84.1, 8644.0], [84.2, 8662.0], [84.3, 8667.0], [84.4, 8673.0], [84.5, 8684.0], [84.6, 8689.0], [84.7, 8693.0], [84.8, 8704.0], [84.9, 8711.0], [85.0, 8718.0], [85.1, 8730.0], [85.2, 8737.0], [85.3, 8748.0], [85.4, 8751.0], [85.5, 8756.0], [85.6, 8763.0], [85.7, 8768.0], [85.8, 8771.0], [85.9, 8776.0], [86.0, 8784.0], [86.1, 8790.0], [86.2, 8796.0], [86.3, 8800.0], [86.4, 8808.0], [86.5, 8824.0], [86.6, 8833.0], [86.7, 8839.0], [86.8, 8847.0], [86.9, 8857.0], [87.0, 8865.0], [87.1, 8876.0], [87.2, 8888.0], [87.3, 8899.0], [87.4, 8906.0], [87.5, 8909.0], [87.6, 8928.0], [87.7, 8942.0], [87.8, 8950.0], [87.9, 8958.0], [88.0, 8967.0], [88.1, 8977.0], [88.2, 8986.0], [88.3, 8995.0], [88.4, 9001.0], [88.5, 9018.0], [88.6, 9029.0], [88.7, 9036.0], [88.8, 9045.0], [88.9, 9064.0], [89.0, 9075.0], [89.1, 9090.0], [89.2, 9098.0], [89.3, 9104.0], [89.4, 9112.0], [89.5, 9128.0], [89.6, 9140.0], [89.7, 9155.0], [89.8, 9172.0], [89.9, 9181.0], [90.0, 9184.0], [90.1, 9190.0], [90.2, 9203.0], [90.3, 9222.0], [90.4, 9228.0], [90.5, 9238.0], [90.6, 9242.0], [90.7, 9251.0], [90.8, 9257.0], [90.9, 9275.0], [91.0, 9289.0], [91.1, 9301.0], [91.2, 9307.0], [91.3, 9322.0], [91.4, 9339.0], [91.5, 9356.0], [91.6, 9364.0], [91.7, 9395.0], [91.8, 9408.0], [91.9, 9436.0], [92.0, 9446.0], [92.1, 9464.0], [92.2, 9480.0], [92.3, 9487.0], [92.4, 9493.0], [92.5, 9501.0], [92.6, 9509.0], [92.7, 9512.0], [92.8, 9517.0], [92.9, 9521.0], [93.0, 9530.0], [93.1, 9534.0], [93.2, 9544.0], [93.3, 9551.0], [93.4, 9555.0], [93.5, 9572.0], [93.6, 9582.0], [93.7, 9589.0], [93.8, 9596.0], [93.9, 9610.0], [94.0, 9615.0], [94.1, 9623.0], [94.2, 9628.0], [94.3, 9633.0], [94.4, 9638.0], [94.5, 9642.0], [94.6, 9655.0], [94.7, 9663.0], [94.8, 9671.0], [94.9, 9683.0], [95.0, 9695.0], [95.1, 9716.0], [95.2, 9754.0], [95.3, 9773.0], [95.4, 9788.0], [95.5, 9810.0], [95.6, 9827.0], [95.7, 9837.0], [95.8, 9850.0], [95.9, 9863.0], [96.0, 9877.0], [96.1, 9895.0], [96.2, 9912.0], [96.3, 9930.0], [96.4, 9964.0], [96.5, 9986.0], [96.6, 10140.0], [96.7, 10261.0], [96.8, 10325.0], [96.9, 10384.0], [97.0, 10416.0], [97.1, 10432.0], [97.2, 10457.0], [97.3, 10469.0], [97.4, 10480.0], [97.5, 10499.0], [97.6, 10531.0], [97.7, 10551.0], [97.8, 10571.0], [97.9, 10598.0], [98.0, 10670.0], [98.1, 10701.0], [98.2, 10721.0], [98.3, 10742.0], [98.4, 10755.0], [98.5, 10783.0], [98.6, 10817.0], [98.7, 10846.0], [98.8, 10869.0], [98.9, 10888.0], [99.0, 10919.0], [99.1, 10949.0], [99.2, 10963.0], [99.3, 10979.0], [99.4, 10997.0], [99.5, 11004.0], [99.6, 11030.0], [99.7, 11051.0], [99.8, 11059.0], [99.9, 11065.0]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 365.0, "series": [{"data": [[100.0, 365.0], [200.0, 141.0], [300.0, 78.0], [400.0, 69.0], [500.0, 42.0], [600.0, 38.0], [700.0, 41.0], [800.0, 40.0], [900.0, 34.0], [1000.0, 35.0], [1100.0, 34.0], [1200.0, 31.0], [1300.0, 36.0], [1400.0, 30.0], [1500.0, 19.0], [1600.0, 23.0], [1700.0, 23.0], [1800.0, 13.0], [1900.0, 25.0], [2000.0, 25.0], [2100.0, 13.0], [2200.0, 23.0], [2300.0, 16.0], [2400.0, 14.0], [2500.0, 16.0], [2600.0, 11.0], [2700.0, 21.0], [2800.0, 15.0], [2900.0, 25.0], [3000.0, 19.0], [3100.0, 14.0], [3300.0, 15.0], [3200.0, 17.0], [3400.0, 12.0], [3500.0, 24.0], [3700.0, 18.0], [3600.0, 16.0], [3800.0, 16.0], [3900.0, 10.0], [4000.0, 21.0], [4300.0, 23.0], [4200.0, 26.0], [4100.0, 19.0], [4500.0, 24.0], [4600.0, 23.0], [4400.0, 18.0], [4800.0, 22.0], [4700.0, 21.0], [5100.0, 27.0], [4900.0, 29.0], [5000.0, 33.0], [5300.0, 35.0], [5200.0, 22.0], [5600.0, 43.0], [5500.0, 41.0], [5400.0, 33.0], [5700.0, 51.0], [5800.0, 36.0], [5900.0, 59.0], [6100.0, 52.0], [6000.0, 48.0], [6300.0, 50.0], [6200.0, 47.0], [6500.0, 46.0], [6400.0, 56.0], [6600.0, 52.0], [6700.0, 57.0], [6800.0, 66.0], [6900.0, 54.0], [7000.0, 62.0], [7100.0, 60.0], [7200.0, 73.0], [7300.0, 100.0], [7400.0, 102.0], [7500.0, 97.0], [7600.0, 146.0], [7700.0, 184.0], [7800.0, 221.0], [7900.0, 285.0], [8000.0, 265.0], [8100.0, 258.0], [8300.0, 133.0], [8400.0, 93.0], [8500.0, 83.0], [8600.0, 87.0], [8700.0, 91.0], [8200.0, 144.0], [8800.0, 60.0], [9000.0, 53.0], [9100.0, 54.0], [9200.0, 55.0], [8900.0, 60.0], [9300.0, 39.0], [9400.0, 42.0], [9500.0, 82.0], [9600.0, 68.0], [9700.0, 26.0], [9800.0, 40.0], [9900.0, 24.0], [10000.0, 1.0], [10100.0, 5.0], [10200.0, 5.0], [10300.0, 12.0], [10400.0, 33.0], [10500.0, 24.0], [10600.0, 10.0], [10700.0, 28.0], [10800.0, 23.0], [10900.0, 28.0], [11000.0, 30.0], [11400.0, 1.0], [11500.0, 1.0], [11700.0, 1.0], [11900.0, 1.0]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 11900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 360.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4867.0, "series": [{"data": [[0.0, 654.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 360.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4867.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 210.44432989690702, "minX": 1.61255394E12, "maxY": 240.0, "series": [{"data": [[1.61255406E12, 240.0], [1.612554E12, 240.0], [1.61255418E12, 240.0], [1.61255412E12, 240.0], [1.61255424E12, 210.44432989690702], [1.61255394E12, 240.0]], "isOverall": false, "label": "Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61255424E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 177.0, "minX": 1.0, "maxY": 9917.0, "series": [{"data": [[2.0, 415.0], [3.0, 435.0], [4.0, 432.0], [6.0, 479.0], [7.0, 495.0], [8.0, 492.0], [9.0, 535.0], [10.0, 281.0], [11.0, 516.0], [12.0, 443.0], [13.0, 395.0], [14.0, 420.0], [15.0, 362.0], [16.0, 343.0], [17.0, 215.0], [18.0, 203.0], [19.0, 183.0], [20.0, 184.0], [21.0, 183.0], [22.0, 179.0], [23.0, 177.0], [24.0, 198.0], [25.0, 193.0], [26.0, 185.0], [27.0, 184.0], [28.0, 204.0], [29.0, 189.0], [30.0, 183.0], [31.0, 183.0], [33.0, 185.0], [32.0, 181.0], [35.0, 199.0], [34.0, 205.0], [36.0, 183.0], [39.0, 238.0], [38.0, 184.0], [41.0, 721.0], [40.0, 704.0], [43.0, 674.0], [42.0, 750.0], [45.0, 357.5], [47.0, 628.0], [46.0, 720.0], [49.0, 687.0], [48.0, 822.0], [51.0, 907.0], [50.0, 878.0], [53.0, 617.0], [52.0, 1013.0], [55.0, 1136.0], [57.0, 727.0], [56.0, 1047.0], [59.0, 1162.0], [58.0, 1208.0], [61.0, 1142.0], [60.0, 985.0], [63.0, 1128.0], [62.0, 1140.0], [67.0, 825.0], [66.0, 1251.0], [65.0, 1264.0], [64.0, 1216.0], [71.0, 1573.0], [70.0, 1493.0], [69.0, 9917.0], [68.0, 1282.0], [75.0, 5286.0], [74.0, 1211.0], [73.0, 1190.0], [72.0, 1094.0], [79.0, 2091.0], [78.0, 2339.0], [77.0, 1736.0], [76.0, 2023.0], [83.0, 3126.0], [82.0, 3714.0], [81.0, 3047.0], [80.0, 2657.0], [87.0, 3585.0], [86.0, 3086.0], [85.0, 3002.0], [84.0, 3279.0], [91.0, 3832.0], [90.0, 3720.0], [89.0, 3599.0], [88.0, 3488.0], [95.0, 4256.0], [94.0, 3841.0], [93.0, 4230.0], [92.0, 3897.0], [99.0, 5345.0], [98.0, 5341.0], [97.0, 4804.0], [96.0, 4585.0], [103.0, 5463.0], [102.0, 5549.0], [101.0, 5191.0], [100.0, 5174.0], [107.0, 6059.0], [106.0, 5703.0], [105.0, 6114.0], [104.0, 5686.0], [111.0, 6082.0], [110.0, 6199.0], [109.0, 5978.0], [108.0, 5797.0], [115.0, 6903.0], [114.0, 6772.0], [113.0, 6676.0], [112.0, 6307.0], [119.0, 6699.0], [118.0, 6928.0], [117.0, 6943.0], [123.0, 7300.0], [122.0, 6808.0], [121.0, 8635.0], [120.0, 6723.0], [127.0, 7129.0], [126.0, 7475.0], [125.0, 7247.0], [124.0, 7339.0], [134.0, 7602.0], [133.0, 7335.0], [132.0, 7850.5], [130.0, 7567.0], [129.0, 7455.0], [143.0, 7702.0], [142.0, 7821.0], [141.0, 7443.0], [140.0, 7839.0], [139.0, 7605.0], [138.0, 7755.0], [137.0, 7401.0], [136.0, 7348.0], [151.0, 7901.0], [150.0, 7439.0], [149.0, 7422.0], [148.0, 7527.0], [147.0, 7873.0], [146.0, 7848.0], [145.0, 7499.0], [144.0, 7338.0], [159.0, 7724.0], [158.0, 7741.0], [157.0, 7728.0], [156.0, 8000.0], [155.0, 7994.0], [154.0, 7531.0], [153.0, 7601.0], [152.0, 7932.0], [167.0, 8217.0], [166.0, 7707.0], [165.0, 7714.0], [164.0, 8264.0], [163.0, 8222.5], [161.0, 7714.0], [160.0, 7694.0], [174.0, 8002.0], [173.0, 7732.0], [172.0, 8283.0], [171.0, 8164.0], [170.0, 8186.0], [169.0, 8202.0], [168.0, 8190.0], [183.0, 8027.0], [182.0, 7815.0], [181.0, 8094.0], [180.0, 7903.0], [179.0, 7993.0], [178.0, 8222.0], [177.0, 8029.0], [176.0, 8096.0], [191.0, 8109.0], [190.0, 8099.0], [189.0, 8187.0], [188.0, 8049.0], [187.0, 8139.0], [186.0, 8121.0], [185.0, 8220.5], [199.0, 8159.0], [198.0, 7905.0], [197.0, 8219.0], [196.0, 8116.0], [195.0, 8155.0], [194.0, 8340.0], [193.0, 8161.0], [192.0, 8063.0], [207.0, 8360.0], [206.0, 8255.0], [205.0, 8267.0], [204.0, 8261.0], [203.0, 8196.0], [202.0, 8116.0], [201.0, 7849.0], [200.0, 8192.0], [215.0, 8318.0], [214.0, 8103.0], [213.0, 8170.0], [212.0, 8330.0], [211.0, 8334.0], [210.0, 8227.0], [209.0, 8237.0], [208.0, 8300.0], [223.0, 8323.0], [222.0, 8163.0], [221.0, 8184.0], [220.0, 8087.0], [219.0, 8145.0], [218.0, 8195.0], [216.0, 8162.0], [231.0, 8054.0], [230.0, 7936.0], [229.0, 8228.0], [228.0, 8098.0], [227.0, 7907.0], [226.0, 8067.0], [225.0, 7880.0], [224.0, 8075.0], [239.0, 8054.666666666667], [238.0, 8051.0], [237.0, 8234.0], [236.0, 8020.0], [235.0, 7785.0], [234.0, 7797.0], [233.0, 7855.0], [232.0, 7779.0], [240.0, 6134.391666666655], [1.0, 383.0]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[235.1251487842202, 6092.893555517756]], "isOverall": false, "label": "Home-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 240.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 23.833333333333332, "minX": 1.61255394E12, "maxY": 6518.533333333334, "series": [{"data": [[1.61255406E12, 6317.616666666667], [1.612554E12, 5753.383333333333], [1.61255418E12, 6518.533333333334], [1.61255412E12, 6480.45], [1.61255424E12, 4979.866666666667], [1.61255394E12, 56.53333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61255406E12, 2675.8333333333335], [1.612554E12, 2452.6666666666665], [1.61255418E12, 2751.6666666666665], [1.61255412E12, 2736.5], [1.61255424E12, 2101.6666666666665], [1.61255394E12, 23.833333333333332]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61255424E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5503.688659793819, "minX": 1.61255394E12, "maxY": 9253.181818181818, "series": [{"data": [[1.61255406E12, 6011.899595141701], [1.612554E12, 7700.651943462893], [1.61255418E12, 5584.8031496062995], [1.61255412E12, 5666.991290577985], [1.61255424E12, 5503.688659793819], [1.61255394E12, 9253.181818181818]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61255424E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 74.81818181818181, "minX": 1.61255394E12, "maxY": 391.0335689045931, "series": [{"data": [[1.61255406E12, 184.25668016194356], [1.612554E12, 391.0335689045931], [1.61255418E12, 178.54645669291335], [1.61255412E12, 178.17893903404595], [1.61255424E12, 179.7670103092788], [1.61255394E12, 74.81818181818181]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61255424E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.5878542510121453, "minX": 1.61255394E12, "maxY": 17.0, "series": [{"data": [[1.61255406E12, 0.5878542510121453], [1.612554E12, 7.113957597173156], [1.61255418E12, 0.6385826771653538], [1.61255412E12, 0.5993665874901014], [1.61255424E12, 0.6216494845360829], [1.61255394E12, 17.0]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61255424E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 175.0, "minX": 1.61255394E12, "maxY": 11936.0, "series": [{"data": [[1.61255406E12, 11936.0], [1.612554E12, 11078.0], [1.61255418E12, 11722.0], [1.61255412E12, 11581.0], [1.61255424E12, 9917.0], [1.61255394E12, 9525.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61255406E12, 8760.2], [1.612554E12, 10647.1], [1.61255418E12, 8113.0], [1.61255412E12, 8166.6], [1.61255424E12, 8089.8], [1.61255394E12, 9524.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61255406E12, 9243.84], [1.612554E12, 11054.01], [1.61255418E12, 8404.45], [1.61255412E12, 8539.72], [1.61255424E12, 8383.029999999999], [1.61255394E12, 9525.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61255406E12, 8936.2], [1.612554E12, 10894.849999999999], [1.61255418E12, 8198.0], [1.61255412E12, 8331.4], [1.61255424E12, 8196.9], [1.61255394E12, 9525.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61255406E12, 175.0], [1.612554E12, 175.0], [1.61255418E12, 175.0], [1.61255412E12, 175.0], [1.61255424E12, 176.0], [1.61255394E12, 8888.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61255406E12, 7477.0], [1.612554E12, 9150.5], [1.61255418E12, 6989.5], [1.61255412E12, 7099.0], [1.61255424E12, 6836.0], [1.61255394E12, 9286.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61255424E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 236.0, "minX": 1.0, "maxY": 10852.5, "series": [{"data": [[2.0, 3325.0], [3.0, 2798.0], [4.0, 3669.5], [5.0, 3645.0], [6.0, 3853.5], [7.0, 1162.5], [8.0, 3156.5], [9.0, 1615.0], [10.0, 6222.5], [11.0, 4281.0], [12.0, 663.0], [13.0, 5793.5], [14.0, 6001.0], [15.0, 236.0], [16.0, 6375.0], [17.0, 684.0], [18.0, 3112.0], [19.0, 388.0], [20.0, 4945.0], [21.0, 7217.0], [23.0, 260.0], [24.0, 4268.0], [25.0, 4425.0], [27.0, 7620.0], [29.0, 1439.5], [33.0, 7775.0], [32.0, 6495.5], [34.0, 7581.0], [35.0, 2856.0], [37.0, 5189.5], [39.0, 7750.0], [38.0, 7791.0], [40.0, 8710.5], [41.0, 6390.5], [43.0, 8010.0], [45.0, 7195.0], [44.0, 8047.5], [47.0, 6982.0], [49.0, 7900.0], [48.0, 5952.0], [51.0, 6653.5], [53.0, 7686.0], [52.0, 7980.0], [54.0, 7977.5], [55.0, 6368.0], [56.0, 6437.0], [59.0, 7983.0], [60.0, 7909.0], [63.0, 8118.0], [62.0, 8028.0], [67.0, 7684.0], [66.0, 8048.0], [69.0, 7882.0], [73.0, 8846.0], [75.0, 8157.0], [78.0, 8336.5], [84.0, 8432.5], [89.0, 9632.0], [93.0, 10305.0], [100.0, 8887.0], [111.0, 9599.0], [119.0, 9306.0], [136.0, 10852.5], [1.0, 2747.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 136.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 20.0, "minX": 1.0, "maxY": 1699.0, "series": [{"data": [[2.0, 28.0], [3.0, 42.0], [4.0, 43.0], [5.0, 41.0], [6.0, 46.0], [7.0, 27.5], [8.0, 29.0], [9.0, 29.0], [10.0, 69.5], [11.0, 60.0], [12.0, 22.0], [13.0, 78.0], [14.0, 91.0], [15.0, 20.0], [16.0, 79.0], [17.0, 29.0], [18.0, 58.5], [19.0, 25.0], [20.0, 85.0], [21.0, 118.0], [23.0, 27.0], [24.0, 89.0], [25.0, 66.5], [27.0, 158.0], [29.0, 93.0], [33.0, 137.0], [32.0, 163.0], [34.0, 223.0], [35.0, 230.0], [37.0, 146.5], [39.0, 262.0], [38.0, 161.5], [40.0, 146.0], [41.0, 170.0], [43.0, 218.0], [45.0, 311.0], [44.0, 197.0], [47.0, 311.0], [49.0, 192.0], [48.0, 239.0], [51.0, 318.0], [53.0, 212.0], [52.0, 199.5], [54.0, 289.0], [55.0, 320.0], [56.0, 326.0], [59.0, 271.5], [60.0, 274.0], [63.0, 252.0], [62.0, 274.5], [67.0, 303.0], [66.0, 240.0], [69.0, 307.0], [73.0, 227.0], [75.0, 275.0], [78.0, 303.5], [84.0, 256.5], [89.0, 421.0], [93.0, 367.0], [100.0, 298.0], [111.0, 245.0], [119.0, 354.0], [136.0, 1699.0], [1.0, 25.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 136.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.61255394E12, "maxY": 20.7, "series": [{"data": [[1.61255406E12, 20.383333333333333], [1.612554E12, 18.666666666666668], [1.61255418E12, 20.083333333333332], [1.61255412E12, 20.7], [1.61255424E12, 14.183333333333334], [1.61255394E12, 4.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61255424E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.61255394E12, "maxY": 21.166666666666668, "series": [{"data": [[1.61255406E12, 20.583333333333332], [1.612554E12, 18.866666666666667], [1.61255418E12, 21.166666666666668], [1.61255412E12, 21.05], [1.61255424E12, 16.166666666666668], [1.61255394E12, 0.18333333333333332]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61255424E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.61255394E12, "maxY": 21.166666666666668, "series": [{"data": [[1.61255406E12, 20.583333333333332], [1.612554E12, 18.866666666666667], [1.61255418E12, 21.166666666666668], [1.61255412E12, 21.05], [1.61255424E12, 16.166666666666668], [1.61255394E12, 0.18333333333333332]], "isOverall": false, "label": "Home-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61255424E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.61255394E12, "maxY": 21.166666666666668, "series": [{"data": [[1.61255406E12, 20.583333333333332], [1.612554E12, 18.866666666666667], [1.61255418E12, 21.166666666666668], [1.61255412E12, 21.05], [1.61255424E12, 16.166666666666668], [1.61255394E12, 0.18333333333333332]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61255424E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

