/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 176.0, "minX": 0.0, "maxY": 14856.0, "series": [{"data": [[0.0, 176.0], [0.1, 177.0], [0.2, 178.0], [0.3, 180.0], [0.4, 181.0], [0.5, 183.0], [0.6, 183.0], [0.7, 184.0], [0.8, 185.0], [0.9, 187.0], [1.0, 189.0], [1.1, 192.0], [1.2, 196.0], [1.3, 200.0], [1.4, 204.0], [1.5, 216.0], [1.6, 225.0], [1.7, 235.0], [1.8, 243.0], [1.9, 256.0], [2.0, 264.0], [2.1, 273.0], [2.2, 292.0], [2.3, 300.0], [2.4, 307.0], [2.5, 318.0], [2.6, 328.0], [2.7, 332.0], [2.8, 347.0], [2.9, 360.0], [3.0, 363.0], [3.1, 375.0], [3.2, 385.0], [3.3, 391.0], [3.4, 395.0], [3.5, 401.0], [3.6, 416.0], [3.7, 422.0], [3.8, 431.0], [3.9, 443.0], [4.0, 458.0], [4.1, 472.0], [4.2, 485.0], [4.3, 493.0], [4.4, 505.0], [4.5, 523.0], [4.6, 527.0], [4.7, 540.0], [4.8, 557.0], [4.9, 565.0], [5.0, 578.0], [5.1, 596.0], [5.2, 603.0], [5.3, 609.0], [5.4, 631.0], [5.5, 650.0], [5.6, 661.0], [5.7, 679.0], [5.8, 702.0], [5.9, 719.0], [6.0, 731.0], [6.1, 735.0], [6.2, 758.0], [6.3, 776.0], [6.4, 791.0], [6.5, 806.0], [6.6, 816.0], [6.7, 842.0], [6.8, 853.0], [6.9, 869.0], [7.0, 891.0], [7.1, 903.0], [7.2, 918.0], [7.3, 935.0], [7.4, 959.0], [7.5, 975.0], [7.6, 996.0], [7.7, 1006.0], [7.8, 1010.0], [7.9, 1027.0], [8.0, 1033.0], [8.1, 1061.0], [8.2, 1074.0], [8.3, 1088.0], [8.4, 1097.0], [8.5, 1118.0], [8.6, 1138.0], [8.7, 1150.0], [8.8, 1163.0], [8.9, 1185.0], [9.0, 1206.0], [9.1, 1222.0], [9.2, 1260.0], [9.3, 1279.0], [9.4, 1300.0], [9.5, 1310.0], [9.6, 1337.0], [9.7, 1358.0], [9.8, 1393.0], [9.9, 1417.0], [10.0, 1447.0], [10.1, 1468.0], [10.2, 1510.0], [10.3, 1523.0], [10.4, 1541.0], [10.5, 1571.0], [10.6, 1581.0], [10.7, 1602.0], [10.8, 1624.0], [10.9, 1651.0], [11.0, 1664.0], [11.1, 1678.0], [11.2, 1685.0], [11.3, 1707.0], [11.4, 1735.0], [11.5, 1750.0], [11.6, 1759.0], [11.7, 1795.0], [11.8, 1805.0], [11.9, 1826.0], [12.0, 1849.0], [12.1, 1874.0], [12.2, 1893.0], [12.3, 1923.0], [12.4, 1939.0], [12.5, 1949.0], [12.6, 1957.0], [12.7, 1972.0], [12.8, 1985.0], [12.9, 2001.0], [13.0, 2027.0], [13.1, 2037.0], [13.2, 2049.0], [13.3, 2065.0], [13.4, 2093.0], [13.5, 2123.0], [13.6, 2178.0], [13.7, 2193.0], [13.8, 2211.0], [13.9, 2219.0], [14.0, 2244.0], [14.1, 2260.0], [14.2, 2283.0], [14.3, 2302.0], [14.4, 2336.0], [14.5, 2346.0], [14.6, 2373.0], [14.7, 2405.0], [14.8, 2419.0], [14.9, 2442.0], [15.0, 2465.0], [15.1, 2490.0], [15.2, 2512.0], [15.3, 2546.0], [15.4, 2576.0], [15.5, 2605.0], [15.6, 2635.0], [15.7, 2660.0], [15.8, 2695.0], [15.9, 2739.0], [16.0, 2760.0], [16.1, 2807.0], [16.2, 2856.0], [16.3, 2893.0], [16.4, 2916.0], [16.5, 2949.0], [16.6, 2996.0], [16.7, 3021.0], [16.8, 3054.0], [16.9, 3087.0], [17.0, 3133.0], [17.1, 3161.0], [17.2, 3184.0], [17.3, 3203.0], [17.4, 3272.0], [17.5, 3301.0], [17.6, 3326.0], [17.7, 3381.0], [17.8, 3439.0], [17.9, 3493.0], [18.0, 3520.0], [18.1, 3539.0], [18.2, 3593.0], [18.3, 3624.0], [18.4, 3652.0], [18.5, 3704.0], [18.6, 3737.0], [18.7, 3770.0], [18.8, 3804.0], [18.9, 3825.0], [19.0, 3886.0], [19.1, 3932.0], [19.2, 4003.0], [19.3, 4039.0], [19.4, 4095.0], [19.5, 4128.0], [19.6, 4165.0], [19.7, 4213.0], [19.8, 4232.0], [19.9, 4271.0], [20.0, 4344.0], [20.1, 4380.0], [20.2, 4500.0], [20.3, 4557.0], [20.4, 4608.0], [20.5, 4648.0], [20.6, 4693.0], [20.7, 4725.0], [20.8, 4746.0], [20.9, 4808.0], [21.0, 4838.0], [21.1, 4883.0], [21.2, 4933.0], [21.3, 5000.0], [21.4, 5068.0], [21.5, 5120.0], [21.6, 5156.0], [21.7, 5182.0], [21.8, 5232.0], [21.9, 5260.0], [22.0, 5338.0], [22.1, 5394.0], [22.2, 5425.0], [22.3, 5525.0], [22.4, 5614.0], [22.5, 5629.0], [22.6, 5663.0], [22.7, 5703.0], [22.8, 5755.0], [22.9, 5787.0], [23.0, 5837.0], [23.1, 5878.0], [23.2, 5925.0], [23.3, 5956.0], [23.4, 6030.0], [23.5, 6052.0], [23.6, 6090.0], [23.7, 6129.0], [23.8, 6144.0], [23.9, 6176.0], [24.0, 6233.0], [24.1, 6276.0], [24.2, 6322.0], [24.3, 6367.0], [24.4, 6393.0], [24.5, 6424.0], [24.6, 6437.0], [24.7, 6470.0], [24.8, 6493.0], [24.9, 6507.0], [25.0, 6543.0], [25.1, 6578.0], [25.2, 6601.0], [25.3, 6630.0], [25.4, 6657.0], [25.5, 6678.0], [25.6, 6690.0], [25.7, 6709.0], [25.8, 6723.0], [25.9, 6744.0], [26.0, 6750.0], [26.1, 6768.0], [26.2, 6792.0], [26.3, 6811.0], [26.4, 6840.0], [26.5, 6858.0], [26.6, 6868.0], [26.7, 6890.0], [26.8, 6904.0], [26.9, 6920.0], [27.0, 6945.0], [27.1, 6980.0], [27.2, 7006.0], [27.3, 7027.0], [27.4, 7047.0], [27.5, 7074.0], [27.6, 7080.0], [27.7, 7086.0], [27.8, 7117.0], [27.9, 7132.0], [28.0, 7145.0], [28.1, 7162.0], [28.2, 7187.0], [28.3, 7225.0], [28.4, 7240.0], [28.5, 7266.0], [28.6, 7275.0], [28.7, 7297.0], [28.8, 7315.0], [28.9, 7337.0], [29.0, 7354.0], [29.1, 7368.0], [29.2, 7378.0], [29.3, 7392.0], [29.4, 7408.0], [29.5, 7415.0], [29.6, 7434.0], [29.7, 7469.0], [29.8, 7475.0], [29.9, 7493.0], [30.0, 7516.0], [30.1, 7536.0], [30.2, 7550.0], [30.3, 7558.0], [30.4, 7583.0], [30.5, 7607.0], [30.6, 7634.0], [30.7, 7657.0], [30.8, 7673.0], [30.9, 7686.0], [31.0, 7705.0], [31.1, 7719.0], [31.2, 7732.0], [31.3, 7744.0], [31.4, 7770.0], [31.5, 7789.0], [31.6, 7810.0], [31.7, 7836.0], [31.8, 7847.0], [31.9, 7865.0], [32.0, 7893.0], [32.1, 7918.0], [32.2, 7928.0], [32.3, 7938.0], [32.4, 7952.0], [32.5, 7971.0], [32.6, 7989.0], [32.7, 8013.0], [32.8, 8034.0], [32.9, 8077.0], [33.0, 8099.0], [33.1, 8126.0], [33.2, 8147.0], [33.3, 8168.0], [33.4, 8182.0], [33.5, 8206.0], [33.6, 8227.0], [33.7, 8251.0], [33.8, 8268.0], [33.9, 8283.0], [34.0, 8310.0], [34.1, 8357.0], [34.2, 8376.0], [34.3, 8403.0], [34.4, 8441.0], [34.5, 8465.0], [34.6, 8497.0], [34.7, 8516.0], [34.8, 8527.0], [34.9, 8556.0], [35.0, 8565.0], [35.1, 8583.0], [35.2, 8593.0], [35.3, 8604.0], [35.4, 8625.0], [35.5, 8638.0], [35.6, 8651.0], [35.7, 8664.0], [35.8, 8678.0], [35.9, 8687.0], [36.0, 8708.0], [36.1, 8723.0], [36.2, 8734.0], [36.3, 8745.0], [36.4, 8754.0], [36.5, 8766.0], [36.6, 8784.0], [36.7, 8790.0], [36.8, 8808.0], [36.9, 8815.0], [37.0, 8835.0], [37.1, 8842.0], [37.2, 8860.0], [37.3, 8885.0], [37.4, 8898.0], [37.5, 8906.0], [37.6, 8923.0], [37.7, 8928.0], [37.8, 8932.0], [37.9, 8951.0], [38.0, 8960.0], [38.1, 8972.0], [38.2, 8981.0], [38.3, 8993.0], [38.4, 9003.0], [38.5, 9017.0], [38.6, 9026.0], [38.7, 9031.0], [38.8, 9041.0], [38.9, 9050.0], [39.0, 9061.0], [39.1, 9065.0], [39.2, 9070.0], [39.3, 9084.0], [39.4, 9091.0], [39.5, 9107.0], [39.6, 9116.0], [39.7, 9126.0], [39.8, 9138.0], [39.9, 9167.0], [40.0, 9181.0], [40.1, 9193.0], [40.2, 9215.0], [40.3, 9226.0], [40.4, 9235.0], [40.5, 9242.0], [40.6, 9245.0], [40.7, 9262.0], [40.8, 9271.0], [40.9, 9287.0], [41.0, 9292.0], [41.1, 9305.0], [41.2, 9308.0], [41.3, 9319.0], [41.4, 9335.0], [41.5, 9342.0], [41.6, 9350.0], [41.7, 9366.0], [41.8, 9369.0], [41.9, 9375.0], [42.0, 9381.0], [42.1, 9387.0], [42.2, 9394.0], [42.3, 9403.0], [42.4, 9408.0], [42.5, 9418.0], [42.6, 9428.0], [42.7, 9434.0], [42.8, 9440.0], [42.9, 9448.0], [43.0, 9457.0], [43.1, 9464.0], [43.2, 9477.0], [43.3, 9488.0], [43.4, 9494.0], [43.5, 9499.0], [43.6, 9512.0], [43.7, 9519.0], [43.8, 9523.0], [43.9, 9535.0], [44.0, 9542.0], [44.1, 9549.0], [44.2, 9562.0], [44.3, 9572.0], [44.4, 9578.0], [44.5, 9584.0], [44.6, 9596.0], [44.7, 9609.0], [44.8, 9617.0], [44.9, 9627.0], [45.0, 9632.0], [45.1, 9636.0], [45.2, 9647.0], [45.3, 9652.0], [45.4, 9665.0], [45.5, 9669.0], [45.6, 9672.0], [45.7, 9679.0], [45.8, 9689.0], [45.9, 9692.0], [46.0, 9699.0], [46.1, 9706.0], [46.2, 9710.0], [46.3, 9715.0], [46.4, 9724.0], [46.5, 9739.0], [46.6, 9743.0], [46.7, 9750.0], [46.8, 9758.0], [46.9, 9765.0], [47.0, 9774.0], [47.1, 9782.0], [47.2, 9788.0], [47.3, 9794.0], [47.4, 9802.0], [47.5, 9807.0], [47.6, 9815.0], [47.7, 9822.0], [47.8, 9835.0], [47.9, 9840.0], [48.0, 9848.0], [48.1, 9857.0], [48.2, 9864.0], [48.3, 9872.0], [48.4, 9880.0], [48.5, 9889.0], [48.6, 9897.0], [48.7, 9902.0], [48.8, 9907.0], [48.9, 9918.0], [49.0, 9931.0], [49.1, 9936.0], [49.2, 9940.0], [49.3, 9949.0], [49.4, 9953.0], [49.5, 9956.0], [49.6, 9961.0], [49.7, 9969.0], [49.8, 9978.0], [49.9, 9986.0], [50.0, 9996.0], [50.1, 10000.0], [50.2, 10008.0], [50.3, 10012.0], [50.4, 10017.0], [50.5, 10023.0], [50.6, 10028.0], [50.7, 10034.0], [50.8, 10040.0], [50.9, 10050.0], [51.0, 10053.0], [51.1, 10057.0], [51.2, 10061.0], [51.3, 10063.0], [51.4, 10070.0], [51.5, 10074.0], [51.6, 10077.0], [51.7, 10084.0], [51.8, 10094.0], [51.9, 10096.0], [52.0, 10102.0], [52.1, 10105.0], [52.2, 10108.0], [52.3, 10113.0], [52.4, 10119.0], [52.5, 10124.0], [52.6, 10132.0], [52.7, 10137.0], [52.8, 10141.0], [52.9, 10144.0], [53.0, 10151.0], [53.1, 10159.0], [53.2, 10162.0], [53.3, 10171.0], [53.4, 10175.0], [53.5, 10182.0], [53.6, 10186.0], [53.7, 10190.0], [53.8, 10197.0], [53.9, 10201.0], [54.0, 10204.0], [54.1, 10209.0], [54.2, 10214.0], [54.3, 10216.0], [54.4, 10221.0], [54.5, 10229.0], [54.6, 10238.0], [54.7, 10240.0], [54.8, 10244.0], [54.9, 10249.0], [55.0, 10258.0], [55.1, 10263.0], [55.2, 10270.0], [55.3, 10274.0], [55.4, 10283.0], [55.5, 10286.0], [55.6, 10292.0], [55.7, 10296.0], [55.8, 10299.0], [55.9, 10304.0], [56.0, 10307.0], [56.1, 10312.0], [56.2, 10317.0], [56.3, 10321.0], [56.4, 10327.0], [56.5, 10332.0], [56.6, 10334.0], [56.7, 10336.0], [56.8, 10344.0], [56.9, 10349.0], [57.0, 10352.0], [57.1, 10353.0], [57.2, 10361.0], [57.3, 10368.0], [57.4, 10371.0], [57.5, 10378.0], [57.6, 10385.0], [57.7, 10390.0], [57.8, 10394.0], [57.9, 10400.0], [58.0, 10401.0], [58.1, 10404.0], [58.2, 10407.0], [58.3, 10410.0], [58.4, 10414.0], [58.5, 10419.0], [58.6, 10421.0], [58.7, 10423.0], [58.8, 10430.0], [58.9, 10435.0], [59.0, 10441.0], [59.1, 10443.0], [59.2, 10446.0], [59.3, 10449.0], [59.4, 10455.0], [59.5, 10459.0], [59.6, 10463.0], [59.7, 10470.0], [59.8, 10475.0], [59.9, 10479.0], [60.0, 10485.0], [60.1, 10489.0], [60.2, 10492.0], [60.3, 10495.0], [60.4, 10497.0], [60.5, 10502.0], [60.6, 10506.0], [60.7, 10508.0], [60.8, 10511.0], [60.9, 10516.0], [61.0, 10520.0], [61.1, 10522.0], [61.2, 10524.0], [61.3, 10526.0], [61.4, 10528.0], [61.5, 10535.0], [61.6, 10543.0], [61.7, 10546.0], [61.8, 10548.0], [61.9, 10552.0], [62.0, 10553.0], [62.1, 10559.0], [62.2, 10562.0], [62.3, 10565.0], [62.4, 10568.0], [62.5, 10571.0], [62.6, 10578.0], [62.7, 10582.0], [62.8, 10590.0], [62.9, 10595.0], [63.0, 10597.0], [63.1, 10600.0], [63.2, 10602.0], [63.3, 10605.0], [63.4, 10611.0], [63.5, 10615.0], [63.6, 10619.0], [63.7, 10621.0], [63.8, 10624.0], [63.9, 10626.0], [64.0, 10630.0], [64.1, 10635.0], [64.2, 10638.0], [64.3, 10644.0], [64.4, 10647.0], [64.5, 10648.0], [64.6, 10652.0], [64.7, 10656.0], [64.8, 10658.0], [64.9, 10660.0], [65.0, 10661.0], [65.1, 10665.0], [65.2, 10667.0], [65.3, 10669.0], [65.4, 10672.0], [65.5, 10676.0], [65.6, 10679.0], [65.7, 10682.0], [65.8, 10683.0], [65.9, 10685.0], [66.0, 10690.0], [66.1, 10692.0], [66.2, 10694.0], [66.3, 10697.0], [66.4, 10699.0], [66.5, 10700.0], [66.6, 10704.0], [66.7, 10707.0], [66.8, 10709.0], [66.9, 10714.0], [67.0, 10717.0], [67.1, 10720.0], [67.2, 10724.0], [67.3, 10725.0], [67.4, 10728.0], [67.5, 10732.0], [67.6, 10737.0], [67.7, 10740.0], [67.8, 10746.0], [67.9, 10748.0], [68.0, 10750.0], [68.1, 10752.0], [68.2, 10755.0], [68.3, 10757.0], [68.4, 10760.0], [68.5, 10763.0], [68.6, 10766.0], [68.7, 10769.0], [68.8, 10774.0], [68.9, 10777.0], [69.0, 10779.0], [69.1, 10782.0], [69.2, 10785.0], [69.3, 10786.0], [69.4, 10790.0], [69.5, 10793.0], [69.6, 10795.0], [69.7, 10797.0], [69.8, 10799.0], [69.9, 10801.0], [70.0, 10803.0], [70.1, 10805.0], [70.2, 10808.0], [70.3, 10810.0], [70.4, 10813.0], [70.5, 10815.0], [70.6, 10819.0], [70.7, 10822.0], [70.8, 10826.0], [70.9, 10828.0], [71.0, 10830.0], [71.1, 10835.0], [71.2, 10837.0], [71.3, 10842.0], [71.4, 10844.0], [71.5, 10848.0], [71.6, 10852.0], [71.7, 10854.0], [71.8, 10856.0], [71.9, 10859.0], [72.0, 10861.0], [72.1, 10864.0], [72.2, 10866.0], [72.3, 10870.0], [72.4, 10872.0], [72.5, 10876.0], [72.6, 10879.0], [72.7, 10881.0], [72.8, 10884.0], [72.9, 10886.0], [73.0, 10889.0], [73.1, 10892.0], [73.2, 10895.0], [73.3, 10898.0], [73.4, 10899.0], [73.5, 10903.0], [73.6, 10907.0], [73.7, 10911.0], [73.8, 10913.0], [73.9, 10916.0], [74.0, 10919.0], [74.1, 10922.0], [74.2, 10927.0], [74.3, 10931.0], [74.4, 10934.0], [74.5, 10936.0], [74.6, 10938.0], [74.7, 10945.0], [74.8, 10949.0], [74.9, 10952.0], [75.0, 10954.0], [75.1, 10959.0], [75.2, 10962.0], [75.3, 10963.0], [75.4, 10966.0], [75.5, 10969.0], [75.6, 10971.0], [75.7, 10973.0], [75.8, 10975.0], [75.9, 10977.0], [76.0, 10980.0], [76.1, 10984.0], [76.2, 10988.0], [76.3, 10991.0], [76.4, 10995.0], [76.5, 10997.0], [76.6, 11001.0], [76.7, 11002.0], [76.8, 11004.0], [76.9, 11006.0], [77.0, 11009.0], [77.1, 11012.0], [77.2, 11016.0], [77.3, 11020.0], [77.4, 11025.0], [77.5, 11027.0], [77.6, 11029.0], [77.7, 11033.0], [77.8, 11037.0], [77.9, 11042.0], [78.0, 11046.0], [78.1, 11051.0], [78.2, 11052.0], [78.3, 11054.0], [78.4, 11058.0], [78.5, 11063.0], [78.6, 11069.0], [78.7, 11072.0], [78.8, 11075.0], [78.9, 11079.0], [79.0, 11084.0], [79.1, 11089.0], [79.2, 11092.0], [79.3, 11098.0], [79.4, 11101.0], [79.5, 11107.0], [79.6, 11110.0], [79.7, 11116.0], [79.8, 11121.0], [79.9, 11124.0], [80.0, 11126.0], [80.1, 11128.0], [80.2, 11131.0], [80.3, 11135.0], [80.4, 11140.0], [80.5, 11145.0], [80.6, 11152.0], [80.7, 11155.0], [80.8, 11160.0], [80.9, 11166.0], [81.0, 11169.0], [81.1, 11173.0], [81.2, 11177.0], [81.3, 11180.0], [81.4, 11184.0], [81.5, 11189.0], [81.6, 11194.0], [81.7, 11199.0], [81.8, 11205.0], [81.9, 11208.0], [82.0, 11209.0], [82.1, 11219.0], [82.2, 11222.0], [82.3, 11225.0], [82.4, 11229.0], [82.5, 11235.0], [82.6, 11237.0], [82.7, 11239.0], [82.8, 11243.0], [82.9, 11245.0], [83.0, 11250.0], [83.1, 11254.0], [83.2, 11256.0], [83.3, 11261.0], [83.4, 11265.0], [83.5, 11270.0], [83.6, 11274.0], [83.7, 11280.0], [83.8, 11283.0], [83.9, 11284.0], [84.0, 11287.0], [84.1, 11288.0], [84.2, 11292.0], [84.3, 11297.0], [84.4, 11300.0], [84.5, 11305.0], [84.6, 11309.0], [84.7, 11315.0], [84.8, 11318.0], [84.9, 11324.0], [85.0, 11327.0], [85.1, 11331.0], [85.2, 11335.0], [85.3, 11338.0], [85.4, 11343.0], [85.5, 11349.0], [85.6, 11355.0], [85.7, 11355.0], [85.8, 11357.0], [85.9, 11361.0], [86.0, 11365.0], [86.1, 11370.0], [86.2, 11374.0], [86.3, 11377.0], [86.4, 11385.0], [86.5, 11388.0], [86.6, 11396.0], [86.7, 11400.0], [86.8, 11407.0], [86.9, 11409.0], [87.0, 11417.0], [87.1, 11427.0], [87.2, 11438.0], [87.3, 11447.0], [87.4, 11455.0], [87.5, 11461.0], [87.6, 11465.0], [87.7, 11473.0], [87.8, 11478.0], [87.9, 11483.0], [88.0, 11492.0], [88.1, 11497.0], [88.2, 11504.0], [88.3, 11514.0], [88.4, 11517.0], [88.5, 11530.0], [88.6, 11536.0], [88.7, 11546.0], [88.8, 11553.0], [88.9, 11563.0], [89.0, 11566.0], [89.1, 11572.0], [89.2, 11580.0], [89.3, 11590.0], [89.4, 11595.0], [89.5, 11603.0], [89.6, 11609.0], [89.7, 11613.0], [89.8, 11620.0], [89.9, 11625.0], [90.0, 11631.0], [90.1, 11641.0], [90.2, 11646.0], [90.3, 11653.0], [90.4, 11666.0], [90.5, 11676.0], [90.6, 11685.0], [90.7, 11695.0], [90.8, 11699.0], [90.9, 11705.0], [91.0, 11719.0], [91.1, 11724.0], [91.2, 11732.0], [91.3, 11751.0], [91.4, 11756.0], [91.5, 11762.0], [91.6, 11767.0], [91.7, 11774.0], [91.8, 11783.0], [91.9, 11798.0], [92.0, 11812.0], [92.1, 11816.0], [92.2, 11828.0], [92.3, 11845.0], [92.4, 11856.0], [92.5, 11880.0], [92.6, 11886.0], [92.7, 11901.0], [92.8, 11913.0], [92.9, 11920.0], [93.0, 11928.0], [93.1, 11935.0], [93.2, 11940.0], [93.3, 11949.0], [93.4, 11957.0], [93.5, 11963.0], [93.6, 11976.0], [93.7, 11990.0], [93.8, 11999.0], [93.9, 12013.0], [94.0, 12028.0], [94.1, 12047.0], [94.2, 12056.0], [94.3, 12069.0], [94.4, 12081.0], [94.5, 12091.0], [94.6, 12108.0], [94.7, 12116.0], [94.8, 12130.0], [94.9, 12154.0], [95.0, 12178.0], [95.1, 12192.0], [95.2, 12246.0], [95.3, 12279.0], [95.4, 12321.0], [95.5, 12349.0], [95.6, 12398.0], [95.7, 12555.0], [95.8, 12617.0], [95.9, 12675.0], [96.0, 12720.0], [96.1, 12774.0], [96.2, 12796.0], [96.3, 12816.0], [96.4, 12848.0], [96.5, 12914.0], [96.6, 13036.0], [96.7, 13088.0], [96.8, 13151.0], [96.9, 13216.0], [97.0, 13253.0], [97.1, 13271.0], [97.2, 13320.0], [97.3, 13345.0], [97.4, 13385.0], [97.5, 13399.0], [97.6, 13419.0], [97.7, 13450.0], [97.8, 13477.0], [97.9, 13499.0], [98.0, 13516.0], [98.1, 13524.0], [98.2, 13550.0], [98.3, 13563.0], [98.4, 13580.0], [98.5, 13599.0], [98.6, 13621.0], [98.7, 13634.0], [98.8, 13649.0], [98.9, 13668.0], [99.0, 13674.0], [99.1, 13697.0], [99.2, 13712.0], [99.3, 13727.0], [99.4, 13750.0], [99.5, 13761.0], [99.6, 13792.0], [99.7, 13814.0], [99.8, 14013.0], [99.9, 14371.0], [100.0, 14856.0]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 227.0, "series": [{"data": [[100.0, 82.0], [200.0, 63.0], [300.0, 73.0], [400.0, 56.0], [500.0, 52.0], [600.0, 39.0], [700.0, 43.0], [800.0, 38.0], [900.0, 37.0], [1000.0, 48.0], [1100.0, 36.0], [1200.0, 26.0], [1300.0, 28.0], [1400.0, 22.0], [1500.0, 32.0], [1600.0, 36.0], [1700.0, 32.0], [1800.0, 28.0], [1900.0, 42.0], [2000.0, 36.0], [2100.0, 20.0], [2300.0, 23.0], [2200.0, 34.0], [2400.0, 29.0], [2500.0, 24.0], [2600.0, 20.0], [2700.0, 15.0], [2800.0, 16.0], [2900.0, 20.0], [3000.0, 19.0], [3100.0, 23.0], [3300.0, 14.0], [3200.0, 13.0], [3400.0, 13.0], [3500.0, 18.0], [3700.0, 19.0], [3600.0, 18.0], [3800.0, 18.0], [3900.0, 6.0], [4000.0, 16.0], [4300.0, 10.0], [4100.0, 16.0], [4200.0, 17.0], [4600.0, 16.0], [4500.0, 11.0], [4400.0, 6.0], [4800.0, 15.0], [4700.0, 17.0], [5000.0, 12.0], [5100.0, 17.0], [4900.0, 10.0], [5300.0, 12.0], [5200.0, 13.0], [5600.0, 19.0], [5400.0, 8.0], [5500.0, 7.0], [5700.0, 15.0], [5800.0, 13.0], [5900.0, 14.0], [6000.0, 17.0], [6100.0, 20.0], [6200.0, 12.0], [6300.0, 21.0], [6600.0, 29.0], [6400.0, 23.0], [6500.0, 23.0], [6700.0, 37.0], [6900.0, 26.0], [6800.0, 33.0], [7100.0, 30.0], [7000.0, 37.0], [7300.0, 41.0], [7200.0, 30.0], [7400.0, 37.0], [7600.0, 35.0], [7500.0, 31.0], [7800.0, 30.0], [7700.0, 36.0], [7900.0, 40.0], [8100.0, 30.0], [8000.0, 22.0], [8200.0, 30.0], [8600.0, 43.0], [8500.0, 41.0], [8700.0, 52.0], [8300.0, 21.0], [8400.0, 21.0], [8900.0, 60.0], [9000.0, 65.0], [9100.0, 46.0], [9200.0, 57.0], [8800.0, 41.0], [9300.0, 77.0], [9400.0, 80.0], [9500.0, 70.0], [9600.0, 89.0], [9700.0, 83.0], [9800.0, 82.0], [10100.0, 119.0], [9900.0, 91.0], [10000.0, 119.0], [10200.0, 123.0], [10400.0, 163.0], [10500.0, 167.0], [10600.0, 213.0], [10700.0, 212.0], [10300.0, 130.0], [10800.0, 227.0], [10900.0, 200.0], [11000.0, 175.0], [11100.0, 149.0], [11200.0, 170.0], [11300.0, 141.0], [11400.0, 96.0], [11500.0, 83.0], [11600.0, 85.0], [11700.0, 70.0], [11800.0, 48.0], [11900.0, 72.0], [12000.0, 48.0], [12100.0, 35.0], [12200.0, 16.0], [12300.0, 15.0], [12400.0, 5.0], [12500.0, 5.0], [12600.0, 12.0], [12700.0, 16.0], [12800.0, 15.0], [12900.0, 7.0], [13000.0, 9.0], [13100.0, 10.0], [13200.0, 17.0], [13300.0, 24.0], [13400.0, 25.0], [13500.0, 38.0], [13600.0, 40.0], [13700.0, 30.0], [13800.0, 9.0], [14000.0, 4.0], [14300.0, 1.0], [14100.0, 2.0], [13900.0, 2.0], [14400.0, 2.0], [14500.0, 2.0], [14600.0, 1.0], [14800.0, 1.0]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 14800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 275.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5674.0, "series": [{"data": [[0.0, 275.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 368.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5674.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 265.84615384615364, "minX": 1.61255568E12, "maxY": 300.0, "series": [{"data": [[1.61255592E12, 265.84615384615364], [1.6125558E12, 300.0], [1.61255586E12, 300.0], [1.61255568E12, 300.0], [1.61255574E12, 300.0]], "isOverall": false, "label": "Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61255592E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1456.0, "minX": 1.0, "maxY": 14516.0, "series": [{"data": [[2.0, 6578.0], [4.0, 6467.0], [6.0, 6423.0], [7.0, 6470.0], [8.0, 6311.0], [9.0, 6726.0], [10.0, 6686.0], [11.0, 6720.0], [12.0, 6785.0], [13.0, 6542.0], [14.0, 6493.0], [15.0, 6722.0], [16.0, 7006.0], [17.0, 6686.0], [19.0, 6785.5], [20.0, 6531.0], [21.0, 6657.0], [22.0, 6592.0], [23.0, 7027.0], [25.0, 6929.0], [26.0, 6980.0], [27.0, 6868.0], [28.0, 6611.0], [29.0, 6884.0], [30.0, 7244.0], [31.0, 6919.0], [33.0, 6891.0], [32.0, 6858.0], [35.0, 6738.0], [34.0, 6862.0], [37.0, 6915.0], [36.0, 6753.0], [39.0, 6850.0], [38.0, 6828.0], [41.0, 7072.0], [40.0, 6885.0], [43.0, 6765.0], [42.0, 6747.0], [45.0, 6742.0], [44.0, 7078.0], [47.0, 6896.0], [46.0, 7208.0], [49.0, 7267.0], [48.0, 7155.0], [51.0, 7310.0], [50.0, 7296.0], [53.0, 6837.0], [52.0, 6748.0], [55.0, 7304.0], [54.0, 6897.0], [57.0, 6849.0], [56.0, 7400.0], [59.0, 6900.0], [58.0, 7080.0], [61.0, 7095.0], [60.0, 7330.0], [63.0, 7059.0], [62.0, 7402.0], [67.0, 7101.0], [66.0, 6962.0], [65.0, 7086.0], [64.0, 7084.0], [71.0, 7741.0], [70.0, 7082.0], [69.0, 7139.0], [68.0, 7119.0], [75.0, 7132.0], [74.0, 7318.0], [73.0, 7160.0], [72.0, 7369.0], [79.0, 7425.0], [77.0, 7162.0], [76.0, 7399.0], [83.0, 7619.0], [82.0, 7275.0], [81.0, 7408.0], [80.0, 7389.0], [87.0, 7269.0], [86.0, 7462.0], [85.0, 7361.0], [84.0, 7622.0], [91.0, 7309.0], [90.0, 7354.0], [89.0, 7454.0], [88.0, 7369.0], [94.0, 7349.0], [93.0, 7297.0], [92.0, 7367.0], [99.0, 7528.0], [98.0, 7266.0], [97.0, 7494.0], [96.0, 7550.5], [103.0, 7403.0], [102.0, 7398.0], [101.0, 7482.0], [100.0, 7482.0], [107.0, 7469.0], [106.0, 7292.0], [105.0, 7552.0], [104.0, 7561.0], [111.0, 7361.0], [110.0, 7677.0], [109.0, 7732.0], [108.0, 7373.0], [114.0, 7719.0], [113.0, 7408.0], [112.0, 7363.0], [119.0, 7302.0], [118.0, 7523.0], [117.0, 7686.0], [116.0, 7475.0], [123.0, 7719.0], [122.0, 7536.0], [121.0, 7559.0], [120.0, 7503.0], [127.0, 7355.0], [126.0, 7690.0], [125.0, 7692.0], [124.0, 7659.0], [135.0, 7384.0], [134.0, 7410.0], [133.0, 7557.0], [132.0, 7413.0], [131.0, 7639.0], [130.0, 7651.0], [129.0, 7415.0], [143.0, 7086.0], [142.0, 7359.0], [141.0, 7062.0], [140.0, 7214.0], [139.0, 7155.0], [138.0, 7175.0], [137.0, 7315.0], [136.0, 7376.0], [151.0, 6830.0], [150.0, 7062.0], [149.0, 6857.0], [148.0, 6937.0], [147.0, 7132.0], [146.0, 6945.0], [145.0, 7075.0], [144.0, 7049.0], [159.0, 6788.0], [158.0, 6794.0], [157.0, 6864.0], [156.0, 6810.0], [155.0, 6831.0], [154.0, 6810.0], [153.0, 6987.0], [152.0, 6869.0], [167.0, 6726.0], [166.0, 6760.0], [165.0, 6749.0], [164.0, 6714.0], [163.0, 6677.0], [162.0, 6783.0], [161.0, 6721.0], [160.0, 7006.0], [175.0, 6393.0], [174.0, 6402.0], [173.0, 6437.0], [172.0, 6558.0], [171.0, 6521.0], [170.0, 6630.0], [169.0, 6736.0], [168.0, 6690.0], [183.0, 6181.0], [182.0, 6110.0], [181.0, 6260.0], [180.0, 6144.0], [179.0, 6428.0], [178.0, 6431.0], [177.0, 6393.0], [176.0, 6507.0], [191.0, 5904.0], [190.0, 6052.0], [189.0, 6041.0], [188.0, 6011.0], [187.0, 6071.0], [186.0, 6126.0], [185.0, 6077.0], [184.0, 6090.0], [199.0, 4375.0], [198.0, 4590.0], [197.0, 5203.0], [196.0, 5302.0], [195.0, 5485.0], [194.0, 5378.0], [193.0, 5636.0], [192.0, 5690.0], [207.0, 3551.0], [206.0, 3806.0], [205.0, 4034.0], [204.0, 4069.0], [203.0, 4065.0], [202.0, 4160.0], [201.0, 4215.0], [200.0, 4271.0], [215.0, 2314.0], [214.0, 2353.0], [213.0, 2273.0], [212.0, 2344.0], [211.0, 2660.0], [210.0, 2584.0], [209.0, 3647.0], [208.0, 3520.0], [223.0, 1935.0], [222.0, 1814.0], [221.0, 1759.0], [220.0, 1854.0], [219.0, 1795.0], [218.0, 1691.0], [217.0, 2138.0], [216.0, 2199.0], [231.0, 1664.0], [230.0, 1609.0], [229.0, 1666.0], [228.0, 1731.0], [227.0, 1678.0], [226.0, 1494.0], [225.0, 1654.0], [224.0, 1577.0], [239.0, 1748.0], [238.0, 1960.0], [237.0, 1685.0], [236.0, 1719.0], [235.0, 1657.0], [234.0, 1988.0], [233.0, 2020.0], [232.0, 1456.0], [247.0, 1797.0], [246.0, 1967.0], [245.0, 1607.0], [244.0, 1582.0], [243.0, 1547.0], [242.0, 1769.5], [240.0, 1933.0], [255.0, 2585.0], [254.0, 2409.0], [253.0, 1807.0], [252.0, 3005.0], [251.0, 2000.0], [250.0, 1871.0], [249.0, 1885.0], [248.0, 1727.0], [270.0, 3469.0], [271.0, 3550.0], [269.0, 3538.0], [268.0, 3493.0], [267.0, 3541.0], [266.0, 3257.0], [264.0, 2810.0], [263.0, 14516.0], [257.0, 2915.0], [256.0, 2739.0], [259.0, 2503.0], [258.0, 2659.0], [262.0, 2705.0], [261.0, 2902.0], [260.0, 2635.0], [286.0, 6214.0], [287.0, 6247.0], [285.0, 5760.0], [284.0, 5589.0], [283.0, 5589.0], [282.0, 5338.0], [281.0, 5244.0], [280.0, 4263.0], [279.0, 4126.0], [273.0, 3593.0], [272.0, 3866.0], [275.0, 3639.0], [274.0, 3637.0], [278.0, 4055.0], [277.0, 3812.0], [276.0, 3772.0], [296.0, 6485.0], [300.0, 8469.79201995014], [299.0, 7723.0], [298.0, 7249.0], [297.0, 7263.0], [295.0, 6367.0], [294.0, 6601.0], [293.0, 6329.0], [292.0, 12400.0], [291.0, 6580.0], [290.0, 6427.0], [289.0, 6660.0], [288.0, 6234.0], [1.0, 6700.0]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[292.9009023270539, 8342.462877948414]], "isOverall": false, "label": "Home-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 300.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2526.3333333333335, "minX": 1.61255568E12, "maxY": 7284.133333333333, "series": [{"data": [[1.61255592E12, 6758.4], [1.6125558E12, 6167.383333333333], [1.61255586E12, 6304.433333333333], [1.61255568E12, 5952.016666666666], [1.61255574E12, 7284.133333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61255592E12, 2844.8333333333335], [1.6125558E12, 2597.8333333333335], [1.61255586E12, 2649.8333333333335], [1.61255568E12, 2526.3333333333335], [1.61255574E12, 3068.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61255592E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 7830.083015993907, "minX": 1.61255568E12, "maxY": 9714.192109777023, "series": [{"data": [[1.61255592E12, 7830.083015993907], [1.6125558E12, 7888.693911593002], [1.61255586E12, 7926.0907604251815], [1.61255568E12, 9714.192109777023], [1.61255574E12, 8431.877118644072]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61255592E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 232.22768974145106, "minX": 1.61255568E12, "maxY": 696.3833619210983, "series": [{"data": [[1.61255592E12, 245.04950495049482], [1.6125558E12, 232.22768974145106], [1.61255586E12, 237.0114472608339], [1.61255568E12, 696.3833619210983], [1.61255574E12, 257.2153954802258]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61255592E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.4505649717514125, "minX": 1.61255568E12, "maxY": 7.528301886792461, "series": [{"data": [[1.61255592E12, 0.5247524752475251], [1.6125558E12, 0.5095913261050878], [1.61255586E12, 0.5445625511038428], [1.61255568E12, 7.528301886792461], [1.61255574E12, 0.4505649717514125]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61255592E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 176.0, "minX": 1.61255568E12, "maxY": 14856.0, "series": [{"data": [[1.61255592E12, 14856.0], [1.6125558E12, 14612.0], [1.61255586E12, 14484.0], [1.61255568E12, 14049.0], [1.61255574E12, 14506.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61255592E12, 10697.6], [1.6125558E12, 11136.0], [1.61255586E12, 10839.6], [1.61255568E12, 13510.0], [1.61255574E12, 11498.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61255592E12, 11533.13999999998], [1.6125558E12, 11623.0], [1.61255586E12, 11392.039999999999], [1.61255568E12, 13805.98], [1.61255574E12, 12625.88999999995]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61255592E12, 10809.3], [1.6125558E12, 11333.0], [1.61255586E12, 10952.8], [1.61255568E12, 13669.3], [1.61255574E12, 11642.3]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61255592E12, 800.0], [1.6125558E12, 182.0], [1.61255586E12, 425.0], [1.61255568E12, 176.0], [1.61255574E12, 176.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61255592E12, 8907.0], [1.6125558E12, 9847.0], [1.61255586E12, 9537.0], [1.61255568E12, 11406.5], [1.61255574E12, 10500.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61255592E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 467.0, "minX": 1.0, "maxY": 13554.0, "series": [{"data": [[2.0, 4254.5], [3.0, 4296.0], [4.0, 6036.0], [5.0, 5837.0], [6.0, 4413.0], [7.0, 6129.0], [8.0, 4670.0], [9.0, 7104.0], [10.0, 2874.0], [11.0, 4414.0], [12.0, 1799.0], [13.0, 5470.0], [14.0, 803.0], [15.0, 6052.0], [16.0, 467.0], [17.0, 7791.0], [18.0, 9471.0], [19.0, 689.0], [20.0, 1957.0], [21.0, 9065.0], [22.0, 6820.0], [23.0, 9768.0], [24.0, 3499.5], [25.0, 6714.0], [26.0, 9862.0], [27.0, 9408.0], [28.0, 5566.0], [29.0, 893.0], [30.0, 10192.0], [31.0, 6234.0], [33.0, 9015.5], [32.0, 10472.0], [35.0, 10251.0], [36.0, 10847.0], [39.0, 10146.0], [41.0, 10268.0], [40.0, 10325.5], [43.0, 10991.0], [42.0, 10542.5], [44.0, 8323.5], [46.0, 11037.0], [49.0, 10352.0], [53.0, 9348.0], [55.0, 10878.0], [54.0, 10803.5], [57.0, 10441.0], [56.0, 7475.5], [58.0, 9385.5], [59.0, 10428.0], [61.0, 9923.0], [62.0, 10426.5], [65.0, 10061.0], [66.0, 8754.5], [71.0, 12611.0], [68.0, 10490.0], [73.0, 11552.0], [77.0, 10650.5], [79.0, 10868.0], [76.0, 10059.0], [83.0, 11226.0], [82.0, 9850.5], [85.0, 10712.0], [91.0, 11299.0], [92.0, 11060.5], [97.0, 11384.0], [96.0, 11227.5], [110.0, 11812.0], [162.0, 11929.5], [187.0, 13554.0], [1.0, 4049.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 187.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 26.5, "minX": 1.0, "maxY": 2656.0, "series": [{"data": [[2.0, 53.5], [3.0, 59.0], [4.0, 58.0], [5.0, 64.0], [6.0, 61.5], [7.0, 63.0], [8.0, 65.0], [9.0, 87.0], [10.0, 71.5], [11.0, 74.0], [12.0, 68.5], [13.0, 72.0], [14.0, 32.5], [15.0, 66.0], [16.0, 26.5], [17.0, 97.0], [18.0, 118.0], [19.0, 32.0], [20.0, 65.0], [21.0, 102.0], [22.0, 129.0], [23.0, 182.0], [24.0, 169.5], [25.0, 128.0], [26.0, 146.0], [27.0, 164.0], [28.0, 69.0], [29.0, 49.5], [30.0, 172.5], [31.0, 279.0], [33.0, 168.5], [32.0, 190.0], [35.0, 170.0], [36.0, 148.5], [39.0, 171.0], [41.0, 239.0], [40.0, 220.0], [43.0, 201.0], [42.0, 247.0], [44.0, 418.0], [46.0, 227.5], [49.0, 348.0], [53.0, 394.0], [55.0, 212.0], [54.0, 258.5], [57.0, 290.0], [56.0, 192.0], [58.0, 411.0], [59.0, 380.0], [61.0, 402.0], [62.0, 343.0], [65.0, 394.0], [66.0, 429.5], [71.0, 1570.0], [68.0, 370.0], [73.0, 333.0], [77.0, 323.5], [79.0, 316.0], [76.0, 398.0], [83.0, 370.5], [82.0, 437.5], [85.0, 378.0], [91.0, 375.0], [92.0, 350.5], [97.0, 372.0], [96.0, 344.0], [110.0, 398.0], [162.0, 502.5], [187.0, 2656.0], [1.0, 43.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 187.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.61255562E12, "maxY": 24.183333333333334, "series": [{"data": [[1.61255562E12, 5.0], [1.61255592E12, 17.6], [1.6125558E12, 24.183333333333334], [1.61255586E12, 20.233333333333334], [1.61255568E12, 18.2], [1.61255574E12, 20.066666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61255592E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 19.433333333333334, "minX": 1.61255568E12, "maxY": 23.6, "series": [{"data": [[1.61255592E12, 21.883333333333333], [1.6125558E12, 19.983333333333334], [1.61255586E12, 20.383333333333333], [1.61255568E12, 19.433333333333334], [1.61255574E12, 23.6]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61255592E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 19.433333333333334, "minX": 1.61255568E12, "maxY": 23.6, "series": [{"data": [[1.61255592E12, 21.883333333333333], [1.6125558E12, 19.983333333333334], [1.61255586E12, 20.383333333333333], [1.61255568E12, 19.433333333333334], [1.61255574E12, 23.6]], "isOverall": false, "label": "Home-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61255592E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 19.433333333333334, "minX": 1.61255568E12, "maxY": 23.6, "series": [{"data": [[1.61255592E12, 21.883333333333333], [1.6125558E12, 19.983333333333334], [1.61255586E12, 20.383333333333333], [1.61255568E12, 19.433333333333334], [1.61255574E12, 23.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61255592E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

