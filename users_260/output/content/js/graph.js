/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 174.0, "minX": 0.0, "maxY": 13159.0, "series": [{"data": [[0.0, 174.0], [0.1, 175.0], [0.2, 176.0], [0.3, 176.0], [0.4, 176.0], [0.5, 177.0], [0.6, 177.0], [0.7, 177.0], [0.8, 177.0], [0.9, 178.0], [1.0, 178.0], [1.1, 178.0], [1.2, 179.0], [1.3, 179.0], [1.4, 179.0], [1.5, 180.0], [1.6, 180.0], [1.7, 180.0], [1.8, 180.0], [1.9, 180.0], [2.0, 181.0], [2.1, 181.0], [2.2, 181.0], [2.3, 181.0], [2.4, 182.0], [2.5, 182.0], [2.6, 182.0], [2.7, 183.0], [2.8, 183.0], [2.9, 183.0], [3.0, 183.0], [3.1, 183.0], [3.2, 184.0], [3.3, 184.0], [3.4, 184.0], [3.5, 184.0], [3.6, 184.0], [3.7, 184.0], [3.8, 185.0], [3.9, 185.0], [4.0, 185.0], [4.1, 185.0], [4.2, 186.0], [4.3, 186.0], [4.4, 186.0], [4.5, 187.0], [4.6, 187.0], [4.7, 188.0], [4.8, 190.0], [4.9, 192.0], [5.0, 192.0], [5.1, 193.0], [5.2, 195.0], [5.3, 198.0], [5.4, 200.0], [5.5, 202.0], [5.6, 205.0], [5.7, 207.0], [5.8, 209.0], [5.9, 212.0], [6.0, 219.0], [6.1, 221.0], [6.2, 226.0], [6.3, 227.0], [6.4, 230.0], [6.5, 233.0], [6.6, 236.0], [6.7, 240.0], [6.8, 247.0], [6.9, 251.0], [7.0, 257.0], [7.1, 265.0], [7.2, 272.0], [7.3, 278.0], [7.4, 283.0], [7.5, 290.0], [7.6, 298.0], [7.7, 312.0], [7.8, 324.0], [7.9, 330.0], [8.0, 340.0], [8.1, 352.0], [8.2, 359.0], [8.3, 369.0], [8.4, 377.0], [8.5, 386.0], [8.6, 400.0], [8.7, 408.0], [8.8, 418.0], [8.9, 421.0], [9.0, 428.0], [9.1, 440.0], [9.2, 453.0], [9.3, 460.0], [9.4, 472.0], [9.5, 483.0], [9.6, 495.0], [9.7, 510.0], [9.8, 536.0], [9.9, 553.0], [10.0, 565.0], [10.1, 596.0], [10.2, 604.0], [10.3, 615.0], [10.4, 630.0], [10.5, 649.0], [10.6, 662.0], [10.7, 681.0], [10.8, 696.0], [10.9, 705.0], [11.0, 724.0], [11.1, 738.0], [11.2, 750.0], [11.3, 759.0], [11.4, 777.0], [11.5, 797.0], [11.6, 825.0], [11.7, 841.0], [11.8, 847.0], [11.9, 860.0], [12.0, 872.0], [12.1, 900.0], [12.2, 923.0], [12.3, 935.0], [12.4, 962.0], [12.5, 1000.0], [12.6, 1029.0], [12.7, 1062.0], [12.8, 1070.0], [12.9, 1083.0], [13.0, 1105.0], [13.1, 1124.0], [13.2, 1142.0], [13.3, 1162.0], [13.4, 1184.0], [13.5, 1206.0], [13.6, 1225.0], [13.7, 1241.0], [13.8, 1278.0], [13.9, 1291.0], [14.0, 1307.0], [14.1, 1323.0], [14.2, 1339.0], [14.3, 1358.0], [14.4, 1376.0], [14.5, 1388.0], [14.6, 1410.0], [14.7, 1419.0], [14.8, 1441.0], [14.9, 1461.0], [15.0, 1476.0], [15.1, 1507.0], [15.2, 1530.0], [15.3, 1555.0], [15.4, 1575.0], [15.5, 1617.0], [15.6, 1651.0], [15.7, 1688.0], [15.8, 1702.0], [15.9, 1740.0], [16.0, 1796.0], [16.1, 1850.0], [16.2, 1866.0], [16.3, 1890.0], [16.4, 1922.0], [16.5, 1994.0], [16.6, 2034.0], [16.7, 2072.0], [16.8, 2093.0], [16.9, 2153.0], [17.0, 2203.0], [17.1, 2228.0], [17.2, 2293.0], [17.3, 2346.0], [17.4, 2395.0], [17.5, 2439.0], [17.6, 2502.0], [17.7, 2555.0], [17.8, 2581.0], [17.9, 2627.0], [18.0, 2697.0], [18.1, 2762.0], [18.2, 2796.0], [18.3, 2898.0], [18.4, 2948.0], [18.5, 2977.0], [18.6, 3030.0], [18.7, 3059.0], [18.8, 3102.0], [18.9, 3171.0], [19.0, 3221.0], [19.1, 3265.0], [19.2, 3289.0], [19.3, 3307.0], [19.4, 3368.0], [19.5, 3410.0], [19.6, 3466.0], [19.7, 3494.0], [19.8, 3539.0], [19.9, 3565.0], [20.0, 3630.0], [20.1, 3698.0], [20.2, 3778.0], [20.3, 3822.0], [20.4, 3888.0], [20.5, 3928.0], [20.6, 3982.0], [20.7, 4009.0], [20.8, 4041.0], [20.9, 4091.0], [21.0, 4178.0], [21.1, 4214.0], [21.2, 4252.0], [21.3, 4301.0], [21.4, 4338.0], [21.5, 4382.0], [21.6, 4445.0], [21.7, 4503.0], [21.8, 4550.0], [21.9, 4595.0], [22.0, 4643.0], [22.1, 4698.0], [22.2, 4754.0], [22.3, 4807.0], [22.4, 4841.0], [22.5, 4888.0], [22.6, 4919.0], [22.7, 4938.0], [22.8, 4992.0], [22.9, 5039.0], [23.0, 5058.0], [23.1, 5082.0], [23.2, 5111.0], [23.3, 5123.0], [23.4, 5176.0], [23.5, 5219.0], [23.6, 5245.0], [23.7, 5280.0], [23.8, 5409.0], [23.9, 5447.0], [24.0, 5484.0], [24.1, 5500.0], [24.2, 5528.0], [24.3, 5583.0], [24.4, 5605.0], [24.5, 5621.0], [24.6, 5646.0], [24.7, 5683.0], [24.8, 5743.0], [24.9, 5770.0], [25.0, 5792.0], [25.1, 5826.0], [25.2, 5836.0], [25.3, 5854.0], [25.4, 5878.0], [25.5, 5912.0], [25.6, 5928.0], [25.7, 5961.0], [25.8, 5985.0], [25.9, 6024.0], [26.0, 6045.0], [26.1, 6087.0], [26.2, 6135.0], [26.3, 6181.0], [26.4, 6205.0], [26.5, 6240.0], [26.6, 6258.0], [26.7, 6284.0], [26.8, 6310.0], [26.9, 6318.0], [27.0, 6329.0], [27.1, 6361.0], [27.2, 6369.0], [27.3, 6386.0], [27.4, 6401.0], [27.5, 6427.0], [27.6, 6444.0], [27.7, 6449.0], [27.8, 6464.0], [27.9, 6480.0], [28.0, 6498.0], [28.1, 6509.0], [28.2, 6519.0], [28.3, 6526.0], [28.4, 6543.0], [28.5, 6560.0], [28.6, 6568.0], [28.7, 6578.0], [28.8, 6600.0], [28.9, 6614.0], [29.0, 6632.0], [29.1, 6648.0], [29.2, 6657.0], [29.3, 6682.0], [29.4, 6697.0], [29.5, 6701.0], [29.6, 6718.0], [29.7, 6736.0], [29.8, 6759.0], [29.9, 6765.0], [30.0, 6773.0], [30.1, 6786.0], [30.2, 6799.0], [30.3, 6809.0], [30.4, 6823.0], [30.5, 6831.0], [30.6, 6852.0], [30.7, 6861.0], [30.8, 6875.0], [30.9, 6900.0], [31.0, 6917.0], [31.1, 6936.0], [31.2, 6947.0], [31.3, 6970.0], [31.4, 6978.0], [31.5, 6983.0], [31.6, 6995.0], [31.7, 7003.0], [31.8, 7028.0], [31.9, 7046.0], [32.0, 7063.0], [32.1, 7071.0], [32.2, 7076.0], [32.3, 7086.0], [32.4, 7093.0], [32.5, 7105.0], [32.6, 7111.0], [32.7, 7124.0], [32.8, 7148.0], [32.9, 7162.0], [33.0, 7180.0], [33.1, 7198.0], [33.2, 7207.0], [33.3, 7214.0], [33.4, 7230.0], [33.5, 7246.0], [33.6, 7253.0], [33.7, 7258.0], [33.8, 7268.0], [33.9, 7276.0], [34.0, 7282.0], [34.1, 7293.0], [34.2, 7313.0], [34.3, 7333.0], [34.4, 7352.0], [34.5, 7365.0], [34.6, 7382.0], [34.7, 7392.0], [34.8, 7419.0], [34.9, 7440.0], [35.0, 7452.0], [35.1, 7464.0], [35.2, 7484.0], [35.3, 7495.0], [35.4, 7510.0], [35.5, 7528.0], [35.6, 7538.0], [35.7, 7547.0], [35.8, 7554.0], [35.9, 7589.0], [36.0, 7596.0], [36.1, 7610.0], [36.2, 7621.0], [36.3, 7637.0], [36.4, 7647.0], [36.5, 7655.0], [36.6, 7683.0], [36.7, 7695.0], [36.8, 7704.0], [36.9, 7709.0], [37.0, 7725.0], [37.1, 7730.0], [37.2, 7738.0], [37.3, 7756.0], [37.4, 7770.0], [37.5, 7777.0], [37.6, 7791.0], [37.7, 7803.0], [37.8, 7827.0], [37.9, 7843.0], [38.0, 7854.0], [38.1, 7869.0], [38.2, 7878.0], [38.3, 7886.0], [38.4, 7902.0], [38.5, 7913.0], [38.6, 7931.0], [38.7, 7938.0], [38.8, 7950.0], [38.9, 7957.0], [39.0, 7967.0], [39.1, 7973.0], [39.2, 7977.0], [39.3, 7993.0], [39.4, 7999.0], [39.5, 8010.0], [39.6, 8014.0], [39.7, 8024.0], [39.8, 8036.0], [39.9, 8057.0], [40.0, 8068.0], [40.1, 8084.0], [40.2, 8090.0], [40.3, 8094.0], [40.4, 8105.0], [40.5, 8114.0], [40.6, 8126.0], [40.7, 8135.0], [40.8, 8140.0], [40.9, 8146.0], [41.0, 8155.0], [41.1, 8162.0], [41.2, 8168.0], [41.3, 8181.0], [41.4, 8186.0], [41.5, 8191.0], [41.6, 8205.0], [41.7, 8210.0], [41.8, 8218.0], [41.9, 8230.0], [42.0, 8239.0], [42.1, 8248.0], [42.2, 8264.0], [42.3, 8272.0], [42.4, 8279.0], [42.5, 8288.0], [42.6, 8293.0], [42.7, 8304.0], [42.8, 8315.0], [42.9, 8321.0], [43.0, 8325.0], [43.1, 8332.0], [43.2, 8346.0], [43.3, 8358.0], [43.4, 8367.0], [43.5, 8374.0], [43.6, 8379.0], [43.7, 8392.0], [43.8, 8404.0], [43.9, 8419.0], [44.0, 8436.0], [44.1, 8451.0], [44.2, 8463.0], [44.3, 8471.0], [44.4, 8477.0], [44.5, 8494.0], [44.6, 8502.0], [44.7, 8507.0], [44.8, 8511.0], [44.9, 8523.0], [45.0, 8535.0], [45.1, 8537.0], [45.2, 8542.0], [45.3, 8549.0], [45.4, 8554.0], [45.5, 8561.0], [45.6, 8567.0], [45.7, 8579.0], [45.8, 8585.0], [45.9, 8591.0], [46.0, 8607.0], [46.1, 8615.0], [46.2, 8621.0], [46.3, 8631.0], [46.4, 8635.0], [46.5, 8643.0], [46.6, 8650.0], [46.7, 8652.0], [46.8, 8658.0], [46.9, 8663.0], [47.0, 8669.0], [47.1, 8673.0], [47.2, 8680.0], [47.3, 8687.0], [47.4, 8695.0], [47.5, 8701.0], [47.6, 8707.0], [47.7, 8711.0], [47.8, 8715.0], [47.9, 8719.0], [48.0, 8725.0], [48.1, 8735.0], [48.2, 8741.0], [48.3, 8747.0], [48.4, 8749.0], [48.5, 8752.0], [48.6, 8760.0], [48.7, 8767.0], [48.8, 8778.0], [48.9, 8788.0], [49.0, 8794.0], [49.1, 8799.0], [49.2, 8803.0], [49.3, 8806.0], [49.4, 8809.0], [49.5, 8815.0], [49.6, 8822.0], [49.7, 8825.0], [49.8, 8832.0], [49.9, 8834.0], [50.0, 8841.0], [50.1, 8848.0], [50.2, 8852.0], [50.3, 8855.0], [50.4, 8857.0], [50.5, 8860.0], [50.6, 8867.0], [50.7, 8870.0], [50.8, 8873.0], [50.9, 8879.0], [51.0, 8880.0], [51.1, 8885.0], [51.2, 8890.0], [51.3, 8896.0], [51.4, 8899.0], [51.5, 8907.0], [51.6, 8909.0], [51.7, 8913.0], [51.8, 8920.0], [51.9, 8924.0], [52.0, 8927.0], [52.1, 8930.0], [52.2, 8932.0], [52.3, 8934.0], [52.4, 8937.0], [52.5, 8940.0], [52.6, 8943.0], [52.7, 8949.0], [52.8, 8951.0], [52.9, 8955.0], [53.0, 8959.0], [53.1, 8965.0], [53.2, 8966.0], [53.3, 8971.0], [53.4, 8974.0], [53.5, 8977.0], [53.6, 8979.0], [53.7, 8981.0], [53.8, 8983.0], [53.9, 8985.0], [54.0, 8989.0], [54.1, 8990.0], [54.2, 8994.0], [54.3, 8996.0], [54.4, 8999.0], [54.5, 9001.0], [54.6, 9002.0], [54.7, 9005.0], [54.8, 9007.0], [54.9, 9010.0], [55.0, 9015.0], [55.1, 9017.0], [55.2, 9020.0], [55.3, 9021.0], [55.4, 9023.0], [55.5, 9025.0], [55.6, 9028.0], [55.7, 9030.0], [55.8, 9037.0], [55.9, 9040.0], [56.0, 9042.0], [56.1, 9043.0], [56.2, 9047.0], [56.3, 9049.0], [56.4, 9050.0], [56.5, 9051.0], [56.6, 9054.0], [56.7, 9056.0], [56.8, 9057.0], [56.9, 9058.0], [57.0, 9061.0], [57.1, 9061.0], [57.2, 9064.0], [57.3, 9066.0], [57.4, 9068.0], [57.5, 9071.0], [57.6, 9073.0], [57.7, 9075.0], [57.8, 9079.0], [57.9, 9080.0], [58.0, 9083.0], [58.1, 9085.0], [58.2, 9090.0], [58.3, 9092.0], [58.4, 9097.0], [58.5, 9100.0], [58.6, 9101.0], [58.7, 9104.0], [58.8, 9105.0], [58.9, 9107.0], [59.0, 9109.0], [59.1, 9113.0], [59.2, 9116.0], [59.3, 9119.0], [59.4, 9123.0], [59.5, 9126.0], [59.6, 9128.0], [59.7, 9133.0], [59.8, 9135.0], [59.9, 9137.0], [60.0, 9138.0], [60.1, 9141.0], [60.2, 9143.0], [60.3, 9147.0], [60.4, 9150.0], [60.5, 9153.0], [60.6, 9155.0], [60.7, 9158.0], [60.8, 9160.0], [60.9, 9164.0], [61.0, 9166.0], [61.1, 9167.0], [61.2, 9171.0], [61.3, 9172.0], [61.4, 9175.0], [61.5, 9178.0], [61.6, 9180.0], [61.7, 9183.0], [61.8, 9186.0], [61.9, 9187.0], [62.0, 9189.0], [62.1, 9193.0], [62.2, 9198.0], [62.3, 9201.0], [62.4, 9204.0], [62.5, 9206.0], [62.6, 9209.0], [62.7, 9212.0], [62.8, 9214.0], [62.9, 9217.0], [63.0, 9219.0], [63.1, 9224.0], [63.2, 9227.0], [63.3, 9230.0], [63.4, 9232.0], [63.5, 9236.0], [63.6, 9240.0], [63.7, 9242.0], [63.8, 9244.0], [63.9, 9248.0], [64.0, 9249.0], [64.1, 9250.0], [64.2, 9252.0], [64.3, 9256.0], [64.4, 9257.0], [64.5, 9257.0], [64.6, 9259.0], [64.7, 9264.0], [64.8, 9265.0], [64.9, 9268.0], [65.0, 9271.0], [65.1, 9271.0], [65.2, 9275.0], [65.3, 9278.0], [65.4, 9280.0], [65.5, 9283.0], [65.6, 9286.0], [65.7, 9288.0], [65.8, 9290.0], [65.9, 9293.0], [66.0, 9296.0], [66.1, 9299.0], [66.2, 9302.0], [66.3, 9303.0], [66.4, 9304.0], [66.5, 9307.0], [66.6, 9309.0], [66.7, 9311.0], [66.8, 9312.0], [66.9, 9314.0], [67.0, 9318.0], [67.1, 9319.0], [67.2, 9322.0], [67.3, 9326.0], [67.4, 9328.0], [67.5, 9332.0], [67.6, 9333.0], [67.7, 9335.0], [67.8, 9338.0], [67.9, 9342.0], [68.0, 9344.0], [68.1, 9348.0], [68.2, 9349.0], [68.3, 9352.0], [68.4, 9357.0], [68.5, 9358.0], [68.6, 9362.0], [68.7, 9364.0], [68.8, 9365.0], [68.9, 9367.0], [69.0, 9370.0], [69.1, 9372.0], [69.2, 9373.0], [69.3, 9376.0], [69.4, 9380.0], [69.5, 9383.0], [69.6, 9384.0], [69.7, 9387.0], [69.8, 9389.0], [69.9, 9390.0], [70.0, 9393.0], [70.1, 9396.0], [70.2, 9399.0], [70.3, 9401.0], [70.4, 9402.0], [70.5, 9405.0], [70.6, 9408.0], [70.7, 9413.0], [70.8, 9418.0], [70.9, 9420.0], [71.0, 9422.0], [71.1, 9424.0], [71.2, 9426.0], [71.3, 9427.0], [71.4, 9428.0], [71.5, 9431.0], [71.6, 9433.0], [71.7, 9438.0], [71.8, 9441.0], [71.9, 9443.0], [72.0, 9447.0], [72.1, 9449.0], [72.2, 9452.0], [72.3, 9455.0], [72.4, 9458.0], [72.5, 9460.0], [72.6, 9463.0], [72.7, 9465.0], [72.8, 9468.0], [72.9, 9471.0], [73.0, 9476.0], [73.1, 9480.0], [73.2, 9483.0], [73.3, 9487.0], [73.4, 9489.0], [73.5, 9497.0], [73.6, 9501.0], [73.7, 9502.0], [73.8, 9507.0], [73.9, 9511.0], [74.0, 9514.0], [74.1, 9518.0], [74.2, 9522.0], [74.3, 9525.0], [74.4, 9529.0], [74.5, 9533.0], [74.6, 9538.0], [74.7, 9541.0], [74.8, 9546.0], [74.9, 9548.0], [75.0, 9554.0], [75.1, 9557.0], [75.2, 9561.0], [75.3, 9563.0], [75.4, 9566.0], [75.5, 9569.0], [75.6, 9571.0], [75.7, 9575.0], [75.8, 9577.0], [75.9, 9583.0], [76.0, 9584.0], [76.1, 9587.0], [76.2, 9590.0], [76.3, 9597.0], [76.4, 9600.0], [76.5, 9604.0], [76.6, 9605.0], [76.7, 9608.0], [76.8, 9611.0], [76.9, 9614.0], [77.0, 9616.0], [77.1, 9618.0], [77.2, 9621.0], [77.3, 9624.0], [77.4, 9626.0], [77.5, 9630.0], [77.6, 9631.0], [77.7, 9634.0], [77.8, 9637.0], [77.9, 9639.0], [78.0, 9645.0], [78.1, 9648.0], [78.2, 9651.0], [78.3, 9655.0], [78.4, 9658.0], [78.5, 9658.0], [78.6, 9660.0], [78.7, 9662.0], [78.8, 9668.0], [78.9, 9671.0], [79.0, 9675.0], [79.1, 9677.0], [79.2, 9681.0], [79.3, 9683.0], [79.4, 9686.0], [79.5, 9692.0], [79.6, 9694.0], [79.7, 9699.0], [79.8, 9703.0], [79.9, 9706.0], [80.0, 9710.0], [80.1, 9714.0], [80.2, 9717.0], [80.3, 9721.0], [80.4, 9721.0], [80.5, 9723.0], [80.6, 9731.0], [80.7, 9735.0], [80.8, 9739.0], [80.9, 9743.0], [81.0, 9745.0], [81.1, 9749.0], [81.2, 9757.0], [81.3, 9764.0], [81.4, 9768.0], [81.5, 9772.0], [81.6, 9774.0], [81.7, 9781.0], [81.8, 9786.0], [81.9, 9789.0], [82.0, 9793.0], [82.1, 9795.0], [82.2, 9801.0], [82.3, 9806.0], [82.4, 9813.0], [82.5, 9817.0], [82.6, 9820.0], [82.7, 9824.0], [82.8, 9828.0], [82.9, 9830.0], [83.0, 9837.0], [83.1, 9840.0], [83.2, 9844.0], [83.3, 9848.0], [83.4, 9851.0], [83.5, 9853.0], [83.6, 9859.0], [83.7, 9862.0], [83.8, 9867.0], [83.9, 9870.0], [84.0, 9872.0], [84.1, 9876.0], [84.2, 9887.0], [84.3, 9892.0], [84.4, 9895.0], [84.5, 9901.0], [84.6, 9907.0], [84.7, 9911.0], [84.8, 9914.0], [84.9, 9917.0], [85.0, 9921.0], [85.1, 9925.0], [85.2, 9930.0], [85.3, 9935.0], [85.4, 9940.0], [85.5, 9945.0], [85.6, 9948.0], [85.7, 9952.0], [85.8, 9955.0], [85.9, 9959.0], [86.0, 9960.0], [86.1, 9963.0], [86.2, 9968.0], [86.3, 9973.0], [86.4, 9976.0], [86.5, 9979.0], [86.6, 9984.0], [86.7, 9990.0], [86.8, 9993.0], [86.9, 9998.0], [87.0, 10000.0], [87.1, 10003.0], [87.2, 10005.0], [87.3, 10008.0], [87.4, 10013.0], [87.5, 10016.0], [87.6, 10023.0], [87.7, 10029.0], [87.8, 10033.0], [87.9, 10037.0], [88.0, 10044.0], [88.1, 10047.0], [88.2, 10053.0], [88.3, 10056.0], [88.4, 10056.0], [88.5, 10060.0], [88.6, 10065.0], [88.7, 10069.0], [88.8, 10074.0], [88.9, 10077.0], [89.0, 10082.0], [89.1, 10086.0], [89.2, 10088.0], [89.3, 10092.0], [89.4, 10095.0], [89.5, 10100.0], [89.6, 10104.0], [89.7, 10112.0], [89.8, 10119.0], [89.9, 10124.0], [90.0, 10129.0], [90.1, 10135.0], [90.2, 10142.0], [90.3, 10145.0], [90.4, 10148.0], [90.5, 10150.0], [90.6, 10153.0], [90.7, 10160.0], [90.8, 10165.0], [90.9, 10167.0], [91.0, 10171.0], [91.1, 10176.0], [91.2, 10179.0], [91.3, 10182.0], [91.4, 10187.0], [91.5, 10191.0], [91.6, 10197.0], [91.7, 10200.0], [91.8, 10205.0], [91.9, 10212.0], [92.0, 10220.0], [92.1, 10224.0], [92.2, 10232.0], [92.3, 10240.0], [92.4, 10245.0], [92.5, 10248.0], [92.6, 10252.0], [92.7, 10254.0], [92.8, 10258.0], [92.9, 10262.0], [93.0, 10266.0], [93.1, 10273.0], [93.2, 10278.0], [93.3, 10282.0], [93.4, 10286.0], [93.5, 10296.0], [93.6, 10298.0], [93.7, 10301.0], [93.8, 10305.0], [93.9, 10308.0], [94.0, 10310.0], [94.1, 10317.0], [94.2, 10331.0], [94.3, 10339.0], [94.4, 10346.0], [94.5, 10350.0], [94.6, 10361.0], [94.7, 10364.0], [94.8, 10372.0], [94.9, 10376.0], [95.0, 10385.0], [95.1, 10393.0], [95.2, 10400.0], [95.3, 10410.0], [95.4, 10433.0], [95.5, 10439.0], [95.6, 10450.0], [95.7, 10476.0], [95.8, 10519.0], [95.9, 10612.0], [96.0, 10693.0], [96.1, 10810.0], [96.2, 10997.0], [96.3, 11045.0], [96.4, 11117.0], [96.5, 11152.0], [96.6, 11185.0], [96.7, 11207.0], [96.8, 11255.0], [96.9, 11306.0], [97.0, 11331.0], [97.1, 11369.0], [97.2, 11397.0], [97.3, 11448.0], [97.4, 11470.0], [97.5, 11479.0], [97.6, 11529.0], [97.7, 11548.0], [97.8, 11585.0], [97.9, 11609.0], [98.0, 11619.0], [98.1, 11661.0], [98.2, 11679.0], [98.3, 11701.0], [98.4, 11718.0], [98.5, 11752.0], [98.6, 11774.0], [98.7, 11842.0], [98.8, 11871.0], [98.9, 11898.0], [99.0, 11931.0], [99.1, 11950.0], [99.2, 11976.0], [99.3, 11994.0], [99.4, 12012.0], [99.5, 12023.0], [99.6, 12032.0], [99.7, 12069.0], [99.8, 12133.0], [99.9, 12254.0], [100.0, 13159.0]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 312.0, "series": [{"data": [[100.0, 312.0], [200.0, 132.0], [300.0, 56.0], [400.0, 62.0], [500.0, 31.0], [600.0, 42.0], [700.0, 38.0], [800.0, 33.0], [900.0, 23.0], [1000.0, 29.0], [1100.0, 28.0], [1200.0, 27.0], [1300.0, 35.0], [1400.0, 33.0], [1500.0, 20.0], [1600.0, 21.0], [1700.0, 13.0], [1800.0, 19.0], [1900.0, 10.0], [2000.0, 18.0], [2100.0, 10.0], [2200.0, 12.0], [2300.0, 12.0], [2400.0, 10.0], [2500.0, 15.0], [2600.0, 10.0], [2700.0, 12.0], [2800.0, 6.0], [2900.0, 12.0], [3000.0, 16.0], [3100.0, 12.0], [3300.0, 14.0], [3200.0, 13.0], [3400.0, 16.0], [3500.0, 12.0], [3600.0, 10.0], [3700.0, 7.0], [3800.0, 12.0], [3900.0, 14.0], [4000.0, 14.0], [4100.0, 8.0], [4300.0, 14.0], [4200.0, 13.0], [4500.0, 14.0], [4400.0, 10.0], [4600.0, 10.0], [4800.0, 16.0], [4700.0, 9.0], [5000.0, 20.0], [4900.0, 16.0], [5100.0, 15.0], [5200.0, 18.0], [5300.0, 4.0], [5600.0, 18.0], [5400.0, 18.0], [5500.0, 18.0], [5700.0, 18.0], [5800.0, 25.0], [6100.0, 15.0], [5900.0, 22.0], [6000.0, 17.0], [6300.0, 37.0], [6200.0, 22.0], [6500.0, 46.0], [6400.0, 37.0], [6600.0, 40.0], [6800.0, 40.0], [6900.0, 46.0], [6700.0, 42.0], [7100.0, 41.0], [7000.0, 46.0], [7200.0, 55.0], [7300.0, 37.0], [7400.0, 36.0], [7600.0, 44.0], [7500.0, 38.0], [7700.0, 53.0], [7900.0, 60.0], [7800.0, 42.0], [8100.0, 70.0], [8000.0, 55.0], [8200.0, 62.0], [8300.0, 65.0], [8400.0, 47.0], [8500.0, 84.0], [8600.0, 88.0], [8700.0, 95.0], [9000.0, 235.0], [8800.0, 135.0], [8900.0, 177.0], [9100.0, 220.0], [9200.0, 227.0], [9300.0, 240.0], [9400.0, 194.0], [9500.0, 164.0], [9600.0, 195.0], [9700.0, 142.0], [9800.0, 135.0], [9900.0, 146.0], [10000.0, 146.0], [10100.0, 129.0], [10200.0, 115.0], [10300.0, 89.0], [10400.0, 33.0], [10500.0, 8.0], [10600.0, 7.0], [10700.0, 2.0], [10800.0, 7.0], [10900.0, 3.0], [11000.0, 9.0], [11100.0, 19.0], [11200.0, 12.0], [11300.0, 18.0], [11400.0, 22.0], [11500.0, 16.0], [11600.0, 25.0], [11700.0, 19.0], [11800.0, 17.0], [11900.0, 25.0], [12000.0, 25.0], [12100.0, 6.0], [12200.0, 3.0], [12300.0, 3.0], [12600.0, 1.0], [13100.0, 1.0]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 13100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 319.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4956.0, "series": [{"data": [[0.0, 562.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 319.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4956.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 232.11184755592365, "minX": 1.61255454E12, "maxY": 260.0, "series": [{"data": [[1.61255454E12, 260.0], [1.61255466E12, 260.0], [1.6125546E12, 260.0], [1.61255472E12, 260.0], [1.61255478E12, 232.11184755592365]], "isOverall": false, "label": "Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61255478E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 177.0, "minX": 1.0, "maxY": 11277.0, "series": [{"data": [[2.0, 724.0], [3.0, 625.0], [4.0, 695.0], [5.0, 730.0], [6.0, 752.0], [7.0, 763.0], [9.0, 700.5], [10.0, 707.0], [11.0, 740.0], [12.0, 611.0], [13.0, 759.0], [14.0, 624.0], [15.0, 597.0], [16.0, 524.0], [17.0, 379.0], [18.0, 237.0], [19.0, 192.0], [20.0, 185.0], [21.0, 184.0], [22.0, 180.0], [23.0, 212.0], [24.0, 198.0], [25.0, 183.0], [26.0, 182.0], [27.0, 181.0], [28.0, 181.0], [29.0, 181.0], [30.0, 180.0], [31.0, 180.0], [33.0, 179.0], [32.0, 178.0], [35.0, 184.0], [34.0, 178.0], [37.0, 421.0], [36.0, 177.0], [39.0, 200.0], [38.0, 178.0], [41.0, 183.0], [40.0, 183.0], [43.0, 178.0], [42.0, 181.0], [45.0, 191.0], [44.0, 204.0], [47.0, 553.0], [46.0, 199.0], [49.0, 921.0], [48.0, 553.0], [51.0, 1339.0], [50.0, 1083.0], [53.0, 1513.0], [52.0, 1412.0], [55.0, 1710.0], [54.0, 1716.0], [57.0, 1057.0], [56.0, 2462.0], [59.0, 2320.0], [61.0, 2877.0], [60.0, 1831.0], [63.0, 1870.0], [62.0, 2603.0], [67.0, 3072.0], [66.0, 2595.0], [65.0, 3347.0], [64.0, 3315.0], [71.0, 4514.0], [70.0, 3928.0], [69.0, 3882.0], [68.0, 3714.0], [75.0, 5683.0], [74.0, 5802.0], [73.0, 4802.0], [72.0, 4414.0], [79.0, 5781.0], [78.0, 6352.0], [77.0, 6110.0], [76.0, 5639.0], [83.0, 6831.0], [82.0, 6493.0], [81.0, 11030.0], [80.0, 6285.0], [87.0, 6821.0], [86.0, 6795.0], [84.0, 6811.0], [91.0, 6753.0], [90.0, 6576.0], [89.0, 6761.0], [88.0, 6773.0], [95.0, 7199.0], [94.0, 7127.0], [93.0, 6637.0], [92.0, 6736.0], [99.0, 7024.0], [98.0, 7293.0], [97.0, 7148.0], [96.0, 6823.0], [103.0, 7165.5], [101.0, 7313.0], [100.0, 6993.0], [107.0, 7592.0], [106.0, 7779.5], [104.0, 7589.0], [111.0, 7777.0], [110.0, 7853.0], [109.0, 11277.0], [108.0, 7695.0], [115.0, 8060.0], [114.0, 7630.0], [113.0, 7875.0], [112.0, 8014.0], [119.0, 7861.0], [118.0, 7925.0], [117.0, 8001.0], [116.0, 7585.0], [123.0, 8092.0], [122.0, 8550.0], [121.0, 8488.5], [127.0, 8119.0], [126.0, 8550.0], [125.0, 8589.0], [124.0, 8546.0], [135.0, 8719.5], [133.0, 8883.0], [132.0, 8735.0], [131.0, 8484.0], [130.0, 8635.0], [129.0, 8044.0], [128.0, 7965.0], [143.0, 8937.0], [142.0, 8673.0], [141.0, 8859.0], [140.0, 9084.0], [139.0, 9104.0], [138.0, 8851.0], [137.0, 8965.0], [136.0, 8650.0], [151.0, 8805.0], [150.0, 8749.0], [149.0, 8825.0], [148.0, 8928.0], [147.0, 8825.5], [145.0, 8797.0], [144.0, 8803.0], [159.0, 9163.0], [158.0, 8879.0], [157.0, 8723.0], [156.0, 8933.0], [155.0, 8873.0], [154.0, 8802.0], [153.0, 8949.0], [152.0, 8888.0], [167.0, 9165.0], [166.0, 9185.0], [165.0, 8910.0], [164.0, 9004.0], [163.0, 9000.0], [162.0, 9159.0], [161.0, 9170.0], [160.0, 9170.0], [175.0, 9065.0], [174.0, 9213.0], [173.0, 9018.0], [172.0, 9010.0], [171.0, 9025.0], [170.0, 9078.0], [169.0, 9390.0], [168.0, 8994.0], [183.0, 9164.0], [182.0, 9070.0], [181.0, 9229.0], [180.0, 9068.0], [179.0, 9104.0], [178.0, 9200.0], [177.0, 9106.0], [176.0, 9189.0], [191.0, 9319.0], [190.0, 9211.0], [189.0, 9253.0], [188.0, 9049.0], [187.0, 9404.0], [186.0, 9206.0], [185.0, 9039.0], [199.0, 9181.0], [198.0, 9078.0], [197.0, 9019.0], [196.0, 9189.0], [195.0, 9158.0], [194.0, 9205.0], [193.0, 9167.0], [192.0, 9171.0], [207.0, 9232.0], [206.0, 9292.0], [205.0, 9143.0], [204.0, 9370.0], [203.0, 9236.0], [202.0, 9133.0], [201.0, 9002.0], [200.0, 9303.0], [215.0, 9179.0], [214.0, 9042.0], [213.0, 9061.0], [212.0, 9221.0], [211.0, 9228.0], [210.0, 9064.0], [209.0, 9271.0], [208.0, 9333.0], [223.0, 9153.0], [222.0, 9012.0], [221.0, 9114.0], [220.0, 9075.0], [219.0, 9183.0], [218.0, 9128.0], [217.0, 9171.0], [216.0, 9258.0], [231.0, 8947.0], [230.0, 8956.0], [229.0, 8938.0], [228.0, 8939.0], [227.0, 8991.0], [226.0, 9034.0], [225.0, 9073.0], [224.0, 9065.0], [239.0, 9037.0], [238.0, 9010.0], [237.0, 8857.0], [236.0, 8778.0], [235.0, 8977.0], [234.0, 8924.0], [233.0, 8952.0], [232.0, 8942.0], [247.0, 8725.0], [246.0, 8971.0], [245.0, 8747.0], [244.0, 9014.0], [243.0, 8960.0], [242.0, 8938.666666666666], [255.0, 8912.0], [254.0, 8751.0], [253.0, 8682.0], [252.0, 8930.0], [251.0, 8965.0], [250.0, 8966.0], [249.0, 8939.0], [248.0, 8984.0], [260.0, 7242.537923614836], [259.0, 8814.0], [257.0, 8848.0], [256.0, 8819.5], [1.0, 729.0]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[254.23316772314544, 7207.704128833297]], "isOverall": false, "label": "Home-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 260.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2110.3333333333335, "minX": 1.61255454E12, "maxY": 6631.916666666667, "series": [{"data": [[1.61255454E12, 4965.716666666666], [1.61255466E12, 6631.916666666667], [1.6125546E12, 6159.35], [1.61255472E12, 5933.183333333333], [1.61255478E12, 6194.666666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61255454E12, 2110.3333333333335], [1.61255466E12, 2803.6666666666665], [1.6125546E12, 2610.8333333333335], [1.61255472E12, 2506.8333333333335], [1.61255478E12, 2615.1666666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61255478E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6407.798674399342, "minX": 1.61255454E12, "maxY": 8672.528747433269, "series": [{"data": [[1.61255454E12, 8672.528747433269], [1.61255466E12, 6948.756568778977], [1.6125546E12, 7486.412448132781], [1.61255472E12, 6808.379429559211], [1.61255478E12, 6407.798674399342]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61255478E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 198.06828003457255, "minX": 1.61255454E12, "maxY": 532.666324435319, "series": [{"data": [[1.61255454E12, 532.666324435319], [1.61255466E12, 211.65996908809885], [1.6125546E12, 227.4721991701246], [1.61255472E12, 198.06828003457255], [1.61255478E12, 202.05799502899745]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61255478E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.48049792531120267, "minX": 1.61255454E12, "maxY": 14.356262833675554, "series": [{"data": [[1.61255454E12, 14.356262833675554], [1.61255466E12, 0.4938176197836161], [1.6125546E12, 0.48049792531120267], [1.61255472E12, 0.5401901469317206], [1.61255478E12, 0.5642087821043908]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61255478E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 174.0, "minX": 1.61255454E12, "maxY": 13159.0, "series": [{"data": [[1.61255454E12, 12311.0], [1.61255466E12, 12387.0], [1.6125546E12, 12023.0], [1.61255472E12, 12680.0], [1.61255478E12, 13159.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61255454E12, 11688.5], [1.61255466E12, 9579.5], [1.6125546E12, 10164.0], [1.61255472E12, 9367.0], [1.61255478E12, 9322.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61255454E12, 12096.75], [1.61255466E12, 9846.15], [1.6125546E12, 10385.0], [1.61255472E12, 9700.680000000004], [1.61255478E12, 9707.600000000002]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61255454E12, 11947.0], [1.61255466E12, 9693.25], [1.6125546E12, 10261.7], [1.61255472E12, 9484.1], [1.61255478E12, 9480.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61255454E12, 175.0], [1.61255466E12, 174.0], [1.6125546E12, 175.0], [1.61255472E12, 175.0], [1.61255478E12, 176.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61255454E12, 9970.0], [1.61255466E12, 8639.5], [1.6125546E12, 9515.0], [1.61255472E12, 8351.0], [1.61255478E12, 8162.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61255478E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 192.0, "minX": 1.0, "maxY": 11748.0, "series": [{"data": [[2.0, 3410.5], [3.0, 4214.0], [4.0, 4212.5], [5.0, 3135.0], [6.0, 4073.5], [7.0, 5067.5], [8.0, 967.0], [9.0, 2964.5], [10.0, 5498.0], [11.0, 716.5], [12.0, 192.0], [13.0, 3747.0], [14.0, 445.5], [15.0, 466.0], [16.0, 617.5], [17.0, 304.5], [18.0, 4241.0], [19.0, 739.0], [20.0, 1445.0], [21.0, 8481.0], [22.0, 8854.5], [23.0, 7252.0], [26.0, 2615.5], [28.0, 8143.0], [29.0, 8837.0], [30.0, 9130.5], [32.0, 6825.5], [36.0, 9397.5], [37.0, 9124.0], [38.0, 3859.0], [39.0, 7421.5], [40.0, 8713.0], [43.0, 3846.0], [46.0, 5706.0], [49.0, 6887.0], [50.0, 6174.0], [52.0, 9145.0], [54.0, 8667.0], [55.0, 9303.0], [56.0, 9255.0], [57.0, 8404.0], [60.0, 7265.0], [63.0, 9028.0], [65.0, 7041.0], [67.0, 7966.0], [64.0, 9250.0], [71.0, 9946.0], [70.0, 9037.0], [72.0, 9313.0], [75.0, 8833.0], [73.0, 9248.0], [77.0, 8778.0], [80.0, 9508.0], [85.0, 9652.0], [87.0, 9431.0], [86.0, 9433.5], [88.0, 9917.5], [92.0, 9093.5], [103.0, 9539.0], [106.0, 9948.0], [122.0, 9851.0], [126.0, 10151.0], [156.0, 10236.0], [164.0, 11748.0], [1.0, 3036.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 164.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 13.5, "minX": 1.0, "maxY": 2167.0, "series": [{"data": [[2.0, 36.5], [3.0, 42.0], [4.0, 45.0], [5.0, 43.5], [6.0, 46.0], [7.0, 54.5], [8.0, 29.5], [9.0, 42.5], [10.0, 53.5], [11.0, 23.0], [12.0, 13.5], [13.0, 48.5], [14.0, 27.0], [15.0, 30.5], [16.0, 30.0], [17.0, 19.0], [18.0, 54.5], [19.0, 31.0], [20.0, 56.0], [21.0, 107.5], [22.0, 150.5], [23.0, 112.0], [26.0, 312.0], [28.0, 126.0], [29.0, 154.0], [30.0, 222.0], [32.0, 216.5], [36.0, 185.5], [37.0, 203.0], [38.0, 328.0], [39.0, 204.5], [40.0, 130.0], [43.0, 333.0], [46.0, 368.5], [49.0, 264.0], [50.0, 370.0], [52.0, 218.5], [54.0, 208.5], [55.0, 204.0], [56.0, 189.0], [57.0, 334.0], [60.0, 356.5], [63.0, 212.0], [65.0, 373.0], [67.0, 359.0], [64.0, 236.0], [71.0, 354.0], [70.0, 291.5], [72.0, 361.5], [75.0, 327.0], [73.0, 289.0], [77.0, 342.0], [80.0, 256.0], [85.0, 294.0], [87.0, 354.0], [86.0, 278.0], [88.0, 332.5], [92.0, 331.0], [103.0, 343.5], [106.0, 203.0], [122.0, 345.5], [126.0, 250.5], [156.0, 397.0], [164.0, 2167.0], [1.0, 20.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 164.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4.333333333333333, "minX": 1.61255448E12, "maxY": 20.666666666666668, "series": [{"data": [[1.61255454E12, 15.1], [1.61255448E12, 4.333333333333333], [1.61255466E12, 18.766666666666666], [1.6125546E12, 20.666666666666668], [1.61255472E12, 20.466666666666665], [1.61255478E12, 17.95]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61255478E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.233333333333334, "minX": 1.61255454E12, "maxY": 21.566666666666666, "series": [{"data": [[1.61255454E12, 16.233333333333334], [1.61255466E12, 21.566666666666666], [1.6125546E12, 20.083333333333332], [1.61255472E12, 19.283333333333335], [1.61255478E12, 20.116666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61255478E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.233333333333334, "minX": 1.61255454E12, "maxY": 21.566666666666666, "series": [{"data": [[1.61255454E12, 16.233333333333334], [1.61255466E12, 21.566666666666666], [1.6125546E12, 20.083333333333332], [1.61255472E12, 19.283333333333335], [1.61255478E12, 20.116666666666667]], "isOverall": false, "label": "Home-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61255478E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.233333333333334, "minX": 1.61255454E12, "maxY": 21.566666666666666, "series": [{"data": [[1.61255454E12, 16.233333333333334], [1.61255466E12, 21.566666666666666], [1.6125546E12, 20.083333333333332], [1.61255472E12, 19.283333333333335], [1.61255478E12, 20.116666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61255478E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

