/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6043.0, "minX": 0.0, "maxY": 37591.0, "series": [{"data": [[0.0, 6043.0], [0.1, 6255.0], [0.2, 6397.0], [0.3, 6567.0], [0.4, 6659.0], [0.5, 6823.0], [0.6, 7044.0], [0.7, 7613.0], [0.8, 7704.0], [0.9, 7802.0], [1.0, 8302.0], [1.1, 11117.0], [1.2, 11657.0], [1.3, 11995.0], [1.4, 12050.0], [1.5, 12178.0], [1.6, 12402.0], [1.7, 12553.0], [1.8, 12694.0], [1.9, 12774.0], [2.0, 12854.0], [2.1, 12911.0], [2.2, 12948.0], [2.3, 12977.0], [2.4, 13037.0], [2.5, 13119.0], [2.6, 13172.0], [2.7, 13244.0], [2.8, 13301.0], [2.9, 13396.0], [3.0, 13496.0], [3.1, 13728.0], [3.2, 13889.0], [3.3, 14005.0], [3.4, 14071.0], [3.5, 14117.0], [3.6, 14182.0], [3.7, 14219.0], [3.8, 14256.0], [3.9, 14278.0], [4.0, 14321.0], [4.1, 14354.0], [4.2, 14382.0], [4.3, 14400.0], [4.4, 14414.0], [4.5, 14451.0], [4.6, 14487.0], [4.7, 14526.0], [4.8, 14548.0], [4.9, 14574.0], [5.0, 14591.0], [5.1, 14607.0], [5.2, 14617.0], [5.3, 14654.0], [5.4, 14672.0], [5.5, 14687.0], [5.6, 14701.0], [5.7, 14717.0], [5.8, 14740.0], [5.9, 14761.0], [6.0, 14774.0], [6.1, 14789.0], [6.2, 14798.0], [6.3, 14816.0], [6.4, 14841.0], [6.5, 14858.0], [6.6, 14865.0], [6.7, 14888.0], [6.8, 14900.0], [6.9, 14908.0], [7.0, 14913.0], [7.1, 14928.0], [7.2, 14936.0], [7.3, 14944.0], [7.4, 14961.0], [7.5, 14968.0], [7.6, 14970.0], [7.7, 14979.0], [7.8, 14996.0], [7.9, 15004.0], [8.0, 15011.0], [8.1, 15023.0], [8.2, 15040.0], [8.3, 15046.0], [8.4, 15052.0], [8.5, 15064.0], [8.6, 15070.0], [8.7, 15078.0], [8.8, 15085.0], [8.9, 15091.0], [9.0, 15096.0], [9.1, 15104.0], [9.2, 15109.0], [9.3, 15118.0], [9.4, 15124.0], [9.5, 15133.0], [9.6, 15136.0], [9.7, 15148.0], [9.8, 15154.0], [9.9, 15162.0], [10.0, 15168.0], [10.1, 15172.0], [10.2, 15175.0], [10.3, 15180.0], [10.4, 15184.0], [10.5, 15192.0], [10.6, 15194.0], [10.7, 15200.0], [10.8, 15203.0], [10.9, 15210.0], [11.0, 15217.0], [11.1, 15221.0], [11.2, 15231.0], [11.3, 15237.0], [11.4, 15244.0], [11.5, 15248.0], [11.6, 15253.0], [11.7, 15258.0], [11.8, 15260.0], [11.9, 15265.0], [12.0, 15270.0], [12.1, 15276.0], [12.2, 15282.0], [12.3, 15288.0], [12.4, 15294.0], [12.5, 15295.0], [12.6, 15300.0], [12.7, 15304.0], [12.8, 15312.0], [12.9, 15317.0], [13.0, 15322.0], [13.1, 15327.0], [13.2, 15331.0], [13.3, 15336.0], [13.4, 15339.0], [13.5, 15342.0], [13.6, 15345.0], [13.7, 15350.0], [13.8, 15351.0], [13.9, 15354.0], [14.0, 15359.0], [14.1, 15363.0], [14.2, 15367.0], [14.3, 15371.0], [14.4, 15374.0], [14.5, 15378.0], [14.6, 15382.0], [14.7, 15384.0], [14.8, 15387.0], [14.9, 15393.0], [15.0, 15395.0], [15.1, 15399.0], [15.2, 15402.0], [15.3, 15407.0], [15.4, 15410.0], [15.5, 15412.0], [15.6, 15416.0], [15.7, 15418.0], [15.8, 15424.0], [15.9, 15429.0], [16.0, 15434.0], [16.1, 15438.0], [16.2, 15443.0], [16.3, 15445.0], [16.4, 15448.0], [16.5, 15449.0], [16.6, 15452.0], [16.7, 15454.0], [16.8, 15457.0], [16.9, 15459.0], [17.0, 15460.0], [17.1, 15465.0], [17.2, 15468.0], [17.3, 15470.0], [17.4, 15471.0], [17.5, 15473.0], [17.6, 15476.0], [17.7, 15480.0], [17.8, 15483.0], [17.9, 15485.0], [18.0, 15487.0], [18.1, 15490.0], [18.2, 15491.0], [18.3, 15493.0], [18.4, 15496.0], [18.5, 15498.0], [18.6, 15500.0], [18.7, 15502.0], [18.8, 15505.0], [18.9, 15508.0], [19.0, 15511.0], [19.1, 15515.0], [19.2, 15518.0], [19.3, 15520.0], [19.4, 15524.0], [19.5, 15525.0], [19.6, 15529.0], [19.7, 15533.0], [19.8, 15533.0], [19.9, 15535.0], [20.0, 15538.0], [20.1, 15542.0], [20.2, 15543.0], [20.3, 15545.0], [20.4, 15548.0], [20.5, 15550.0], [20.6, 15552.0], [20.7, 15556.0], [20.8, 15558.0], [20.9, 15560.0], [21.0, 15562.0], [21.1, 15564.0], [21.2, 15565.0], [21.3, 15567.0], [21.4, 15571.0], [21.5, 15573.0], [21.6, 15577.0], [21.7, 15580.0], [21.8, 15584.0], [21.9, 15588.0], [22.0, 15591.0], [22.1, 15593.0], [22.2, 15597.0], [22.3, 15601.0], [22.4, 15603.0], [22.5, 15606.0], [22.6, 15608.0], [22.7, 15609.0], [22.8, 15612.0], [22.9, 15615.0], [23.0, 15619.0], [23.1, 15621.0], [23.2, 15624.0], [23.3, 15626.0], [23.4, 15626.0], [23.5, 15628.0], [23.6, 15633.0], [23.7, 15635.0], [23.8, 15636.0], [23.9, 15638.0], [24.0, 15639.0], [24.1, 15642.0], [24.2, 15646.0], [24.3, 15648.0], [24.4, 15651.0], [24.5, 15653.0], [24.6, 15655.0], [24.7, 15658.0], [24.8, 15659.0], [24.9, 15662.0], [25.0, 15664.0], [25.1, 15666.0], [25.2, 15668.0], [25.3, 15671.0], [25.4, 15671.0], [25.5, 15675.0], [25.6, 15677.0], [25.7, 15679.0], [25.8, 15680.0], [25.9, 15682.0], [26.0, 15684.0], [26.1, 15684.0], [26.2, 15686.0], [26.3, 15688.0], [26.4, 15690.0], [26.5, 15693.0], [26.6, 15694.0], [26.7, 15696.0], [26.8, 15698.0], [26.9, 15699.0], [27.0, 15701.0], [27.1, 15702.0], [27.2, 15705.0], [27.3, 15707.0], [27.4, 15708.0], [27.5, 15709.0], [27.6, 15711.0], [27.7, 15714.0], [27.8, 15717.0], [27.9, 15719.0], [28.0, 15724.0], [28.1, 15727.0], [28.2, 15731.0], [28.3, 15735.0], [28.4, 15737.0], [28.5, 15739.0], [28.6, 15743.0], [28.7, 15745.0], [28.8, 15746.0], [28.9, 15748.0], [29.0, 15750.0], [29.1, 15753.0], [29.2, 15755.0], [29.3, 15757.0], [29.4, 15760.0], [29.5, 15763.0], [29.6, 15766.0], [29.7, 15771.0], [29.8, 15773.0], [29.9, 15777.0], [30.0, 15779.0], [30.1, 15782.0], [30.2, 15784.0], [30.3, 15787.0], [30.4, 15791.0], [30.5, 15793.0], [30.6, 15795.0], [30.7, 15799.0], [30.8, 15800.0], [30.9, 15802.0], [31.0, 15804.0], [31.1, 15807.0], [31.2, 15810.0], [31.3, 15812.0], [31.4, 15814.0], [31.5, 15815.0], [31.6, 15817.0], [31.7, 15819.0], [31.8, 15823.0], [31.9, 15824.0], [32.0, 15829.0], [32.1, 15832.0], [32.2, 15834.0], [32.3, 15837.0], [32.4, 15840.0], [32.5, 15841.0], [32.6, 15845.0], [32.7, 15847.0], [32.8, 15850.0], [32.9, 15851.0], [33.0, 15854.0], [33.1, 15856.0], [33.2, 15858.0], [33.3, 15860.0], [33.4, 15861.0], [33.5, 15864.0], [33.6, 15868.0], [33.7, 15872.0], [33.8, 15873.0], [33.9, 15876.0], [34.0, 15878.0], [34.1, 15882.0], [34.2, 15884.0], [34.3, 15886.0], [34.4, 15888.0], [34.5, 15891.0], [34.6, 15892.0], [34.7, 15895.0], [34.8, 15898.0], [34.9, 15901.0], [35.0, 15903.0], [35.1, 15906.0], [35.2, 15909.0], [35.3, 15910.0], [35.4, 15912.0], [35.5, 15914.0], [35.6, 15916.0], [35.7, 15919.0], [35.8, 15921.0], [35.9, 15922.0], [36.0, 15925.0], [36.1, 15925.0], [36.2, 15927.0], [36.3, 15930.0], [36.4, 15934.0], [36.5, 15936.0], [36.6, 15939.0], [36.7, 15942.0], [36.8, 15945.0], [36.9, 15948.0], [37.0, 15950.0], [37.1, 15952.0], [37.2, 15955.0], [37.3, 15958.0], [37.4, 15961.0], [37.5, 15966.0], [37.6, 15968.0], [37.7, 15971.0], [37.8, 15976.0], [37.9, 15979.0], [38.0, 15981.0], [38.1, 15983.0], [38.2, 15985.0], [38.3, 15989.0], [38.4, 15992.0], [38.5, 15994.0], [38.6, 15998.0], [38.7, 16003.0], [38.8, 16006.0], [38.9, 16009.0], [39.0, 16011.0], [39.1, 16016.0], [39.2, 16021.0], [39.3, 16027.0], [39.4, 16030.0], [39.5, 16035.0], [39.6, 16038.0], [39.7, 16042.0], [39.8, 16045.0], [39.9, 16052.0], [40.0, 16056.0], [40.1, 16061.0], [40.2, 16065.0], [40.3, 16069.0], [40.4, 16074.0], [40.5, 16076.0], [40.6, 16081.0], [40.7, 16083.0], [40.8, 16085.0], [40.9, 16087.0], [41.0, 16092.0], [41.1, 16094.0], [41.2, 16097.0], [41.3, 16103.0], [41.4, 16107.0], [41.5, 16112.0], [41.6, 16116.0], [41.7, 16122.0], [41.8, 16128.0], [41.9, 16131.0], [42.0, 16135.0], [42.1, 16137.0], [42.2, 16140.0], [42.3, 16142.0], [42.4, 16148.0], [42.5, 16150.0], [42.6, 16156.0], [42.7, 16160.0], [42.8, 16162.0], [42.9, 16167.0], [43.0, 16172.0], [43.1, 16178.0], [43.2, 16183.0], [43.3, 16188.0], [43.4, 16191.0], [43.5, 16195.0], [43.6, 16200.0], [43.7, 16204.0], [43.8, 16211.0], [43.9, 16215.0], [44.0, 16220.0], [44.1, 16222.0], [44.2, 16228.0], [44.3, 16233.0], [44.4, 16235.0], [44.5, 16240.0], [44.6, 16242.0], [44.7, 16246.0], [44.8, 16255.0], [44.9, 16259.0], [45.0, 16262.0], [45.1, 16269.0], [45.2, 16273.0], [45.3, 16276.0], [45.4, 16281.0], [45.5, 16284.0], [45.6, 16288.0], [45.7, 16293.0], [45.8, 16298.0], [45.9, 16302.0], [46.0, 16308.0], [46.1, 16312.0], [46.2, 16317.0], [46.3, 16320.0], [46.4, 16326.0], [46.5, 16328.0], [46.6, 16332.0], [46.7, 16336.0], [46.8, 16337.0], [46.9, 16342.0], [47.0, 16346.0], [47.1, 16348.0], [47.2, 16356.0], [47.3, 16364.0], [47.4, 16368.0], [47.5, 16372.0], [47.6, 16379.0], [47.7, 16381.0], [47.8, 16383.0], [47.9, 16389.0], [48.0, 16392.0], [48.1, 16398.0], [48.2, 16403.0], [48.3, 16406.0], [48.4, 16409.0], [48.5, 16414.0], [48.6, 16419.0], [48.7, 16423.0], [48.8, 16428.0], [48.9, 16435.0], [49.0, 16438.0], [49.1, 16444.0], [49.2, 16449.0], [49.3, 16459.0], [49.4, 16464.0], [49.5, 16471.0], [49.6, 16474.0], [49.7, 16477.0], [49.8, 16481.0], [49.9, 16486.0], [50.0, 16488.0], [50.1, 16490.0], [50.2, 16495.0], [50.3, 16497.0], [50.4, 16502.0], [50.5, 16508.0], [50.6, 16511.0], [50.7, 16516.0], [50.8, 16523.0], [50.9, 16534.0], [51.0, 16539.0], [51.1, 16546.0], [51.2, 16553.0], [51.3, 16558.0], [51.4, 16562.0], [51.5, 16566.0], [51.6, 16572.0], [51.7, 16576.0], [51.8, 16583.0], [51.9, 16591.0], [52.0, 16596.0], [52.1, 16599.0], [52.2, 16604.0], [52.3, 16610.0], [52.4, 16614.0], [52.5, 16618.0], [52.6, 16624.0], [52.7, 16633.0], [52.8, 16640.0], [52.9, 16645.0], [53.0, 16649.0], [53.1, 16658.0], [53.2, 16661.0], [53.3, 16670.0], [53.4, 16674.0], [53.5, 16677.0], [53.6, 16682.0], [53.7, 16686.0], [53.8, 16689.0], [53.9, 16694.0], [54.0, 16697.0], [54.1, 16702.0], [54.2, 16707.0], [54.3, 16715.0], [54.4, 16718.0], [54.5, 16721.0], [54.6, 16725.0], [54.7, 16730.0], [54.8, 16733.0], [54.9, 16737.0], [55.0, 16742.0], [55.1, 16750.0], [55.2, 16757.0], [55.3, 16766.0], [55.4, 16771.0], [55.5, 16773.0], [55.6, 16777.0], [55.7, 16783.0], [55.8, 16790.0], [55.9, 16795.0], [56.0, 16801.0], [56.1, 16805.0], [56.2, 16810.0], [56.3, 16814.0], [56.4, 16821.0], [56.5, 16827.0], [56.6, 16831.0], [56.7, 16837.0], [56.8, 16841.0], [56.9, 16847.0], [57.0, 16849.0], [57.1, 16857.0], [57.2, 16859.0], [57.3, 16863.0], [57.4, 16867.0], [57.5, 16875.0], [57.6, 16881.0], [57.7, 16884.0], [57.8, 16889.0], [57.9, 16895.0], [58.0, 16907.0], [58.1, 16913.0], [58.2, 16918.0], [58.3, 16920.0], [58.4, 16930.0], [58.5, 16942.0], [58.6, 16951.0], [58.7, 16961.0], [58.8, 16970.0], [58.9, 16976.0], [59.0, 16982.0], [59.1, 16987.0], [59.2, 16995.0], [59.3, 17005.0], [59.4, 17014.0], [59.5, 17023.0], [59.6, 17028.0], [59.7, 17032.0], [59.8, 17039.0], [59.9, 17046.0], [60.0, 17049.0], [60.1, 17058.0], [60.2, 17061.0], [60.3, 17067.0], [60.4, 17076.0], [60.5, 17082.0], [60.6, 17092.0], [60.7, 17097.0], [60.8, 17106.0], [60.9, 17117.0], [61.0, 17125.0], [61.1, 17130.0], [61.2, 17140.0], [61.3, 17151.0], [61.4, 17156.0], [61.5, 17162.0], [61.6, 17167.0], [61.7, 17173.0], [61.8, 17181.0], [61.9, 17188.0], [62.0, 17195.0], [62.1, 17206.0], [62.2, 17211.0], [62.3, 17222.0], [62.4, 17226.0], [62.5, 17234.0], [62.6, 17239.0], [62.7, 17246.0], [62.8, 17252.0], [62.9, 17257.0], [63.0, 17265.0], [63.1, 17269.0], [63.2, 17280.0], [63.3, 17284.0], [63.4, 17289.0], [63.5, 17294.0], [63.6, 17300.0], [63.7, 17304.0], [63.8, 17306.0], [63.9, 17316.0], [64.0, 17325.0], [64.1, 17332.0], [64.2, 17341.0], [64.3, 17344.0], [64.4, 17354.0], [64.5, 17356.0], [64.6, 17364.0], [64.7, 17372.0], [64.8, 17381.0], [64.9, 17389.0], [65.0, 17394.0], [65.1, 17402.0], [65.2, 17407.0], [65.3, 17412.0], [65.4, 17422.0], [65.5, 17427.0], [65.6, 17438.0], [65.7, 17449.0], [65.8, 17463.0], [65.9, 17466.0], [66.0, 17477.0], [66.1, 17485.0], [66.2, 17498.0], [66.3, 17506.0], [66.4, 17521.0], [66.5, 17526.0], [66.6, 17537.0], [66.7, 17544.0], [66.8, 17554.0], [66.9, 17564.0], [67.0, 17571.0], [67.1, 17585.0], [67.2, 17597.0], [67.3, 17613.0], [67.4, 17627.0], [67.5, 17635.0], [67.6, 17647.0], [67.7, 17659.0], [67.8, 17669.0], [67.9, 17674.0], [68.0, 17677.0], [68.1, 17684.0], [68.2, 17690.0], [68.3, 17700.0], [68.4, 17719.0], [68.5, 17724.0], [68.6, 17736.0], [68.7, 17757.0], [68.8, 17765.0], [68.9, 17772.0], [69.0, 17780.0], [69.1, 17791.0], [69.2, 17794.0], [69.3, 17800.0], [69.4, 17818.0], [69.5, 17827.0], [69.6, 17842.0], [69.7, 17860.0], [69.8, 17872.0], [69.9, 17883.0], [70.0, 17895.0], [70.1, 17909.0], [70.2, 17920.0], [70.3, 17931.0], [70.4, 17940.0], [70.5, 17950.0], [70.6, 17957.0], [70.7, 17964.0], [70.8, 17976.0], [70.9, 17984.0], [71.0, 17990.0], [71.1, 17998.0], [71.2, 18002.0], [71.3, 18008.0], [71.4, 18018.0], [71.5, 18026.0], [71.6, 18029.0], [71.7, 18038.0], [71.8, 18042.0], [71.9, 18055.0], [72.0, 18065.0], [72.1, 18073.0], [72.2, 18083.0], [72.3, 18091.0], [72.4, 18102.0], [72.5, 18110.0], [72.6, 18115.0], [72.7, 18125.0], [72.8, 18136.0], [72.9, 18145.0], [73.0, 18150.0], [73.1, 18159.0], [73.2, 18166.0], [73.3, 18178.0], [73.4, 18190.0], [73.5, 18198.0], [73.6, 18203.0], [73.7, 18211.0], [73.8, 18217.0], [73.9, 18220.0], [74.0, 18228.0], [74.1, 18233.0], [74.2, 18239.0], [74.3, 18243.0], [74.4, 18248.0], [74.5, 18253.0], [74.6, 18256.0], [74.7, 18266.0], [74.8, 18278.0], [74.9, 18282.0], [75.0, 18294.0], [75.1, 18302.0], [75.2, 18308.0], [75.3, 18313.0], [75.4, 18326.0], [75.5, 18329.0], [75.6, 18335.0], [75.7, 18343.0], [75.8, 18346.0], [75.9, 18350.0], [76.0, 18353.0], [76.1, 18357.0], [76.2, 18360.0], [76.3, 18365.0], [76.4, 18371.0], [76.5, 18380.0], [76.6, 18388.0], [76.7, 18394.0], [76.8, 18404.0], [76.9, 18414.0], [77.0, 18424.0], [77.1, 18438.0], [77.2, 18443.0], [77.3, 18450.0], [77.4, 18463.0], [77.5, 18467.0], [77.6, 18478.0], [77.7, 18488.0], [77.8, 18497.0], [77.9, 18512.0], [78.0, 18518.0], [78.1, 18535.0], [78.2, 18539.0], [78.3, 18554.0], [78.4, 18564.0], [78.5, 18580.0], [78.6, 18590.0], [78.7, 18598.0], [78.8, 18609.0], [78.9, 18620.0], [79.0, 18629.0], [79.1, 18643.0], [79.2, 18649.0], [79.3, 18655.0], [79.4, 18664.0], [79.5, 18673.0], [79.6, 18693.0], [79.7, 18700.0], [79.8, 18718.0], [79.9, 18739.0], [80.0, 18746.0], [80.1, 18761.0], [80.2, 18774.0], [80.3, 18787.0], [80.4, 18800.0], [80.5, 18820.0], [80.6, 18834.0], [80.7, 18840.0], [80.8, 18864.0], [80.9, 18876.0], [81.0, 18882.0], [81.1, 18896.0], [81.2, 18904.0], [81.3, 18912.0], [81.4, 18925.0], [81.5, 18944.0], [81.6, 18958.0], [81.7, 18979.0], [81.8, 19003.0], [81.9, 19027.0], [82.0, 19039.0], [82.1, 19057.0], [82.2, 19064.0], [82.3, 19083.0], [82.4, 19108.0], [82.5, 19121.0], [82.6, 19143.0], [82.7, 19156.0], [82.8, 19171.0], [82.9, 19187.0], [83.0, 19196.0], [83.1, 19210.0], [83.2, 19228.0], [83.3, 19243.0], [83.4, 19258.0], [83.5, 19284.0], [83.6, 19306.0], [83.7, 19333.0], [83.8, 19356.0], [83.9, 19383.0], [84.0, 19410.0], [84.1, 19429.0], [84.2, 19447.0], [84.3, 19459.0], [84.4, 19478.0], [84.5, 19492.0], [84.6, 19532.0], [84.7, 19549.0], [84.8, 19586.0], [84.9, 19602.0], [85.0, 19620.0], [85.1, 19637.0], [85.2, 19659.0], [85.3, 19675.0], [85.4, 19694.0], [85.5, 19704.0], [85.6, 19718.0], [85.7, 19734.0], [85.8, 19748.0], [85.9, 19759.0], [86.0, 19775.0], [86.1, 19787.0], [86.2, 19802.0], [86.3, 19821.0], [86.4, 19840.0], [86.5, 19851.0], [86.6, 19864.0], [86.7, 19874.0], [86.8, 19885.0], [86.9, 19913.0], [87.0, 19923.0], [87.1, 19933.0], [87.2, 19948.0], [87.3, 19960.0], [87.4, 19969.0], [87.5, 19993.0], [87.6, 20000.0], [87.7, 20019.0], [87.8, 20029.0], [87.9, 20041.0], [88.0, 20049.0], [88.1, 20058.0], [88.2, 20080.0], [88.3, 20095.0], [88.4, 20108.0], [88.5, 20127.0], [88.6, 20141.0], [88.7, 20152.0], [88.8, 20178.0], [88.9, 20188.0], [89.0, 20206.0], [89.1, 20224.0], [89.2, 20240.0], [89.3, 20266.0], [89.4, 20298.0], [89.5, 20311.0], [89.6, 20322.0], [89.7, 20345.0], [89.8, 20368.0], [89.9, 20380.0], [90.0, 20407.0], [90.1, 20422.0], [90.2, 20445.0], [90.3, 20458.0], [90.4, 20478.0], [90.5, 20505.0], [90.6, 20532.0], [90.7, 20556.0], [90.8, 20577.0], [90.9, 20609.0], [91.0, 20647.0], [91.1, 20692.0], [91.2, 20722.0], [91.3, 20772.0], [91.4, 20788.0], [91.5, 20833.0], [91.6, 20853.0], [91.7, 20877.0], [91.8, 20892.0], [91.9, 20917.0], [92.0, 20931.0], [92.1, 20960.0], [92.2, 20977.0], [92.3, 21008.0], [92.4, 21042.0], [92.5, 21074.0], [92.6, 21095.0], [92.7, 21104.0], [92.8, 21123.0], [92.9, 21153.0], [93.0, 21186.0], [93.1, 21201.0], [93.2, 21221.0], [93.3, 21240.0], [93.4, 21263.0], [93.5, 21291.0], [93.6, 21350.0], [93.7, 21379.0], [93.8, 21390.0], [93.9, 21426.0], [94.0, 21464.0], [94.1, 21511.0], [94.2, 21531.0], [94.3, 21546.0], [94.4, 21599.0], [94.5, 21622.0], [94.6, 21633.0], [94.7, 21651.0], [94.8, 21691.0], [94.9, 21713.0], [95.0, 21765.0], [95.1, 21794.0], [95.2, 21813.0], [95.3, 21840.0], [95.4, 21882.0], [95.5, 21920.0], [95.6, 21942.0], [95.7, 21975.0], [95.8, 22001.0], [95.9, 22091.0], [96.0, 22156.0], [96.1, 22209.0], [96.2, 22239.0], [96.3, 22251.0], [96.4, 22338.0], [96.5, 22455.0], [96.6, 22478.0], [96.7, 22511.0], [96.8, 22596.0], [96.9, 22672.0], [97.0, 22742.0], [97.1, 22795.0], [97.2, 22854.0], [97.3, 22987.0], [97.4, 23092.0], [97.5, 23307.0], [97.6, 23418.0], [97.7, 23587.0], [97.8, 23756.0], [97.9, 23879.0], [98.0, 24184.0], [98.1, 24922.0], [98.2, 25204.0], [98.3, 25711.0], [98.4, 26122.0], [98.5, 26526.0], [98.6, 26730.0], [98.7, 27082.0], [98.8, 27347.0], [98.9, 27526.0], [99.0, 27590.0], [99.1, 27702.0], [99.2, 27768.0], [99.3, 27843.0], [99.4, 27950.0], [99.5, 28166.0], [99.6, 28365.0], [99.7, 28767.0], [99.8, 31279.0], [99.9, 34229.0]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 6000.0, "maxY": 301.0, "series": [{"data": [[34100.0, 1.0], [32900.0, 1.0], [33700.0, 1.0], [34500.0, 1.0], [34900.0, 1.0], [6100.0, 4.0], [6000.0, 2.0], [6300.0, 5.0], [6200.0, 2.0], [6600.0, 6.0], [6500.0, 6.0], [6400.0, 2.0], [6900.0, 1.0], [6700.0, 5.0], [6800.0, 3.0], [7000.0, 5.0], [7100.0, 1.0], [7300.0, 1.0], [7400.0, 1.0], [7200.0, 1.0], [7600.0, 6.0], [7800.0, 5.0], [7700.0, 7.0], [8000.0, 1.0], [8700.0, 1.0], [8300.0, 1.0], [9400.0, 1.0], [9900.0, 1.0], [10700.0, 2.0], [11100.0, 2.0], [11000.0, 1.0], [11300.0, 1.0], [11600.0, 2.0], [11400.0, 1.0], [11500.0, 2.0], [11800.0, 4.0], [12000.0, 8.0], [12100.0, 5.0], [11900.0, 3.0], [12200.0, 2.0], [12500.0, 5.0], [12700.0, 8.0], [12600.0, 5.0], [12400.0, 4.0], [12300.0, 2.0], [13100.0, 13.0], [13200.0, 9.0], [12900.0, 18.0], [13000.0, 6.0], [13300.0, 7.0], [12800.0, 10.0], [13400.0, 7.0], [13700.0, 4.0], [13800.0, 5.0], [13600.0, 3.0], [13500.0, 1.0], [14000.0, 13.0], [14100.0, 11.0], [14300.0, 22.0], [13900.0, 4.0], [14200.0, 20.0], [14400.0, 22.0], [14500.0, 29.0], [14600.0, 32.0], [14700.0, 41.0], [14800.0, 38.0], [14900.0, 68.0], [15200.0, 122.0], [15300.0, 164.0], [15000.0, 77.0], [15100.0, 108.0], [15400.0, 225.0], [15600.0, 301.0], [15700.0, 248.0], [15800.0, 265.0], [15500.0, 239.0], [15900.0, 245.0], [16000.0, 170.0], [16100.0, 152.0], [16200.0, 145.0], [16300.0, 151.0], [17200.0, 101.0], [16400.0, 143.0], [16600.0, 126.0], [16800.0, 128.0], [17000.0, 94.0], [17400.0, 75.0], [18200.0, 99.0], [17600.0, 68.0], [17800.0, 49.0], [18000.0, 81.0], [18400.0, 71.0], [18600.0, 64.0], [19400.0, 34.0], [18800.0, 50.0], [19000.0, 38.0], [19200.0, 38.0], [19600.0, 39.0], [19800.0, 47.0], [20000.0, 47.0], [20200.0, 30.0], [20400.0, 31.0], [21400.0, 15.0], [20600.0, 19.0], [20800.0, 27.0], [21000.0, 23.0], [21200.0, 29.0], [22400.0, 11.0], [21600.0, 29.0], [21800.0, 22.0], [22000.0, 8.0], [22200.0, 18.0], [22600.0, 8.0], [22800.0, 10.0], [23000.0, 5.0], [23200.0, 2.0], [23400.0, 3.0], [24000.0, 3.0], [23600.0, 3.0], [23800.0, 3.0], [24600.0, 3.0], [25000.0, 3.0], [25200.0, 4.0], [25400.0, 1.0], [25800.0, 1.0], [26000.0, 2.0], [26200.0, 2.0], [26600.0, 3.0], [27000.0, 1.0], [27600.0, 5.0], [27400.0, 1.0], [27800.0, 8.0], [28000.0, 1.0], [28200.0, 3.0], [28400.0, 2.0], [28600.0, 1.0], [29400.0, 1.0], [31200.0, 1.0], [34400.0, 1.0], [36000.0, 1.0], [36300.0, 1.0], [37500.0, 1.0], [16500.0, 113.0], [16700.0, 123.0], [16900.0, 86.0], [17100.0, 86.0], [17300.0, 96.0], [17500.0, 64.0], [17700.0, 66.0], [17900.0, 70.0], [18100.0, 76.0], [18300.0, 107.0], [18500.0, 57.0], [18700.0, 46.0], [18900.0, 38.0], [19300.0, 26.0], [19100.0, 43.0], [20300.0, 37.0], [19500.0, 23.0], [19900.0, 45.0], [20100.0, 41.0], [19700.0, 45.0], [20500.0, 25.0], [20900.0, 30.0], [21100.0, 28.0], [21300.0, 21.0], [20700.0, 17.0], [21500.0, 22.0], [21700.0, 17.0], [22300.0, 7.0], [21900.0, 21.0], [22100.0, 11.0], [22500.0, 11.0], [23300.0, 6.0], [22700.0, 13.0], [22900.0, 3.0], [23100.0, 4.0], [23500.0, 4.0], [23700.0, 8.0], [23900.0, 2.0], [24100.0, 1.0], [25100.0, 2.0], [25300.0, 1.0], [24700.0, 2.0], [24900.0, 2.0], [25700.0, 2.0], [25900.0, 1.0], [26100.0, 4.0], [26500.0, 4.0], [26700.0, 4.0], [26900.0, 3.0], [27100.0, 2.0], [27300.0, 7.0], [27500.0, 10.0], [27700.0, 10.0], [27900.0, 4.0], [28100.0, 4.0], [28300.0, 5.0], [28700.0, 2.0], [28900.0, 1.0], [29500.0, 1.0], [30500.0, 1.0], [29900.0, 1.0], [30700.0, 1.0], [31300.0, 1.0], [31900.0, 1.0], [34200.0, 1.0]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 37500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 6479.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6479.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6479.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 387.22965641952936, "minX": 1.61263128E12, "maxY": 500.0, "series": [{"data": [[1.61263152E12, 500.0], [1.61263158E12, 387.22965641952936], [1.6126314E12, 500.0], [1.61263146E12, 500.0], [1.61263128E12, 500.0], [1.61263134E12, 500.0]], "isOverall": false, "label": "Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61263158E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6043.0, "minX": 1.0, "maxY": 23976.0, "series": [{"data": [[2.0, 6255.0], [3.0, 6257.0], [4.0, 6407.0], [5.0, 6160.0], [6.0, 6116.0], [7.0, 6197.0], [9.0, 6308.0], [10.0, 6411.5], [11.0, 6503.0], [12.0, 6611.0], [14.0, 6311.5], [15.0, 6043.0], [16.0, 6043.0], [17.0, 6507.0], [18.0, 6659.0], [20.0, 6486.0], [21.0, 6652.0], [22.0, 6386.0], [23.0, 6520.0], [24.0, 6607.0], [26.0, 6558.0], [27.0, 6679.0], [28.0, 6839.0], [29.0, 6594.0], [30.0, 7140.0], [31.0, 6656.0], [33.0, 6707.0], [32.0, 6876.0], [35.0, 6791.0], [34.0, 6709.0], [37.0, 6679.0], [36.0, 6782.0], [38.0, 7036.0], [41.0, 7023.0], [40.0, 7099.5], [43.0, 7083.0], [42.0, 7044.0], [45.0, 7405.0], [44.0, 7086.0], [47.0, 7616.0], [46.0, 7346.0], [49.0, 7715.0], [48.0, 7730.0], [51.0, 7731.0], [50.0, 7802.0], [53.0, 7704.0], [52.0, 7722.0], [55.0, 7672.0], [54.0, 7693.0], [57.0, 7691.0], [56.0, 7613.0], [59.0, 7641.0], [58.0, 7848.0], [61.0, 12585.0], [60.0, 7835.0], [63.0, 7754.0], [62.0, 7835.0], [67.0, 8037.0], [66.0, 23976.0], [65.0, 7839.0], [64.0, 7732.0], [71.0, 9943.0], [70.0, 11523.0], [69.0, 9417.0], [68.0, 8733.0], [75.0, 12487.0], [74.0, 11894.0], [73.0, 12063.0], [72.0, 12308.0], [79.0, 12516.0], [77.0, 12225.0], [76.0, 12421.0], [83.0, 12412.0], [82.0, 12073.0], [81.0, 12107.0], [80.0, 12340.0], [87.0, 12212.0], [86.0, 12691.0], [85.0, 11858.0], [84.0, 12402.0], [91.0, 12927.0], [90.0, 12532.0], [89.0, 13027.0], [88.0, 13039.0], [95.0, 12554.333333333334], [92.0, 13254.0], [99.0, 18001.0], [98.0, 12065.0], [97.0, 11995.0], [96.0, 11923.0], [103.0, 11940.5], [101.0, 13116.0], [100.0, 12863.0], [107.0, 15402.0], [106.0, 13093.0], [105.0, 13244.0], [104.0, 16738.0], [111.0, 15409.0], [110.0, 15545.0], [109.0, 14173.0], [115.0, 15458.0], [114.0, 14199.5], [112.0, 12034.0], [119.0, 12888.0], [118.0, 13526.0], [117.0, 13174.0], [116.0, 12772.0], [122.0, 15382.0], [121.0, 15535.0], [120.0, 13020.0], [127.0, 12018.0], [125.0, 16369.0], [124.0, 13725.5], [135.0, 19227.0], [134.0, 17981.0], [133.0, 16585.0], [132.0, 15453.5], [130.0, 14179.5], [128.0, 16246.5], [143.0, 16794.5], [141.0, 15294.0], [140.0, 17860.0], [139.0, 19208.0], [138.0, 17846.0], [137.0, 19246.0], [136.0, 15470.0], [151.0, 15328.0], [150.0, 19168.0], [149.0, 15363.0], [148.0, 13262.0], [147.0, 12936.0], [146.0, 18253.0], [145.0, 19207.0], [144.0, 15374.0], [158.0, 15128.0], [157.0, 17700.0], [156.0, 17834.0], [155.0, 16732.0], [154.0, 16982.0], [153.0, 16303.0], [152.0, 15175.0], [167.0, 19028.0], [166.0, 19007.0], [165.0, 19027.0], [164.0, 15042.0], [163.0, 19068.0], [162.0, 17823.0], [161.0, 18150.0], [160.0, 15093.0], [175.0, 18160.0], [174.0, 18146.0], [173.0, 18091.0], [172.0, 18110.0], [171.0, 18201.0], [170.0, 18192.0], [169.0, 18113.0], [168.0, 18404.0], [183.0, 18124.0], [182.0, 17948.0], [181.0, 18195.0], [180.0, 17999.0], [179.0, 18225.0], [178.0, 18234.0], [177.0, 18115.0], [176.0, 18015.0], [191.0, 17931.0], [190.0, 18125.0], [189.0, 17913.0], [188.0, 17913.0], [187.0, 18095.0], [186.0, 18029.0], [185.0, 18075.0], [184.0, 18233.0], [199.0, 18266.0], [198.0, 18218.0], [197.0, 21530.0], [196.0, 20343.0], [195.0, 18311.0], [194.0, 18235.0], [193.0, 18112.0], [192.0, 18096.0], [207.0, 18121.0], [205.0, 18761.0], [204.0, 18350.0], [203.0, 17978.0], [202.0, 18231.0], [201.0, 18293.0], [200.0, 17998.0], [215.0, 18350.0], [214.0, 17932.0], [213.0, 17884.0], [212.0, 19874.0], [211.0, 20913.0], [210.0, 18217.0], [209.0, 21379.0], [208.0, 20808.0], [223.0, 18711.0], [221.0, 18733.0], [220.0, 18764.0], [218.0, 18620.0], [217.0, 21107.0], [216.0, 20705.0], [231.0, 18636.0], [230.0, 18633.0], [229.0, 18695.0], [228.0, 18583.0], [227.0, 18579.0], [226.0, 18773.0], [225.0, 18739.0], [224.0, 18673.0], [239.0, 18044.0], [238.0, 18535.0], [237.0, 23712.0], [236.0, 18341.0], [235.0, 18379.0], [234.0, 18407.0], [233.0, 18467.0], [232.0, 18497.0], [247.0, 18348.0], [246.0, 18145.0], [245.0, 17992.0], [244.0, 18108.0], [243.0, 18414.0], [242.0, 18157.0], [241.0, 18001.0], [240.0, 18109.0], [255.0, 18370.0], [254.0, 18013.0], [253.0, 18155.5], [251.0, 18333.0], [250.0, 17988.0], [249.0, 18008.0], [248.0, 18235.0], [270.0, 18047.0], [271.0, 17994.0], [269.0, 18165.0], [268.0, 18204.0], [267.0, 18078.5], [266.0, 18120.0], [264.0, 18088.0], [263.0, 18274.0], [257.0, 18393.0], [256.0, 17797.0], [259.0, 18358.0], [258.0, 18426.0], [262.0, 18289.0], [261.0, 17835.0], [260.0, 18273.0], [286.0, 17957.0], [287.0, 16983.0], [285.0, 17942.0], [284.0, 18026.0], [283.0, 18003.0], [282.0, 18224.0], [281.0, 18033.0], [280.0, 18159.0], [279.0, 18085.0], [273.0, 17908.0], [272.0, 17923.0], [275.0, 18040.0], [274.0, 18167.0], [278.0, 18163.0], [277.0, 18004.0], [276.0, 18000.0], [302.0, 16600.0], [303.0, 16566.0], [301.0, 16595.0], [300.0, 16653.0], [299.0, 16666.0], [298.0, 16569.0], [297.0, 16570.0], [296.0, 16745.0], [295.0, 16647.0], [289.0, 16880.0], [288.0, 16900.0], [291.0, 16694.0], [290.0, 16902.0], [294.0, 16614.0], [293.0, 16704.0], [292.0, 16598.0], [317.0, 16507.0], [318.0, 16382.0], [316.0, 16387.0], [307.0, 16434.0], [306.0, 16572.0], [305.0, 16602.0], [304.0, 16614.0], [315.0, 16516.0], [314.0, 16350.0], [313.0, 16398.0], [312.0, 16472.0], [311.0, 16413.0], [310.0, 16546.0], [309.0, 16367.0], [308.0, 16435.0], [334.0, 16514.0], [335.0, 16143.0], [333.0, 16240.0], [332.0, 16256.0], [331.0, 16294.0], [330.0, 16473.0], [329.0, 16489.0], [328.0, 16477.0], [327.0, 16498.0], [321.0, 16369.0], [320.0, 16428.5], [323.0, 16319.0], [322.0, 16451.0], [326.0, 16325.0], [325.0, 16343.0], [324.0, 16346.0], [350.0, 16127.0], [351.0, 16416.0], [349.0, 16184.0], [348.0, 16699.0], [347.0, 16809.0], [346.0, 16863.0], [345.0, 16541.0], [344.0, 16328.0], [343.0, 16983.0], [337.0, 16347.0], [336.0, 16326.0], [339.0, 16434.0], [338.0, 16372.0], [342.0, 16368.0], [341.0, 16336.0], [340.0, 16801.0], [366.0, 16307.0], [367.0, 16882.0], [365.0, 16188.0], [364.0, 16382.0], [363.0, 16435.0], [362.0, 16821.0], [361.0, 16495.0], [360.0, 16224.0], [359.0, 16191.0], [353.0, 16274.0], [352.0, 16423.0], [355.0, 16422.0], [354.0, 16234.0], [358.0, 16864.0], [357.0, 16601.0], [356.0, 16740.0], [381.0, 17134.0], [383.0, 16600.5], [380.0, 16436.0], [371.0, 16602.0], [370.0, 16093.0], [369.0, 17186.0], [368.0, 16273.0], [379.0, 17156.0], [378.0, 16364.0], [377.0, 17049.0], [376.0, 17063.0], [375.0, 16206.0], [374.0, 16832.0], [373.0, 16259.0], [372.0, 16475.0], [398.0, 15998.0], [399.0, 16809.0], [397.0, 16194.0], [396.0, 16723.0], [395.0, 16041.0], [394.0, 16021.0], [393.0, 16258.0], [392.0, 16958.0], [391.0, 16801.0], [385.0, 16858.0], [384.0, 16342.0], [387.0, 16919.0], [386.0, 16252.0], [390.0, 16276.0], [389.0, 16722.0], [388.0, 16241.0], [414.0, 16393.0], [415.0, 16380.0], [413.0, 16389.0], [412.0, 16182.0], [411.0, 16617.0], [410.0, 16550.0], [409.0, 16004.0], [408.0, 16385.0], [407.0, 16704.0], [401.0, 15954.0], [400.0, 16016.0], [403.0, 15994.0], [402.0, 16495.0], [406.0, 16488.0], [405.0, 16496.0], [404.0, 16083.0], [430.0, 15976.0], [431.0, 15977.0], [429.0, 15915.0], [428.0, 16162.0], [427.0, 16403.0], [425.0, 16386.0], [424.0, 16210.0], [423.0, 16203.0], [417.0, 16001.0], [416.0, 16095.0], [419.0, 15925.0], [418.0, 16334.0], [422.0, 16288.0], [421.0, 16238.0], [420.0, 16221.0], [446.0, 15949.0], [447.0, 16167.0], [445.0, 15966.0], [444.0, 16081.0], [443.0, 16337.0], [442.0, 16232.0], [441.0, 15954.0], [440.0, 15921.0], [439.0, 15882.5], [433.0, 16082.0], [432.0, 15953.0], [435.0, 16399.0], [434.0, 15945.0], [437.0, 16112.0], [436.0, 16114.0], [462.0, 15680.0], [463.0, 15696.0], [461.0, 18441.0], [460.0, 18718.0], [459.0, 18294.0], [458.0, 16015.0], [457.0, 15929.0], [456.0, 16477.0], [455.0, 16172.0], [449.0, 18259.0], [448.0, 17882.0], [451.0, 17823.0], [450.0, 18248.0], [454.0, 18328.0], [453.0, 18267.0], [452.0, 18231.0], [478.0, 18315.0], [479.0, 18027.0], [477.0, 19856.0], [476.0, 18282.0], [475.0, 18133.0], [474.0, 18095.0], [473.0, 17704.0], [472.0, 17998.0], [471.0, 18654.0], [465.0, 18564.0], [464.0, 16139.0], [467.0, 15802.0], [466.0, 18313.0], [470.0, 16950.0], [468.0, 18254.0], [494.0, 18063.0], [495.0, 18657.0], [493.0, 15861.0], [492.0, 15708.0], [491.0, 15623.0], [490.0, 19803.0], [489.0, 18673.0], [488.0, 15582.0], [487.0, 18001.0], [480.0, 18530.0], [483.0, 15668.0], [482.0, 16944.5], [486.0, 15619.0], [485.0, 18836.0], [484.0, 17700.0], [500.0, 17310.750753264198], [499.0, 18795.4], [498.0, 17073.666666666668], [497.0, 17425.0], [496.0, 16037.0], [1.0, 8302.0]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[480.7494983793794, 17165.665380460025]], "isOverall": false, "label": "Home-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 58.5, "minX": 1.61263128E12, "maxY": 7153.1, "series": [{"data": [[1.61263152E12, 6860.516666666666], [1.61263158E12, 5690.116666666667], [1.6126314E12, 6614.25], [1.61263146E12, 6836.6], [1.61263128E12, 139.18333333333334], [1.61263134E12, 7153.1]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61263152E12, 2888.1666666666665], [1.61263158E12, 2396.3333333333335], [1.6126314E12, 2784.1666666666665], [1.61263146E12, 2879.5], [1.61263128E12, 58.5], [1.61263134E12, 3031.1666666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61263158E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 14285.62962962963, "minX": 1.61263128E12, "maxY": 17906.213009292365, "series": [{"data": [[1.61263152E12, 17009.290322580673], [1.61263158E12, 16603.15551537072], [1.6126314E12, 17011.133852140058], [1.61263146E12, 17219.007524454446], [1.61263128E12, 14285.62962962963], [1.61263134E12, 17906.213009292365]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61263158E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 124.44444444444444, "minX": 1.61263128E12, "maxY": 4234.050035739813, "series": [{"data": [[1.61263152E12, 3323.0022505626393], [1.61263158E12, 3489.5650994575076], [1.6126314E12, 3151.7143968871624], [1.61263146E12, 3372.2249811888655], [1.61263128E12, 124.44444444444444], [1.61263134E12, 4234.050035739813]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61263158E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.6292947558770342, "minX": 1.61263128E12, "maxY": 11.481481481481483, "series": [{"data": [[1.61263152E12, 0.6496624156039014], [1.61263158E12, 0.6292947558770342], [1.6126314E12, 0.6762645914396878], [1.61263146E12, 0.6674191121143722], [1.61263128E12, 11.481481481481483], [1.61263134E12, 6.7097927090779175]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61263158E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6043.0, "minX": 1.61263128E12, "maxY": 37591.0, "series": [{"data": [[1.61263152E12, 34986.0], [1.61263158E12, 31941.0], [1.6126314E12, 37591.0], [1.61263146E12, 36056.0], [1.61263128E12, 14900.0], [1.61263134E12, 34101.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61263152E12, 19269.2], [1.61263158E12, 19651.9], [1.6126314E12, 20320.4], [1.61263146E12, 20668.0], [1.61263128E12, 14853.2], [1.61263134E12, 21651.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61263152E12, 23891.54], [1.61263158E12, 22501.710000000003], [1.6126314E12, 23321.520000000008], [1.61263146E12, 22782.000000000004], [1.61263128E12, 14900.0], [1.61263134E12, 28211.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61263152E12, 21148.8], [1.61263158E12, 21101.6], [1.6126314E12, 21141.600000000002], [1.61263146E12, 21810.5], [1.61263128E12, 14897.6], [1.61263134E12, 26744.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61263152E12, 14672.0], [1.61263158E12, 6043.0], [1.6126314E12, 12725.0], [1.61263146E12, 12545.0], [1.61263128E12, 13413.0], [1.61263134E12, 10705.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61263152E12, 16188.0], [1.61263158E12, 16496.5], [1.6126314E12, 16518.0], [1.61263146E12, 16459.0], [1.61263128E12, 14313.0], [1.61263134E12, 16886.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61263158E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 15141.5, "minX": 1.0, "maxY": 27673.0, "series": [{"data": [[2.0, 18353.5], [3.0, 19398.0], [4.0, 17486.0], [5.0, 17989.0], [6.0, 20213.5], [7.0, 18058.0], [8.0, 16430.0], [9.0, 17460.0], [10.0, 18713.5], [11.0, 18740.0], [12.0, 17943.0], [13.0, 19140.0], [14.0, 18329.5], [15.0, 18227.0], [16.0, 17218.0], [17.0, 26637.0], [18.0, 18484.0], [19.0, 16868.5], [20.0, 17602.0], [21.0, 19333.0], [22.0, 17440.5], [23.0, 18612.0], [24.0, 16830.0], [25.0, 16825.0], [26.0, 15605.0], [27.0, 16396.5], [28.0, 16097.0], [29.0, 16402.0], [30.0, 16598.0], [31.0, 15366.0], [33.0, 17092.0], [32.0, 16747.0], [34.0, 18216.0], [35.0, 18125.0], [36.0, 18296.5], [37.0, 17341.0], [39.0, 17784.0], [38.0, 18069.0], [41.0, 20018.0], [40.0, 16117.5], [43.0, 16236.0], [44.0, 15485.0], [47.0, 27673.0], [46.0, 15937.5], [49.0, 15785.5], [50.0, 16076.0], [51.0, 16191.0], [53.0, 19782.0], [52.0, 17214.0], [54.0, 16665.5], [57.0, 18350.0], [58.0, 16086.0], [59.0, 15355.0], [61.0, 17418.5], [60.0, 15141.5], [62.0, 16114.5], [66.0, 15705.0], [70.0, 15350.0], [71.0, 15193.0], [69.0, 18675.0], [68.0, 16716.0], [74.0, 15852.5], [72.0, 15568.5], [75.0, 16422.0], [76.0, 15890.5], [78.0, 15628.0], [77.0, 16288.0], [80.0, 17134.5], [84.0, 15918.0], [90.0, 15632.5], [93.0, 15932.0], [95.0, 15624.0], [98.0, 16481.5], [101.0, 15443.0], [121.0, 17650.0], [1.0, 18431.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 121.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 334.5, "minX": 1.0, "maxY": 18924.0, "series": [{"data": [[2.0, 5074.0], [3.0, 6657.0], [4.0, 6436.5], [5.0, 5959.0], [6.0, 9548.0], [7.0, 6170.0], [8.0, 2286.0], [9.0, 2986.5], [10.0, 8672.0], [11.0, 7603.5], [12.0, 5610.0], [13.0, 8253.0], [14.0, 8237.0], [15.0, 5761.0], [16.0, 4767.0], [17.0, 18744.0], [18.0, 6107.5], [19.0, 4746.5], [20.0, 3626.0], [21.0, 6346.0], [22.0, 4835.0], [23.0, 5621.0], [24.0, 3555.5], [25.0, 4942.0], [26.0, 420.0], [27.0, 5496.5], [28.0, 2803.0], [29.0, 1192.5], [30.0, 2222.0], [31.0, 1976.0], [33.0, 2571.0], [32.0, 2996.5], [34.0, 7558.5], [35.0, 6713.0], [36.0, 5634.0], [37.0, 3058.0], [39.0, 2566.5], [38.0, 2684.0], [41.0, 6935.0], [40.0, 1746.0], [43.0, 1526.0], [44.0, 334.5], [47.0, 18924.0], [46.0, 609.5], [49.0, 1282.5], [50.0, 980.5], [51.0, 2534.0], [53.0, 5909.0], [52.0, 3715.5], [54.0, 1780.0], [57.0, 4184.5], [58.0, 765.5], [59.0, 594.0], [61.0, 4881.5], [60.0, 655.5], [62.0, 1321.0], [66.0, 829.5], [70.0, 569.0], [71.0, 571.0], [69.0, 6364.0], [68.0, 2568.0], [74.0, 562.5], [72.0, 710.0], [75.0, 683.0], [76.0, 719.5], [78.0, 740.0], [77.0, 695.0], [80.0, 1710.0], [84.0, 667.5], [90.0, 453.5], [93.0, 717.0], [95.0, 916.0], [98.0, 3937.0], [101.0, 770.0], [121.0, 4467.0], [1.0, 4534.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 121.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.61263128E12, "maxY": 22.333333333333332, "series": [{"data": [[1.61263152E12, 22.333333333333332], [1.61263158E12, 11.033333333333333], [1.6126314E12, 21.916666666666668], [1.61263146E12, 22.283333333333335], [1.61263128E12, 8.333333333333334], [1.61263134E12, 22.083333333333332]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61263158E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.45, "minX": 1.61263128E12, "maxY": 23.316666666666666, "series": [{"data": [[1.61263152E12, 22.216666666666665], [1.61263158E12, 18.433333333333334], [1.6126314E12, 21.416666666666668], [1.61263146E12, 22.15], [1.61263128E12, 0.45], [1.61263134E12, 23.316666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61263158E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.45, "minX": 1.61263128E12, "maxY": 23.316666666666666, "series": [{"data": [[1.61263152E12, 22.216666666666665], [1.61263158E12, 18.433333333333334], [1.6126314E12, 21.416666666666668], [1.61263146E12, 22.15], [1.61263128E12, 0.45], [1.61263134E12, 23.316666666666666]], "isOverall": false, "label": "Home-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61263158E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.45, "minX": 1.61263128E12, "maxY": 23.316666666666666, "series": [{"data": [[1.61263152E12, 22.216666666666665], [1.61263158E12, 18.433333333333334], [1.6126314E12, 21.416666666666668], [1.61263146E12, 22.15], [1.61263128E12, 0.45], [1.61263134E12, 23.316666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61263158E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

