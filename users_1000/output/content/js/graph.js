/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 12312.0, "minX": 0.0, "maxY": 131211.0, "series": [{"data": [[0.0, 12312.0], [0.1, 12909.0], [0.2, 13200.0], [0.3, 13521.0], [0.4, 13715.0], [0.5, 13996.0], [0.6, 14072.0], [0.7, 14309.0], [0.8, 14372.0], [0.9, 14543.0], [1.0, 14615.0], [1.1, 14665.0], [1.2, 14722.0], [1.3, 14756.0], [1.4, 14809.0], [1.5, 14843.0], [1.6, 14877.0], [1.7, 14903.0], [1.8, 14927.0], [1.9, 14999.0], [2.0, 15049.0], [2.1, 15067.0], [2.2, 15093.0], [2.3, 15127.0], [2.4, 15183.0], [2.5, 15199.0], [2.6, 15221.0], [2.7, 15248.0], [2.8, 15260.0], [2.9, 15275.0], [3.0, 15282.0], [3.1, 15294.0], [3.2, 15311.0], [3.3, 15324.0], [3.4, 15340.0], [3.5, 15357.0], [3.6, 15372.0], [3.7, 15388.0], [3.8, 15402.0], [3.9, 15417.0], [4.0, 15434.0], [4.1, 15445.0], [4.2, 15454.0], [4.3, 15467.0], [4.4, 15481.0], [4.5, 15486.0], [4.6, 15494.0], [4.7, 15507.0], [4.8, 15523.0], [4.9, 15531.0], [5.0, 15547.0], [5.1, 15557.0], [5.2, 15564.0], [5.3, 15574.0], [5.4, 15599.0], [5.5, 15615.0], [5.6, 15645.0], [5.7, 15674.0], [5.8, 15686.0], [5.9, 15711.0], [6.0, 15738.0], [6.1, 15770.0], [6.2, 15789.0], [6.3, 15820.0], [6.4, 15858.0], [6.5, 15876.0], [6.6, 15897.0], [6.7, 15933.0], [6.8, 15949.0], [6.9, 15969.0], [7.0, 15988.0], [7.1, 16009.0], [7.2, 16035.0], [7.3, 16047.0], [7.4, 16056.0], [7.5, 16076.0], [7.6, 16092.0], [7.7, 16106.0], [7.8, 16120.0], [7.9, 16150.0], [8.0, 16193.0], [8.1, 16208.0], [8.2, 16225.0], [8.3, 16237.0], [8.4, 16250.0], [8.5, 16258.0], [8.6, 16269.0], [8.7, 16282.0], [8.8, 16296.0], [8.9, 16311.0], [9.0, 16326.0], [9.1, 16346.0], [9.2, 16359.0], [9.3, 16376.0], [9.4, 16391.0], [9.5, 16402.0], [9.6, 16414.0], [9.7, 16425.0], [9.8, 16442.0], [9.9, 16464.0], [10.0, 16487.0], [10.1, 16513.0], [10.2, 16532.0], [10.3, 16556.0], [10.4, 16604.0], [10.5, 16636.0], [10.6, 16660.0], [10.7, 16679.0], [10.8, 16702.0], [10.9, 16726.0], [11.0, 16738.0], [11.1, 16768.0], [11.2, 16781.0], [11.3, 16791.0], [11.4, 16806.0], [11.5, 16824.0], [11.6, 16831.0], [11.7, 16841.0], [11.8, 16856.0], [11.9, 16867.0], [12.0, 16878.0], [12.1, 16890.0], [12.2, 16907.0], [12.3, 16916.0], [12.4, 16927.0], [12.5, 16944.0], [12.6, 16956.0], [12.7, 16971.0], [12.8, 16990.0], [12.9, 17016.0], [13.0, 17025.0], [13.1, 17039.0], [13.2, 17056.0], [13.3, 17078.0], [13.4, 17090.0], [13.5, 17102.0], [13.6, 17115.0], [13.7, 17130.0], [13.8, 17148.0], [13.9, 17165.0], [14.0, 17176.0], [14.1, 17188.0], [14.2, 17198.0], [14.3, 17207.0], [14.4, 17219.0], [14.5, 17235.0], [14.6, 17241.0], [14.7, 17249.0], [14.8, 17267.0], [14.9, 17273.0], [15.0, 17289.0], [15.1, 17306.0], [15.2, 17316.0], [15.3, 17329.0], [15.4, 17348.0], [15.5, 17365.0], [15.6, 17374.0], [15.7, 17392.0], [15.8, 17406.0], [15.9, 17417.0], [16.0, 17440.0], [16.1, 17458.0], [16.2, 17470.0], [16.3, 17484.0], [16.4, 17502.0], [16.5, 17527.0], [16.6, 17576.0], [16.7, 17595.0], [16.8, 17604.0], [16.9, 17628.0], [17.0, 17658.0], [17.1, 17686.0], [17.2, 17698.0], [17.3, 17711.0], [17.4, 17725.0], [17.5, 17734.0], [17.6, 17745.0], [17.7, 17760.0], [17.8, 17770.0], [17.9, 17780.0], [18.0, 17790.0], [18.1, 17799.0], [18.2, 17824.0], [18.3, 17835.0], [18.4, 17845.0], [18.5, 17854.0], [18.6, 17865.0], [18.7, 17885.0], [18.8, 17895.0], [18.9, 17905.0], [19.0, 17937.0], [19.1, 17947.0], [19.2, 17967.0], [19.3, 17981.0], [19.4, 17986.0], [19.5, 17995.0], [19.6, 18008.0], [19.7, 18021.0], [19.8, 18041.0], [19.9, 18054.0], [20.0, 18065.0], [20.1, 18087.0], [20.2, 18105.0], [20.3, 18114.0], [20.4, 18128.0], [20.5, 18150.0], [20.6, 18166.0], [20.7, 18184.0], [20.8, 18213.0], [20.9, 18247.0], [21.0, 18263.0], [21.1, 18285.0], [21.2, 18301.0], [21.3, 18313.0], [21.4, 18326.0], [21.5, 18338.0], [21.6, 18368.0], [21.7, 18375.0], [21.8, 18390.0], [21.9, 18407.0], [22.0, 18423.0], [22.1, 18444.0], [22.2, 18460.0], [22.3, 18477.0], [22.4, 18491.0], [22.5, 18502.0], [22.6, 18512.0], [22.7, 18526.0], [22.8, 18539.0], [22.9, 18555.0], [23.0, 18582.0], [23.1, 18590.0], [23.2, 18600.0], [23.3, 18610.0], [23.4, 18631.0], [23.5, 18654.0], [23.6, 18668.0], [23.7, 18674.0], [23.8, 18686.0], [23.9, 18699.0], [24.0, 18713.0], [24.1, 18723.0], [24.2, 18730.0], [24.3, 18742.0], [24.4, 18752.0], [24.5, 18762.0], [24.6, 18775.0], [24.7, 18786.0], [24.8, 18792.0], [24.9, 18799.0], [25.0, 18816.0], [25.1, 18826.0], [25.2, 18837.0], [25.3, 18844.0], [25.4, 18853.0], [25.5, 18866.0], [25.6, 18892.0], [25.7, 18908.0], [25.8, 18925.0], [25.9, 18939.0], [26.0, 18953.0], [26.1, 18975.0], [26.2, 18984.0], [26.3, 18998.0], [26.4, 19012.0], [26.5, 19033.0], [26.6, 19048.0], [26.7, 19069.0], [26.8, 19081.0], [26.9, 19094.0], [27.0, 19110.0], [27.1, 19126.0], [27.2, 19138.0], [27.3, 19142.0], [27.4, 19161.0], [27.5, 19171.0], [27.6, 19193.0], [27.7, 19205.0], [27.8, 19217.0], [27.9, 19237.0], [28.0, 19248.0], [28.1, 19257.0], [28.2, 19269.0], [28.3, 19281.0], [28.4, 19292.0], [28.5, 19309.0], [28.6, 19324.0], [28.7, 19334.0], [28.8, 19357.0], [28.9, 19366.0], [29.0, 19378.0], [29.1, 19388.0], [29.2, 19395.0], [29.3, 19401.0], [29.4, 19414.0], [29.5, 19426.0], [29.6, 19438.0], [29.7, 19457.0], [29.8, 19469.0], [29.9, 19481.0], [30.0, 19493.0], [30.1, 19509.0], [30.2, 19527.0], [30.3, 19546.0], [30.4, 19555.0], [30.5, 19572.0], [30.6, 19576.0], [30.7, 19593.0], [30.8, 19601.0], [30.9, 19618.0], [31.0, 19629.0], [31.1, 19654.0], [31.2, 19677.0], [31.3, 19692.0], [31.4, 19713.0], [31.5, 19747.0], [31.6, 19757.0], [31.7, 19773.0], [31.8, 19788.0], [31.9, 19793.0], [32.0, 19805.0], [32.1, 19818.0], [32.2, 19824.0], [32.3, 19839.0], [32.4, 19861.0], [32.5, 19895.0], [32.6, 19908.0], [32.7, 19920.0], [32.8, 19939.0], [32.9, 19954.0], [33.0, 19978.0], [33.1, 19990.0], [33.2, 20003.0], [33.3, 20018.0], [33.4, 20036.0], [33.5, 20046.0], [33.6, 20053.0], [33.7, 20070.0], [33.8, 20084.0], [33.9, 20101.0], [34.0, 20113.0], [34.1, 20132.0], [34.2, 20144.0], [34.3, 20149.0], [34.4, 20159.0], [34.5, 20172.0], [34.6, 20185.0], [34.7, 20191.0], [34.8, 20199.0], [34.9, 20209.0], [35.0, 20213.0], [35.1, 20219.0], [35.2, 20229.0], [35.3, 20238.0], [35.4, 20249.0], [35.5, 20259.0], [35.6, 20267.0], [35.7, 20273.0], [35.8, 20283.0], [35.9, 20294.0], [36.0, 20303.0], [36.1, 20316.0], [36.2, 20329.0], [36.3, 20336.0], [36.4, 20344.0], [36.5, 20359.0], [36.6, 20367.0], [36.7, 20373.0], [36.8, 20380.0], [36.9, 20395.0], [37.0, 20414.0], [37.1, 20424.0], [37.2, 20446.0], [37.3, 20454.0], [37.4, 20468.0], [37.5, 20481.0], [37.6, 20498.0], [37.7, 20504.0], [37.8, 20523.0], [37.9, 20549.0], [38.0, 20570.0], [38.1, 20586.0], [38.2, 20611.0], [38.3, 20641.0], [38.4, 20653.0], [38.5, 20673.0], [38.6, 20689.0], [38.7, 20720.0], [38.8, 20751.0], [38.9, 20771.0], [39.0, 20777.0], [39.1, 20805.0], [39.2, 20830.0], [39.3, 20849.0], [39.4, 20865.0], [39.5, 20881.0], [39.6, 20895.0], [39.7, 20921.0], [39.8, 20932.0], [39.9, 20957.0], [40.0, 20972.0], [40.1, 20980.0], [40.2, 21014.0], [40.3, 21038.0], [40.4, 21051.0], [40.5, 21079.0], [40.6, 21113.0], [40.7, 21126.0], [40.8, 21142.0], [40.9, 21159.0], [41.0, 21175.0], [41.1, 21187.0], [41.2, 21203.0], [41.3, 21214.0], [41.4, 21231.0], [41.5, 21249.0], [41.6, 21273.0], [41.7, 21298.0], [41.8, 21312.0], [41.9, 21330.0], [42.0, 21353.0], [42.1, 21371.0], [42.2, 21386.0], [42.3, 21399.0], [42.4, 21414.0], [42.5, 21437.0], [42.6, 21459.0], [42.7, 21475.0], [42.8, 21490.0], [42.9, 21511.0], [43.0, 21545.0], [43.1, 21571.0], [43.2, 21587.0], [43.3, 21632.0], [43.4, 21645.0], [43.5, 21653.0], [43.6, 21667.0], [43.7, 21685.0], [43.8, 21707.0], [43.9, 21726.0], [44.0, 21745.0], [44.1, 21762.0], [44.2, 21775.0], [44.3, 21791.0], [44.4, 21813.0], [44.5, 21824.0], [44.6, 21834.0], [44.7, 21850.0], [44.8, 21869.0], [44.9, 21892.0], [45.0, 21905.0], [45.1, 21919.0], [45.2, 21946.0], [45.3, 21983.0], [45.4, 22010.0], [45.5, 22023.0], [45.6, 22051.0], [45.7, 22102.0], [45.8, 22128.0], [45.9, 22174.0], [46.0, 22192.0], [46.1, 22226.0], [46.2, 22244.0], [46.3, 22286.0], [46.4, 22312.0], [46.5, 22322.0], [46.6, 22343.0], [46.7, 22359.0], [46.8, 22375.0], [46.9, 22394.0], [47.0, 22412.0], [47.1, 22422.0], [47.2, 22433.0], [47.3, 22446.0], [47.4, 22460.0], [47.5, 22472.0], [47.6, 22497.0], [47.7, 22517.0], [47.8, 22530.0], [47.9, 22552.0], [48.0, 22564.0], [48.1, 22581.0], [48.2, 22592.0], [48.3, 22616.0], [48.4, 22640.0], [48.5, 22647.0], [48.6, 22673.0], [48.7, 22709.0], [48.8, 22735.0], [48.9, 22750.0], [49.0, 22758.0], [49.1, 22786.0], [49.2, 22816.0], [49.3, 22830.0], [49.4, 22850.0], [49.5, 22867.0], [49.6, 22890.0], [49.7, 22902.0], [49.8, 22935.0], [49.9, 22955.0], [50.0, 22979.0], [50.1, 22997.0], [50.2, 23013.0], [50.3, 23031.0], [50.4, 23052.0], [50.5, 23067.0], [50.6, 23092.0], [50.7, 23109.0], [50.8, 23126.0], [50.9, 23151.0], [51.0, 23189.0], [51.1, 23203.0], [51.2, 23215.0], [51.3, 23226.0], [51.4, 23250.0], [51.5, 23281.0], [51.6, 23293.0], [51.7, 23305.0], [51.8, 23322.0], [51.9, 23338.0], [52.0, 23357.0], [52.1, 23371.0], [52.2, 23395.0], [52.3, 23419.0], [52.4, 23429.0], [52.5, 23447.0], [52.6, 23453.0], [52.7, 23473.0], [52.8, 23496.0], [52.9, 23515.0], [53.0, 23538.0], [53.1, 23560.0], [53.2, 23581.0], [53.3, 23616.0], [53.4, 23640.0], [53.5, 23666.0], [53.6, 23701.0], [53.7, 23717.0], [53.8, 23740.0], [53.9, 23762.0], [54.0, 23780.0], [54.1, 23794.0], [54.2, 23814.0], [54.3, 23824.0], [54.4, 23838.0], [54.5, 23864.0], [54.6, 23877.0], [54.7, 23908.0], [54.8, 23924.0], [54.9, 23943.0], [55.0, 23962.0], [55.1, 23981.0], [55.2, 24006.0], [55.3, 24025.0], [55.4, 24051.0], [55.5, 24065.0], [55.6, 24077.0], [55.7, 24092.0], [55.8, 24107.0], [55.9, 24126.0], [56.0, 24137.0], [56.1, 24156.0], [56.2, 24168.0], [56.3, 24185.0], [56.4, 24203.0], [56.5, 24225.0], [56.6, 24245.0], [56.7, 24276.0], [56.8, 24308.0], [56.9, 24326.0], [57.0, 24343.0], [57.1, 24377.0], [57.2, 24412.0], [57.3, 24437.0], [57.4, 24449.0], [57.5, 24469.0], [57.6, 24497.0], [57.7, 24512.0], [57.8, 24545.0], [57.9, 24569.0], [58.0, 24628.0], [58.1, 24654.0], [58.2, 24738.0], [58.3, 24767.0], [58.4, 24818.0], [58.5, 24849.0], [58.6, 24897.0], [58.7, 24933.0], [58.8, 24963.0], [58.9, 25002.0], [59.0, 25017.0], [59.1, 25047.0], [59.2, 25061.0], [59.3, 25087.0], [59.4, 25104.0], [59.5, 25123.0], [59.6, 25136.0], [59.7, 25158.0], [59.8, 25176.0], [59.9, 25214.0], [60.0, 25234.0], [60.1, 25259.0], [60.2, 25276.0], [60.3, 25293.0], [60.4, 25309.0], [60.5, 25327.0], [60.6, 25361.0], [60.7, 25372.0], [60.8, 25389.0], [60.9, 25422.0], [61.0, 25446.0], [61.1, 25464.0], [61.2, 25497.0], [61.3, 25535.0], [61.4, 25568.0], [61.5, 25601.0], [61.6, 25620.0], [61.7, 25637.0], [61.8, 25670.0], [61.9, 25691.0], [62.0, 25709.0], [62.1, 25739.0], [62.2, 25760.0], [62.3, 25770.0], [62.4, 25781.0], [62.5, 25796.0], [62.6, 25812.0], [62.7, 25832.0], [62.8, 25852.0], [62.9, 25871.0], [63.0, 25895.0], [63.1, 25917.0], [63.2, 25947.0], [63.3, 25960.0], [63.4, 25974.0], [63.5, 25996.0], [63.6, 26032.0], [63.7, 26060.0], [63.8, 26074.0], [63.9, 26096.0], [64.0, 26172.0], [64.1, 26252.0], [64.2, 26268.0], [64.3, 26300.0], [64.4, 26320.0], [64.5, 26352.0], [64.6, 26386.0], [64.7, 26421.0], [64.8, 26445.0], [64.9, 26470.0], [65.0, 26523.0], [65.1, 26544.0], [65.2, 26590.0], [65.3, 26625.0], [65.4, 26655.0], [65.5, 26664.0], [65.6, 26713.0], [65.7, 26744.0], [65.8, 26778.0], [65.9, 26814.0], [66.0, 26842.0], [66.1, 26871.0], [66.2, 26894.0], [66.3, 26929.0], [66.4, 26950.0], [66.5, 26976.0], [66.6, 27024.0], [66.7, 27056.0], [66.8, 27090.0], [66.9, 27106.0], [67.0, 27138.0], [67.1, 27186.0], [67.2, 27226.0], [67.3, 27299.0], [67.4, 27325.0], [67.5, 27343.0], [67.6, 27382.0], [67.7, 27458.0], [67.8, 27551.0], [67.9, 27671.0], [68.0, 27820.0], [68.1, 27942.0], [68.2, 28044.0], [68.3, 28183.0], [68.4, 28238.0], [68.5, 28270.0], [68.6, 28342.0], [68.7, 28424.0], [68.8, 28514.0], [68.9, 28750.0], [69.0, 28914.0], [69.1, 29007.0], [69.2, 29083.0], [69.3, 29148.0], [69.4, 29202.0], [69.5, 29244.0], [69.6, 29296.0], [69.7, 29368.0], [69.8, 29420.0], [69.9, 29488.0], [70.0, 29598.0], [70.1, 29706.0], [70.2, 29776.0], [70.3, 29857.0], [70.4, 29891.0], [70.5, 29947.0], [70.6, 29954.0], [70.7, 30024.0], [70.8, 30055.0], [70.9, 30096.0], [71.0, 30136.0], [71.1, 30216.0], [71.2, 30275.0], [71.3, 30317.0], [71.4, 30341.0], [71.5, 30383.0], [71.6, 30415.0], [71.7, 30448.0], [71.8, 30510.0], [71.9, 30575.0], [72.0, 30674.0], [72.1, 30741.0], [72.2, 30811.0], [72.3, 30862.0], [72.4, 30903.0], [72.5, 30960.0], [72.6, 31023.0], [72.7, 31108.0], [72.8, 31198.0], [72.9, 31257.0], [73.0, 31291.0], [73.1, 31328.0], [73.2, 31404.0], [73.3, 31464.0], [73.4, 31505.0], [73.5, 31528.0], [73.6, 31560.0], [73.7, 31600.0], [73.8, 31661.0], [73.9, 31686.0], [74.0, 31754.0], [74.1, 31855.0], [74.2, 32025.0], [74.3, 32412.0], [74.4, 32592.0], [74.5, 32664.0], [74.6, 32717.0], [74.7, 32754.0], [74.8, 32802.0], [74.9, 32855.0], [75.0, 32919.0], [75.1, 33044.0], [75.2, 33111.0], [75.3, 33170.0], [75.4, 33263.0], [75.5, 33304.0], [75.6, 33354.0], [75.7, 33432.0], [75.8, 33490.0], [75.9, 33613.0], [76.0, 33668.0], [76.1, 33713.0], [76.2, 33875.0], [76.3, 34059.0], [76.4, 34105.0], [76.5, 34299.0], [76.6, 34423.0], [76.7, 34615.0], [76.8, 34748.0], [76.9, 34829.0], [77.0, 34877.0], [77.1, 34922.0], [77.2, 35090.0], [77.3, 35125.0], [77.4, 35284.0], [77.5, 35362.0], [77.6, 35523.0], [77.7, 35756.0], [77.8, 35909.0], [77.9, 36116.0], [78.0, 36176.0], [78.1, 36324.0], [78.2, 36505.0], [78.3, 36716.0], [78.4, 36812.0], [78.5, 36879.0], [78.6, 36962.0], [78.7, 37013.0], [78.8, 37056.0], [78.9, 37100.0], [79.0, 37262.0], [79.1, 37347.0], [79.2, 37505.0], [79.3, 37788.0], [79.4, 37947.0], [79.5, 38064.0], [79.6, 38154.0], [79.7, 38331.0], [79.8, 38568.0], [79.9, 38780.0], [80.0, 38908.0], [80.1, 39149.0], [80.2, 39419.0], [80.3, 39546.0], [80.4, 39634.0], [80.5, 39767.0], [80.6, 39924.0], [80.7, 40018.0], [80.8, 40044.0], [80.9, 40127.0], [81.0, 40236.0], [81.1, 40323.0], [81.2, 40477.0], [81.3, 40710.0], [81.4, 40809.0], [81.5, 40928.0], [81.6, 41001.0], [81.7, 41213.0], [81.8, 41512.0], [81.9, 42097.0], [82.0, 43768.0], [82.1, 44023.0], [82.2, 44458.0], [82.3, 45711.0], [82.4, 48562.0], [82.5, 49463.0], [82.6, 50339.0], [82.7, 50452.0], [82.8, 50539.0], [82.9, 50656.0], [83.0, 50754.0], [83.1, 50840.0], [83.2, 50943.0], [83.3, 51013.0], [83.4, 51118.0], [83.5, 51672.0], [83.6, 52045.0], [83.7, 52146.0], [83.8, 52246.0], [83.9, 52376.0], [84.0, 52453.0], [84.1, 52598.0], [84.2, 52804.0], [84.3, 53131.0], [84.4, 53318.0], [84.5, 53433.0], [84.6, 53640.0], [84.7, 53816.0], [84.8, 53911.0], [84.9, 53946.0], [85.0, 54026.0], [85.1, 54051.0], [85.2, 54091.0], [85.3, 54164.0], [85.4, 54238.0], [85.5, 54310.0], [85.6, 54341.0], [85.7, 54415.0], [85.8, 54495.0], [85.9, 54522.0], [86.0, 54542.0], [86.1, 54623.0], [86.2, 54677.0], [86.3, 54758.0], [86.4, 54839.0], [86.5, 55076.0], [86.6, 55820.0], [86.7, 56598.0], [86.8, 56908.0], [86.9, 57067.0], [87.0, 57347.0], [87.1, 57549.0], [87.2, 57963.0], [87.3, 58967.0], [87.4, 59279.0], [87.5, 62701.0], [87.6, 63477.0], [87.7, 63867.0], [87.8, 63960.0], [87.9, 64108.0], [88.0, 64264.0], [88.1, 64375.0], [88.2, 64440.0], [88.3, 66081.0], [88.4, 66724.0], [88.5, 66801.0], [88.6, 66871.0], [88.7, 66895.0], [88.8, 67242.0], [88.9, 70228.0], [89.0, 74333.0], [89.1, 75035.0], [89.2, 75115.0], [89.3, 75232.0], [89.4, 75355.0], [89.5, 75650.0], [89.6, 77769.0], [89.7, 77961.0], [89.8, 78497.0], [89.9, 78614.0], [90.0, 79873.0], [90.1, 83518.0], [90.2, 84538.0], [90.3, 84644.0], [90.4, 84876.0], [90.5, 85437.0], [90.6, 86816.0], [90.7, 87245.0], [90.8, 87586.0], [90.9, 88564.0], [91.0, 89051.0], [91.1, 92949.0], [91.2, 97168.0], [91.3, 98155.0], [91.4, 99207.0], [91.5, 112528.0], [91.6, 112612.0], [91.7, 114494.0], [91.8, 114704.0], [91.9, 114711.0], [92.0, 114713.0], [92.1, 114721.0], [92.2, 114738.0], [92.3, 114749.0], [92.4, 114753.0], [92.5, 114765.0], [92.6, 114768.0], [92.7, 114770.0], [92.8, 114771.0], [92.9, 114773.0], [93.0, 114776.0], [93.1, 114779.0], [93.2, 114780.0], [93.3, 114783.0], [93.4, 114785.0], [93.5, 114785.0], [93.6, 114786.0], [93.7, 114787.0], [93.8, 114788.0], [93.9, 114789.0], [94.0, 114790.0], [94.1, 114795.0], [94.2, 114806.0], [94.3, 114811.0], [94.4, 116785.0], [94.5, 116788.0], [94.6, 129182.0], [94.7, 129219.0], [94.8, 129358.0], [94.9, 129875.0], [95.0, 129900.0], [95.1, 129901.0], [95.2, 129904.0], [95.3, 129905.0], [95.4, 129908.0], [95.5, 129931.0], [95.6, 129939.0], [95.7, 129956.0], [95.8, 129973.0], [95.9, 129975.0], [96.0, 129978.0], [96.1, 129980.0], [96.2, 129980.0], [96.3, 129981.0], [96.4, 129983.0], [96.5, 129985.0], [96.6, 129987.0], [96.7, 129990.0], [96.8, 129994.0], [96.9, 130003.0], [97.0, 130004.0], [97.1, 130007.0], [97.2, 130010.0], [97.3, 130014.0], [97.4, 130018.0], [97.5, 130023.0], [97.6, 130026.0], [97.7, 130028.0], [97.8, 130043.0], [97.9, 130056.0], [98.0, 130063.0], [98.1, 130070.0], [98.2, 130076.0], [98.3, 130081.0], [98.4, 130085.0], [98.5, 130089.0], [98.6, 130095.0], [98.7, 130120.0], [98.8, 130130.0], [98.9, 130136.0], [99.0, 130139.0], [99.1, 130143.0], [99.2, 130150.0], [99.3, 130162.0], [99.4, 130172.0], [99.5, 130991.0], [99.6, 131023.0], [99.7, 131053.0], [99.8, 131100.0], [99.9, 131161.0]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 12300.0, "maxY": 180.0, "series": [{"data": [[66700.0, 9.0], [71500.0, 1.0], [76300.0, 1.0], [79500.0, 1.0], [77900.0, 8.0], [87500.0, 3.0], [97100.0, 2.0], [98700.0, 1.0], [114700.0, 180.0], [129100.0, 9.0], [33700.0, 8.0], [34500.0, 2.0], [32900.0, 3.0], [35300.0, 9.0], [36100.0, 9.0], [36900.0, 10.0], [38500.0, 4.0], [37700.0, 2.0], [40900.0, 8.0], [39300.0, 1.0], [40100.0, 8.0], [41700.0, 1.0], [45700.0, 1.0], [48900.0, 2.0], [48100.0, 1.0], [47300.0, 1.0], [50500.0, 6.0], [52100.0, 7.0], [53700.0, 5.0], [54500.0, 18.0], [56100.0, 2.0], [56900.0, 4.0], [57700.0, 2.0], [59300.0, 2.0], [64100.0, 6.0], [75400.0, 4.0], [78600.0, 3.0], [85000.0, 1.0], [86600.0, 1.0], [89800.0, 1.0], [129800.0, 5.0], [71300.0, 1.0], [77700.0, 2.0], [84100.0, 1.0], [87300.0, 2.0], [88900.0, 2.0], [114500.0, 4.0], [12600.0, 1.0], [12800.0, 3.0], [13000.0, 2.0], [13200.0, 2.0], [13400.0, 1.0], [13800.0, 3.0], [13600.0, 2.0], [14000.0, 7.0], [14200.0, 4.0], [14600.0, 13.0], [14800.0, 24.0], [14400.0, 5.0], [15000.0, 24.0], [15200.0, 48.0], [15400.0, 68.0], [15600.0, 32.0], [15800.0, 30.0], [16200.0, 57.0], [16000.0, 48.0], [17200.0, 66.0], [16400.0, 47.0], [16800.0, 63.0], [17600.0, 35.0], [18000.0, 48.0], [18400.0, 47.0], [19200.0, 63.0], [18800.0, 55.0], [19600.0, 44.0], [20000.0, 57.0], [20400.0, 55.0], [20800.0, 42.0], [21200.0, 41.0], [21600.0, 41.0], [22400.0, 54.0], [22000.0, 26.0], [22800.0, 39.0], [23200.0, 45.0], [24400.0, 34.0], [23600.0, 27.0], [24000.0, 48.0], [24800.0, 21.0], [25200.0, 37.0], [26000.0, 31.0], [25600.0, 36.0], [26400.0, 26.0], [26800.0, 27.0], [27200.0, 14.0], [27600.0, 5.0], [28400.0, 9.0], [28000.0, 7.0], [28800.0, 4.0], [29200.0, 17.0], [29600.0, 7.0], [30000.0, 17.0], [30400.0, 15.0], [30800.0, 18.0], [31200.0, 15.0], [31600.0, 18.0], [32000.0, 2.0], [32400.0, 4.0], [33600.0, 14.0], [34400.0, 8.0], [32800.0, 14.0], [36800.0, 11.0], [35200.0, 7.0], [36000.0, 4.0], [37600.0, 3.0], [38400.0, 1.0], [40800.0, 9.0], [39200.0, 3.0], [40000.0, 17.0], [42400.0, 3.0], [41600.0, 1.0], [44000.0, 3.0], [45600.0, 1.0], [49600.0, 1.0], [50400.0, 8.0], [51200.0, 1.0], [52000.0, 4.0], [52800.0, 2.0], [54400.0, 10.0], [53600.0, 4.0], [56000.0, 1.0], [56800.0, 4.0], [59200.0, 3.0], [63200.0, 1.0], [64000.0, 6.0], [64800.0, 1.0], [67200.0, 6.0], [75200.0, 7.0], [78400.0, 4.0], [84800.0, 4.0], [89600.0, 1.0], [92800.0, 1.0], [99200.0, 4.0], [131200.0, 1.0], [75100.0, 7.0], [79900.0, 4.0], [78300.0, 1.0], [84700.0, 2.0], [89500.0, 1.0], [116700.0, 11.0], [129500.0, 1.0], [33900.0, 4.0], [33100.0, 11.0], [34700.0, 11.0], [35500.0, 5.0], [36300.0, 4.0], [37100.0, 4.0], [37900.0, 7.0], [38700.0, 3.0], [39500.0, 8.0], [40300.0, 4.0], [41900.0, 3.0], [41100.0, 1.0], [44300.0, 2.0], [49100.0, 1.0], [50700.0, 9.0], [49900.0, 2.0], [51500.0, 3.0], [53100.0, 4.0], [52300.0, 4.0], [53900.0, 18.0], [54700.0, 11.0], [55500.0, 1.0], [56300.0, 1.0], [57100.0, 1.0], [57900.0, 2.0], [58700.0, 1.0], [62700.0, 2.0], [63500.0, 1.0], [64300.0, 10.0], [85400.0, 2.0], [87000.0, 2.0], [93400.0, 1.0], [112600.0, 7.0], [66900.0, 6.0], [74900.0, 3.0], [79700.0, 2.0], [84500.0, 7.0], [92500.0, 1.0], [97300.0, 2.0], [98900.0, 1.0], [129300.0, 7.0], [130900.0, 10.0], [16500.0, 25.0], [16900.0, 53.0], [17300.0, 53.0], [17700.0, 68.0], [18100.0, 45.0], [18500.0, 55.0], [18900.0, 54.0], [19300.0, 65.0], [20100.0, 71.0], [19700.0, 47.0], [21300.0, 46.0], [20500.0, 40.0], [20900.0, 43.0], [21700.0, 47.0], [22100.0, 25.0], [22500.0, 47.0], [23300.0, 43.0], [22900.0, 34.0], [23700.0, 43.0], [24100.0, 45.0], [24500.0, 27.0], [24900.0, 21.0], [25300.0, 40.0], [25700.0, 42.0], [26100.0, 10.0], [26500.0, 20.0], [27300.0, 24.0], [26900.0, 22.0], [28500.0, 6.0], [28100.0, 7.0], [27700.0, 5.0], [28900.0, 8.0], [29300.0, 15.0], [29700.0, 8.0], [30100.0, 13.0], [30500.0, 13.0], [30900.0, 13.0], [31300.0, 15.0], [31700.0, 11.0], [32100.0, 2.0], [32500.0, 6.0], [33800.0, 3.0], [33000.0, 13.0], [131100.0, 15.0], [34600.0, 2.0], [36200.0, 5.0], [35400.0, 3.0], [37000.0, 18.0], [37800.0, 2.0], [38600.0, 4.0], [40200.0, 7.0], [39400.0, 5.0], [41000.0, 5.0], [44200.0, 2.0], [48200.0, 1.0], [50600.0, 7.0], [53000.0, 5.0], [52200.0, 9.0], [51400.0, 1.0], [53800.0, 4.0], [54600.0, 12.0], [55400.0, 2.0], [57000.0, 7.0], [57800.0, 3.0], [58600.0, 2.0], [63400.0, 3.0], [64200.0, 5.0], [66000.0, 4.0], [75600.0, 2.0], [83600.0, 2.0], [82000.0, 1.0], [86800.0, 4.0], [88400.0, 1.0], [93200.0, 1.0], [130000.0, 133.0], [65900.0, 2.0], [75500.0, 1.0], [78700.0, 1.0], [85100.0, 1.0], [83500.0, 1.0], [86700.0, 1.0], [88300.0, 1.0], [97900.0, 1.0], [129900.0, 148.0], [33300.0, 13.0], [34100.0, 7.0], [36500.0, 4.0], [34900.0, 8.0], [35700.0, 6.0], [37300.0, 9.0], [38100.0, 7.0], [38900.0, 4.0], [40500.0, 2.0], [39700.0, 7.0], [41300.0, 4.0], [42100.0, 2.0], [43700.0, 2.0], [44500.0, 2.0], [47700.0, 2.0], [48500.0, 1.0], [50900.0, 11.0], [49300.0, 1.0], [51700.0, 2.0], [52500.0, 6.0], [54100.0, 10.0], [54900.0, 3.0], [53300.0, 7.0], [55700.0, 3.0], [56500.0, 2.0], [57300.0, 5.0], [58900.0, 4.0], [59700.0, 2.0], [62900.0, 1.0], [63700.0, 2.0], [66600.0, 3.0], [71400.0, 2.0], [76200.0, 1.0], [77800.0, 1.0], [87400.0, 2.0], [89000.0, 2.0], [93800.0, 1.0], [109800.0, 3.0], [114600.0, 2.0], [122600.0, 1.0], [67300.0, 2.0], [70500.0, 1.0], [75300.0, 5.0], [78500.0, 5.0], [84900.0, 4.0], [83300.0, 2.0], [92900.0, 1.0], [12300.0, 1.0], [12500.0, 1.0], [12700.0, 1.0], [12900.0, 5.0], [13100.0, 1.0], [13300.0, 3.0], [13500.0, 6.0], [13700.0, 4.0], [13900.0, 4.0], [14300.0, 10.0], [14100.0, 2.0], [14500.0, 9.0], [14700.0, 16.0], [14900.0, 17.0], [15100.0, 22.0], [15300.0, 51.0], [15500.0, 57.0], [15700.0, 30.0], [15900.0, 36.0], [16100.0, 30.0], [16300.0, 49.0], [16600.0, 31.0], [17000.0, 51.0], [17400.0, 49.0], [18200.0, 34.0], [17800.0, 60.0], [18600.0, 55.0], [19000.0, 47.0], [19400.0, 57.0], [19800.0, 44.0], [20200.0, 90.0], [21400.0, 40.0], [20600.0, 39.0], [21000.0, 27.0], [21800.0, 46.0], [22200.0, 25.0], [22600.0, 36.0], [23000.0, 42.0], [23400.0, 48.0], [24200.0, 29.0], [23800.0, 42.0], [24600.0, 14.0], [25000.0, 36.0], [25400.0, 30.0], [25800.0, 41.0], [26200.0, 20.0], [26600.0, 27.0], [27000.0, 24.0], [27400.0, 11.0], [28200.0, 15.0], [27800.0, 6.0], [28600.0, 1.0], [29000.0, 10.0], [29400.0, 9.0], [29800.0, 16.0], [30200.0, 14.0], [30600.0, 6.0], [31000.0, 8.0], [31400.0, 13.0], [31800.0, 6.0], [32600.0, 11.0], [32200.0, 1.0], [33200.0, 13.0], [34800.0, 15.0], [34000.0, 9.0], [36400.0, 5.0], [35600.0, 2.0], [37200.0, 5.0], [38000.0, 8.0], [38800.0, 6.0], [40400.0, 7.0], [39600.0, 8.0], [41200.0, 4.0], [42000.0, 2.0], [44400.0, 4.0], [48400.0, 1.0], [50800.0, 7.0], [50000.0, 1.0], [49200.0, 1.0], [52400.0, 9.0], [53200.0, 4.0], [51600.0, 2.0], [54000.0, 18.0], [54800.0, 5.0], [57200.0, 2.0], [58800.0, 1.0], [59600.0, 1.0], [62800.0, 1.0], [63600.0, 2.0], [64400.0, 5.0], [66400.0, 1.0], [71200.0, 1.0], [77600.0, 1.0], [85600.0, 1.0], [87200.0, 2.0], [88800.0, 3.0], [90400.0, 1.0], [93600.0, 1.0], [114400.0, 3.0], [120800.0, 1.0], [74300.0, 2.0], [75900.0, 1.0], [83900.0, 1.0], [85500.0, 1.0], [87100.0, 2.0], [96700.0, 1.0], [33500.0, 6.0], [34300.0, 4.0], [35900.0, 4.0], [36700.0, 8.0], [35100.0, 8.0], [37500.0, 6.0], [38300.0, 5.0], [39900.0, 6.0], [40700.0, 7.0], [39100.0, 3.0], [41500.0, 2.0], [43900.0, 3.0], [48700.0, 1.0], [49500.0, 1.0], [50300.0, 7.0], [51100.0, 5.0], [51900.0, 3.0], [52700.0, 4.0], [54300.0, 16.0], [53500.0, 4.0], [55900.0, 2.0], [56700.0, 2.0], [57500.0, 4.0], [59100.0, 2.0], [63900.0, 7.0], [70200.0, 1.0], [75000.0, 8.0], [79800.0, 2.0], [78200.0, 1.0], [84600.0, 6.0], [87800.0, 1.0], [97400.0, 3.0], [99000.0, 3.0], [129400.0, 2.0], [131000.0, 18.0], [86900.0, 1.0], [88500.0, 4.0], [98100.0, 1.0], [112500.0, 7.0], [130100.0, 63.0], [16700.0, 41.0], [17100.0, 55.0], [17500.0, 29.0], [17900.0, 50.0], [18300.0, 53.0], [18700.0, 77.0], [19100.0, 54.0], [19500.0, 58.0], [19900.0, 47.0], [20300.0, 73.0], [21100.0, 50.0], [21500.0, 30.0], [20700.0, 32.0], [22300.0, 43.0], [21900.0, 31.0], [22700.0, 38.0], [23100.0, 32.0], [23500.0, 30.0], [24300.0, 33.0], [23900.0, 36.0], [24700.0, 15.0], [25100.0, 38.0], [25500.0, 20.0], [25900.0, 36.0], [26300.0, 25.0], [26700.0, 24.0], [27100.0, 23.0], [27500.0, 6.0], [28300.0, 12.0], [27900.0, 7.0], [29100.0, 13.0], [29500.0, 7.0], [28700.0, 4.0], [29900.0, 21.0], [30300.0, 25.0], [30700.0, 11.0], [31500.0, 25.0], [31100.0, 11.0], [32700.0, 19.0], [31900.0, 3.0], [32300.0, 2.0], [33400.0, 11.0], [34200.0, 3.0], [36600.0, 3.0], [35800.0, 4.0], [35000.0, 5.0], [37400.0, 4.0], [38200.0, 4.0], [40600.0, 3.0], [39000.0, 4.0], [39800.0, 3.0], [42200.0, 1.0], [41400.0, 1.0], [44600.0, 3.0], [43800.0, 2.0], [48600.0, 1.0], [51000.0, 5.0], [50200.0, 1.0], [49400.0, 1.0], [51800.0, 1.0], [52600.0, 3.0], [53400.0, 4.0], [54200.0, 11.0], [55000.0, 4.0], [55800.0, 1.0], [58200.0, 1.0], [59000.0, 1.0], [57400.0, 3.0], [59800.0, 1.0], [63000.0, 1.0], [63800.0, 4.0], [66800.0, 17.0], [76400.0, 1.0], [74800.0, 2.0], [78000.0, 2.0], [84400.0, 1.0], [87600.0, 1.0], [89200.0, 1.0], [97200.0, 1.0], [98800.0, 2.0], [114800.0, 19.0], [129200.0, 9.0]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 131200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 659.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 7046.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 7046.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 659.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.6126281E12, "maxY": 1000.0, "series": [{"data": [[1.61262822E12, 1000.0], [1.61262816E12, 1000.0], [1.61262834E12, 1000.0], [1.61262828E12, 1000.0], [1.61262846E12, 1.0], [1.6126284E12, 620.0762195121973], [1.6126281E12, 1000.0]], "isOverall": false, "label": "Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61262846E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 18680.0, "minX": 1.0, "maxY": 131211.0, "series": [{"data": [[4.0, 109817.33333333333], [5.0, 129394.0], [8.0, 129329.5], [12.0, 129276.0], [13.0, 129308.5], [14.0, 129210.0], [15.0, 67306.0], [16.0, 66057.0], [17.0, 66882.0], [18.0, 67257.0], [19.0, 66099.0], [20.0, 67242.0], [21.0, 67288.0], [24.0, 67010.66666666667], [26.0, 66479.5], [27.0, 66889.0], [29.0, 66936.0], [31.0, 66919.0], [33.0, 66874.5], [35.0, 66865.5], [37.0, 66895.0], [36.0, 66072.0], [39.0, 66988.0], [38.0, 67282.0], [40.0, 66811.0], [43.0, 67065.0], [42.0, 66839.0], [45.0, 67239.0], [44.0, 66865.0], [47.0, 66797.0], [46.0, 66991.0], [49.0, 65977.0], [48.0, 65979.0], [51.0, 64402.0], [50.0, 66801.0], [53.0, 75916.0], [52.0, 64483.0], [55.0, 66752.0], [54.0, 66788.0], [57.0, 66706.0], [56.0, 66894.0], [59.0, 66733.0], [58.0, 66709.0], [61.0, 66724.0], [60.0, 66856.0], [63.0, 66770.0], [62.0, 66688.0], [67.0, 66496.0], [66.0, 66624.0], [64.0, 66739.0], [71.0, 75650.0], [70.0, 75472.0], [69.0, 58669.0], [68.0, 32008.0], [75.0, 75355.0], [74.0, 75672.0], [73.0, 75345.0], [72.0, 75298.0], [79.0, 75307.0], [78.0, 71260.0], [77.0, 71524.0], [76.0, 74800.0], [83.0, 75037.0], [82.0, 75030.0], [81.0, 71427.0], [80.0, 71463.0], [87.0, 75287.5], [85.0, 75506.0], [84.0, 78775.0], [90.0, 71387.0], [89.0, 75468.0], [88.0, 75477.0], [95.0, 75200.0], [93.0, 74985.0], [92.0, 75291.0], [99.0, 44458.0], [98.0, 44638.0], [97.0, 44464.0], [96.0, 75154.0], [103.0, 75073.0], [102.0, 75361.0], [101.0, 75224.0], [100.0, 44347.0], [107.0, 75341.0], [106.0, 75087.0], [105.0, 74994.0], [104.0, 75105.0], [111.0, 78684.0], [110.0, 44549.0], [109.0, 78542.0], [108.0, 44311.0], [115.0, 78406.0], [114.0, 44647.0], [113.0, 44283.0], [112.0, 74826.0], [119.0, 78565.0], [118.0, 78614.0], [117.0, 78497.0], [116.0, 44512.0], [123.0, 78522.0], [122.0, 78311.0], [121.0, 61445.5], [127.0, 78624.0], [126.0, 78498.0], [125.0, 78553.0], [124.0, 78523.0], [135.0, 44065.0], [134.0, 78058.0], [133.0, 44023.0], [132.0, 43999.0], [131.0, 77961.0], [130.0, 78012.0], [129.0, 30985.0], [128.0, 78230.0], [143.0, 77986.0], [142.0, 77922.0], [141.0, 44000.0], [140.0, 77836.0], [139.0, 77917.0], [138.0, 43888.0], [136.0, 77948.0], [151.0, 77956.0], [150.0, 77766.0], [149.0, 43934.0], [148.0, 77948.0], [147.0, 77769.0], [146.0, 77950.0], [145.0, 43890.0], [144.0, 44443.0], [159.0, 99294.0], [158.0, 79872.0], [157.0, 79928.0], [156.0, 79925.0], [155.0, 39197.0], [154.0, 79950.0], [153.0, 79955.0], [152.0, 77628.0], [167.0, 79713.0], [166.0, 99011.0], [165.0, 79746.0], [164.0, 99218.0], [163.0, 79568.0], [162.0, 99207.0], [161.0, 79873.0], [160.0, 99253.0], [175.0, 51171.0], [174.0, 59307.0], [173.0, 98974.0], [172.0, 98851.0], [171.0, 98877.0], [170.0, 99078.0], [169.0, 70512.0], [168.0, 99020.0], [183.0, 59250.0], [182.0, 51118.0], [181.0, 59264.0], [180.0, 38115.0], [179.0, 51116.0], [178.0, 59279.0], [177.0, 30068.0], [176.0, 38140.0], [191.0, 57472.0], [190.0, 38072.0], [189.0, 50933.0], [188.0, 38064.0], [187.0, 47300.0], [186.0, 38153.0], [185.0, 98709.0], [184.0, 38180.0], [199.0, 59110.0], [198.0, 37922.0], [197.0, 47693.0], [195.0, 57549.0], [194.0, 50966.0], [193.0, 50899.0], [192.0, 50848.0], [207.0, 37947.0], [206.0, 57410.0], [205.0, 37982.0], [204.0, 50785.0], [203.0, 57333.0], [202.0, 57355.0], [201.0, 50745.0], [200.0, 50840.0], [215.0, 35120.0], [214.0, 33170.0], [213.0, 50793.0], [212.0, 57357.0], [211.0, 57502.0], [210.0, 37913.0], [209.0, 57318.0], [208.0, 64892.0], [223.0, 34859.0], [222.0, 50475.0], [221.0, 34898.0], [220.0, 33035.0], [219.0, 50656.0], [218.0, 35465.0], [216.0, 37788.0], [231.0, 64381.0], [229.0, 34621.0], [228.0, 64396.0], [227.0, 34914.0], [226.0, 64420.0], [225.0, 64440.0], [224.0, 64494.0], [239.0, 34615.0], [238.0, 64334.0], [237.0, 64341.0], [236.0, 34735.0], [235.0, 64356.0], [234.0, 64375.0], [233.0, 34865.0], [232.0, 64382.5], [247.0, 64212.0], [246.0, 64239.0], [245.0, 64264.0], [244.0, 64270.0], [243.0, 64299.0], [242.0, 64322.0], [241.0, 49615.0], [255.0, 64052.0], [254.0, 64064.0], [253.0, 64084.0], [252.0, 64118.5], [250.0, 64132.0], [249.0, 64166.0], [248.0, 64174.0], [270.0, 63517.0], [271.0, 63477.0], [269.0, 26529.0], [268.0, 63637.0], [267.0, 63709.0], [266.0, 63760.0], [265.0, 63802.0], [264.0, 63873.0], [263.0, 63903.0], [257.0, 64009.0], [256.0, 64024.0], [259.0, 63975.0], [258.0, 64005.0], [262.0, 63925.0], [261.0, 63928.0], [260.0, 63946.0], [286.0, 51672.0], [287.0, 51694.0], [285.0, 62973.0], [284.0, 28269.0], [283.0, 26294.0], [282.0, 51150.0], [281.0, 63067.0], [280.0, 27479.0], [279.0, 25958.0], [273.0, 63442.0], [272.0, 26268.0], [275.0, 26280.0], [274.0, 63440.0], [278.0, 26397.0], [277.0, 63270.0], [276.0, 36646.0], [301.0, 35409.0], [303.0, 55016.0], [300.0, 35397.0], [291.0, 25818.0], [290.0, 54698.0], [289.0, 25901.0], [288.0, 25834.0], [299.0, 54508.0], [298.0, 54528.0], [297.0, 54531.0], [296.0, 25752.0], [295.0, 54623.0], [294.0, 35009.0], [293.0, 26256.0], [292.0, 27253.0], [318.0, 27125.0], [319.0, 34852.0], [317.0, 27106.0], [316.0, 27317.0], [315.0, 34877.0], [314.0, 26661.0], [313.0, 53943.0], [312.0, 53949.0], [311.0, 27117.0], [305.0, 27034.0], [304.0, 26620.0], [307.0, 27321.0], [306.0, 35120.0], [310.0, 27299.0], [309.0, 27339.0], [308.0, 27355.0], [334.0, 26970.0], [335.0, 54260.0], [333.0, 54285.0], [332.0, 34705.0], [331.0, 34709.0], [330.0, 54447.0], [329.0, 27210.0], [328.0, 27209.0], [327.0, 34748.0], [321.0, 34808.0], [320.0, 26502.0], [323.0, 54542.0], [322.0, 34813.0], [326.0, 26470.0], [325.0, 53785.0], [324.0, 53789.0], [350.0, 25251.0], [351.0, 53904.0], [349.0, 34494.0], [348.0, 34544.0], [347.0, 25148.0], [346.0, 25106.0], [345.0, 25105.0], [344.0, 29326.0], [343.0, 52068.0], [337.0, 26938.0], [336.0, 26950.0], [339.0, 25049.0], [338.0, 54319.0], [342.0, 25021.0], [341.0, 25194.0], [340.0, 54298.0], [366.0, 25421.0], [367.0, 26842.0], [365.0, 26552.0], [364.0, 53920.0], [363.0, 25427.0], [362.0, 34317.0], [361.0, 53172.0], [360.0, 34466.0], [359.0, 59548.0], [355.0, 27053.0], [354.0, 26464.0], [353.0, 25480.0], [352.0, 53944.0], [356.0, 25164.0], [382.0, 26080.0], [383.0, 34146.0], [381.0, 26282.0], [380.0, 25080.0], [379.0, 24295.0], [378.0, 26576.0], [377.0, 25128.0], [376.0, 25440.0], [375.0, 26543.0], [371.0, 42967.5], [369.0, 25288.0], [374.0, 25171.0], [373.0, 24366.0], [372.0, 53816.0], [398.0, 25239.0], [399.0, 25002.0], [397.0, 25125.0], [396.0, 33994.0], [395.0, 53605.0], [394.0, 28937.0], [393.0, 24891.0], [392.0, 34373.0], [391.0, 24975.0], [385.0, 53662.0], [384.0, 25068.0], [387.0, 34104.0], [386.0, 29598.0], [390.0, 53489.0], [389.0, 25014.0], [388.0, 53710.0], [414.0, 24253.0], [415.0, 29167.0], [413.0, 52726.0], [412.0, 53318.0], [411.0, 24241.0], [410.0, 34002.0], [409.0, 26294.0], [408.0, 29170.0], [407.0, 25070.0], [401.0, 34091.0], [400.0, 53640.0], [403.0, 53500.0], [402.0, 34369.0], [406.0, 24392.0], [405.0, 34299.0], [404.0, 24710.0], [430.0, 30387.0], [431.0, 28315.0], [429.0, 33477.0], [428.0, 30465.0], [427.0, 28505.0], [426.0, 28514.0], [425.0, 33875.0], [424.0, 33911.0], [423.0, 28658.0], [417.0, 34145.0], [416.0, 29055.0], [419.0, 34105.0], [418.0, 34052.0], [422.0, 33631.0], [421.0, 34059.0], [420.0, 34064.0], [446.0, 30059.0], [447.0, 33161.0], [445.0, 33192.0], [444.0, 30138.0], [443.0, 27895.0], [442.0, 33135.0], [441.0, 30173.0], [440.0, 33197.0], [439.0, 27956.0], [433.0, 28325.0], [432.0, 33343.0], [435.0, 27818.0], [434.0, 33263.0], [438.0, 28014.0], [437.0, 33319.0], [436.0, 30227.0], [463.0, 131020.0], [461.0, 131090.5], [451.0, 92584.0], [450.0, 43897.5], [448.0, 27722.0], [459.0, 59652.0], [458.0, 29871.0], [457.0, 27786.0], [456.0, 33015.0], [455.0, 29946.0], [454.0, 27932.0], [453.0, 59774.0], [452.0, 59785.0], [476.0, 131006.75], [478.0, 27430.0], [479.0, 59340.0], [477.0, 27524.0], [475.0, 131039.66666666667], [473.0, 131085.0], [471.0, 131138.0], [469.0, 131211.0], [465.0, 131063.0], [464.0, 131023.5], [494.0, 57716.0], [495.0, 57815.0], [493.0, 57826.0], [492.0, 57892.0], [491.0, 57963.0], [490.0, 58654.0], [489.0, 58733.0], [488.0, 58808.0], [487.0, 58915.0], [481.0, 59167.0], [480.0, 27445.0], [483.0, 58997.0], [482.0, 59084.0], [486.0, 29240.0], [485.0, 58967.0], [484.0, 58973.0], [510.0, 57189.0], [511.0, 28755.0], [509.0, 57221.0], [508.0, 57266.0], [507.0, 57347.0], [506.0, 28855.0], [505.0, 129223.0], [503.0, 129198.5], [496.0, 57742.0], [498.0, 57576.0], [497.0, 57506.0], [540.0, 28218.0], [543.0, 27942.0], [529.0, 56747.0], [528.0, 28345.0], [531.0, 28352.0], [530.0, 56828.0], [533.0, 56556.0], [532.0, 56598.0], [542.0, 26377.0], [541.0, 25409.0], [539.0, 25224.0], [538.0, 57007.0], [537.0, 28270.0], [536.0, 28195.0], [527.0, 56856.0], [513.0, 28596.0], [512.0, 56996.0], [515.0, 57067.0], [514.0, 57068.0], [517.0, 57033.0], [516.0, 56969.0], [519.0, 28577.0], [518.0, 57032.0], [526.0, 56877.0], [525.0, 28484.0], [524.0, 26655.0], [523.0, 56716.0], [522.0, 28514.0], [521.0, 28471.0], [520.0, 57005.0], [535.0, 26661.0], [534.0, 28202.0], [572.0, 23581.0], [575.0, 24528.0], [561.0, 24767.0], [560.0, 24831.0], [563.0, 24738.0], [562.0, 23764.0], [565.0, 89051.0], [564.0, 24739.0], [574.0, 24523.0], [573.0, 23521.0], [571.0, 24640.0], [570.0, 24637.0], [569.0, 89031.0], [568.0, 23703.0], [559.0, 23750.0], [545.0, 27604.0], [544.0, 27920.0], [547.0, 24628.0], [546.0, 24808.0], [549.0, 45711.0], [548.0, 26260.0], [551.0, 23681.0], [550.0, 23820.0], [558.0, 24796.0], [557.0, 24319.5], [555.0, 24831.0], [554.0, 89255.0], [553.0, 89540.0], [552.0, 89861.0], [567.0, 88972.0], [566.0, 24670.0], [604.0, 24167.0], [607.0, 23232.0], [593.0, 23820.0], [592.0, 23708.0], [595.0, 22420.0], [594.0, 26778.0], [597.0, 24315.0], [596.0, 23697.0], [606.0, 23448.0], [605.0, 24180.0], [603.0, 24190.0], [602.0, 23330.0], [601.0, 23382.0], [600.0, 23401.0], [591.0, 22634.0], [577.0, 88919.0], [576.0, 23395.0], [579.0, 88834.0], [578.0, 88836.0], [581.0, 88530.0], [580.0, 23377.0], [583.0, 88564.0], [582.0, 24173.0], [590.0, 23627.0], [589.0, 23839.0], [588.0, 23826.0], [587.0, 22770.0], [586.0, 23943.0], [585.0, 24065.0], [584.0, 23951.0], [599.0, 23536.0], [598.0, 23486.0], [636.0, 23235.0], [639.0, 22754.0], [625.0, 23342.0], [624.0, 43768.0], [627.0, 23281.0], [626.0, 23236.0], [629.0, 23496.0], [628.0, 30597.0], [638.0, 26256.0], [637.0, 30313.0], [635.0, 30501.0], [634.0, 38340.0], [633.0, 23299.0], [632.0, 30556.0], [623.0, 23296.0], [609.0, 23170.0], [608.0, 23461.0], [611.0, 23927.0], [610.0, 24056.0], [613.0, 23559.0], [612.0, 23865.0], [615.0, 23509.0], [614.0, 23473.0], [622.0, 23446.0], [621.0, 31012.0], [620.0, 38812.0], [619.0, 23399.0], [618.0, 38750.0], [617.0, 26660.0], [616.0, 23440.0], [631.0, 23234.0], [630.0, 23178.0], [668.0, 22359.0], [671.0, 22088.0], [657.0, 29735.0], [656.0, 22213.0], [659.0, 29948.0], [658.0, 29374.0], [661.0, 37551.0], [660.0, 25554.0], [670.0, 22204.0], [669.0, 25158.0], [667.0, 29321.0], [666.0, 29330.0], [665.0, 29368.0], [664.0, 22264.0], [655.0, 22414.0], [641.0, 30181.0], [640.0, 30197.0], [643.0, 37892.0], [642.0, 29809.0], [645.0, 25660.0], [644.0, 24023.0], [647.0, 25698.0], [646.0, 22421.0], [654.0, 37626.0], [653.0, 25574.0], [652.0, 22476.0], [651.0, 22452.0], [650.0, 25639.0], [649.0, 29933.0], [648.0, 22622.0], [663.0, 22197.0], [662.0, 37674.0], [697.0, 20961.0], [702.0, 23454.5], [703.0, 20889.0], [688.0, 20645.0], [690.0, 29735.0], [689.0, 20673.0], [692.0, 20499.0], [691.0, 21637.0], [700.0, 26928.0], [699.0, 20933.0], [698.0, 26953.0], [696.0, 20460.0], [679.0, 22988.0], [678.0, 21946.0], [677.0, 29083.0], [676.0, 23121.0], [675.0, 23093.0], [674.0, 25022.0], [673.0, 23213.0], [672.0, 29264.0], [687.0, 21821.0], [686.0, 21120.0], [685.0, 21142.0], [684.0, 22313.0], [683.0, 21304.0], [682.0, 22448.0], [681.0, 21312.0], [680.0, 23284.0], [694.0, 20049.0], [693.0, 27055.0], [732.0, 18987.0], [735.0, 20238.0], [721.0, 19252.0], [720.0, 20379.0], [723.0, 20329.0], [722.0, 20255.0], [725.0, 19326.0], [724.0, 20233.0], [734.0, 19937.0], [733.0, 19944.0], [731.0, 19081.0], [730.0, 20031.0], [729.0, 19188.0], [728.0, 20283.0], [719.0, 20344.0], [705.0, 35042.0], [704.0, 20881.0], [707.0, 20807.0], [706.0, 20955.0], [709.0, 19666.0], [708.0, 19794.0], [711.0, 20524.0], [710.0, 19383.0], [718.0, 26473.0], [717.0, 20347.0], [716.0, 20389.0], [715.0, 20394.0], [714.0, 20375.0], [713.0, 19299.0], [712.0, 20443.0], [727.0, 20286.0], [726.0, 20326.0], [766.0, 18998.0], [756.0, 19129.0], [767.0, 35480.0], [753.0, 19153.0], [752.0, 22964.0], [755.0, 34402.0], [754.0, 34442.0], [765.0, 22293.333333333332], [762.0, 19184.0], [761.0, 18947.0], [743.0, 19380.0], [742.0, 23263.0], [741.0, 35522.0], [740.0, 23343.0], [739.0, 22551.0], [738.0, 18680.0], [737.0, 19832.0], [736.0, 19747.0], [751.0, 35272.0], [750.0, 23017.0], [749.0, 19137.0], [748.0, 20448.0], [747.0, 19193.0], [746.0, 35777.0], [745.0, 23369.0], [744.0, 19308.0], [759.0, 22902.0], [758.0, 98155.0], [757.0, 22121.0], [792.0, 25993.0], [796.0, 37086.0], [799.0, 19463.0], [786.0, 28550.5], [784.0, 20773.0], [788.0, 26062.0], [787.0, 25974.0], [798.0, 97453.0], [797.0, 40021.0], [795.0, 22020.0], [794.0, 22016.0], [793.0, 96766.0], [783.0, 37242.0], [769.0, 22840.0], [768.0, 35470.0], [771.0, 34922.0], [770.0, 18889.0], [773.0, 18907.0], [772.0, 18849.0], [775.0, 35360.0], [774.0, 35362.0], [782.0, 22359.0], [781.0, 22725.0], [780.0, 21783.0], [779.0, 18789.0], [778.0, 22751.0], [777.0, 35357.0], [776.0, 35359.0], [791.0, 32282.0], [790.0, 29826.0], [825.0, 36962.0], [830.0, 23522.0], [831.0, 20294.0], [817.0, 36921.0], [816.0, 39761.0], [819.0, 36852.0], [818.0, 37013.0], [821.0, 19317.0], [820.0, 19358.0], [829.0, 58720.5], [827.0, 19282.0], [826.0, 39631.0], [824.0, 39666.0], [807.0, 22389.0], [806.0, 37054.0], [805.0, 97396.0], [804.0, 37016.0], [803.0, 39921.0], [802.0, 39852.0], [801.0, 97394.0], [800.0, 97403.0], [815.0, 19373.0], [814.0, 97417.0], [813.0, 39793.0], [812.0, 20455.0], [811.0, 36970.0], [810.0, 97283.0], [809.0, 21908.0], [808.0, 23844.0], [823.0, 36829.0], [822.0, 36837.0], [860.0, 25137.0], [863.0, 36312.0], [849.0, 21432.0], [848.0, 31570.0], [851.0, 31447.0], [850.0, 21716.0], [853.0, 25325.0], [852.0, 21685.0], [862.0, 21233.0], [861.0, 36324.0], [859.0, 25482.0], [858.0, 31415.0], [857.0, 24225.0], [856.0, 21212.0], [847.0, 21495.0], [833.0, 36862.0], [832.0, 97168.0], [835.0, 20278.0], [834.0, 28764.0], [837.0, 20172.0], [836.0, 21667.0], [839.0, 36705.0], [838.0, 36731.0], [846.0, 25372.0], [845.0, 23712.0], [844.0, 21490.0], [843.0, 36596.0], [842.0, 36477.0], [841.0, 23334.0], [840.0, 20094.0], [855.0, 31474.0], [854.0, 36484.0], [892.0, 22841.0], [895.0, 33682.0], [880.0, 24479.0], [882.0, 24454.0], [881.0, 23688.0], [884.0, 30332.0], [883.0, 24443.0], [894.0, 22724.0], [893.0, 33657.0], [891.0, 22986.0], [890.0, 34755.0], [889.0, 24263.0], [888.0, 26544.0], [879.0, 26771.0], [865.0, 24164.0], [864.0, 36150.0], [867.0, 24218.0], [866.0, 30975.0], [869.0, 27332.0], [868.0, 24205.0], [871.0, 35698.0], [870.0, 24126.0], [878.0, 24301.0], [877.0, 30428.0], [876.0, 30346.0], [875.0, 30564.0], [874.0, 24548.0], [873.0, 24118.0], [872.0, 27094.0], [887.0, 27284.5], [885.0, 24365.0], [924.0, 22174.0], [927.0, 23794.0], [913.0, 22259.0], [912.0, 21830.0], [915.0, 33304.0], [914.0, 93499.0], [917.0, 92885.0], [916.0, 25293.0], [926.0, 38988.0], [925.0, 24633.0], [923.0, 39012.0], [922.0, 39078.0], [921.0, 33111.0], [920.0, 33228.0], [911.0, 92949.0], [897.0, 30886.0], [896.0, 93275.0], [899.0, 22452.0], [898.0, 21982.0], [901.0, 36165.0], [900.0, 30642.0], [903.0, 22367.0], [902.0, 93816.0], [910.0, 22235.0], [909.0, 93654.0], [908.0, 33319.0], [907.0, 24857.0], [906.0, 33276.0], [905.0, 24203.0], [904.0, 36120.0], [919.0, 29776.0], [918.0, 21658.0], [956.0, 27607.0], [959.0, 27186.0], [945.0, 28471.0], [944.0, 25801.0], [947.0, 28425.0], [946.0, 28389.0], [949.0, 25494.0], [948.0, 25499.0], [958.0, 87102.0], [957.0, 22416.0], [955.0, 27763.0], [954.0, 19208.0], [953.0, 25228.0], [952.0, 25336.0], [943.0, 28750.0], [929.0, 22023.0], [928.0, 33025.0], [931.0, 32919.0], [930.0, 33093.0], [933.0, 38894.0], [932.0, 38904.0], [935.0, 32894.0], [934.0, 23870.0], [942.0, 29022.0], [941.0, 27636.0], [940.0, 28018.0], [939.0, 22476.0], [938.0, 38667.0], [937.0, 32842.0], [936.0, 38819.0], [951.0, 28150.0], [950.0, 21412.0], [988.0, 22327.0], [991.0, 23002.0], [977.0, 21860.0], [976.0, 26727.0], [979.0, 26661.0], [978.0, 26663.0], [981.0, 26606.0], [980.0, 26633.0], [990.0, 22274.0], [989.0, 22312.0], [987.0, 22298.5], [986.0, 23336.5], [985.0, 23098.0], [984.0, 22468.0], [975.0, 26740.0], [961.0, 27170.0], [960.0, 27191.0], [963.0, 27105.0], [962.0, 25954.0], [965.0, 27073.0], [964.0, 87660.0], [967.0, 25831.0], [966.0, 27102.0], [974.0, 21939.0], [973.0, 26814.0], [972.0, 26822.0], [971.0, 26894.0], [970.0, 25704.0], [969.0, 26903.0], [968.0, 26913.0], [983.0, 22487.0], [982.0, 22530.0], [1000.0, 33814.190262843535], [999.0, 24024.0], [998.0, 24077.0], [997.0, 24066.0], [996.0, 32090.5], [995.0, 23106.5], [994.0, 22634.5], [993.0, 24603.0], [992.0, 24276.0], [1.0, 129172.0]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[935.1772874756639, 35212.49487345892]], "isOverall": false, "label": "Home-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.6126281E12, "maxY": 22068.383333333335, "series": [{"data": [[1.61262822E12, 22068.383333333335], [1.61262816E12, 7190.133333333333], [1.61262834E12, 16306.35], [1.61262828E12, 8296.016666666666], [1.61262846E12, 45.38333333333333], [1.6126284E12, 8214.916666666666], [1.6126281E12, 2919.766666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61262822E12, 2628.1666666666665], [1.61262816E12, 3031.1666666666665], [1.61262834E12, 2801.5], [1.61262828E12, 2795.0], [1.61262846E12, 0.0], [1.6126284E12, 2762.5], [1.6126281E12, 1248.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61262846E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 19679.440972222237, "minX": 1.6126281E12, "maxY": 129172.0, "series": [{"data": [[1.61262822E12, 46883.85787451985], [1.61262816E12, 24277.771979985722], [1.61262834E12, 41024.15772251312], [1.61262828E12, 28360.63752825924], [1.61262846E12, 129172.0], [1.6126284E12, 39886.490091463354], [1.6126281E12, 19679.440972222237]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61262846E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6126281E12, "maxY": 22025.938262195104, "series": [{"data": [[1.61262822E12, 7051.572983354673], [1.61262816E12, 10255.442458899211], [1.61262834E12, 11843.119764397918], [1.61262828E12, 11545.6021100226], [1.61262846E12, 0.0], [1.6126284E12, 22025.938262195104], [1.6126281E12, 6370.369791666667]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61262846E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 30.51562500000001, "minX": 1.6126281E12, "maxY": 129172.0, "series": [{"data": [[1.61262822E12, 31440.485915492918], [1.61262816E12, 4622.406719085054], [1.61262834E12, 7349.770287958112], [1.61262828E12, 8128.071590052757], [1.61262846E12, 129172.0], [1.6126284E12, 18394.487042682926], [1.6126281E12, 30.51562500000001]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61262846E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 12312.0, "minX": 1.6126281E12, "maxY": 99294.0, "series": [{"data": [[1.61262822E12, 83966.0], [1.61262816E12, 90492.0], [1.61262834E12, 88862.0], [1.61262828E12, 56330.0], [1.6126284E12, 99294.0], [1.6126281E12, 33989.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61262822E12, 31607.000000000004], [1.61262816E12, 37100.0], [1.61262834E12, 40191.80000000026], [1.61262828E12, 40448.7], [1.6126284E12, 66989.2], [1.6126281E12, 30003.800000000003]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61262822E12, 53360.799999999996], [1.61262816E12, 58220.0], [1.61262834E12, 87349.48], [1.61262828E12, 55118.159999999974], [1.6126284E12, 98036.44], [1.6126281E12, 30908.41]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61262822E12, 37055.3], [1.61262816E12, 54238.0], [1.61262834E12, 66795.49999999939], [1.61262828E12, 50391.5], [1.6126284E12, 78497.2], [1.6126281E12, 30329.75]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61262822E12, 15348.0], [1.61262816E12, 14362.0], [1.61262834E12, 15961.0], [1.61262828E12, 15183.0], [1.6126284E12, 16779.0], [1.6126281E12, 12312.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61262822E12, 20395.0], [1.61262816E12, 21356.0], [1.61262834E12, 22598.0], [1.61262828E12, 21305.5], [1.6126284E12, 27117.0], [1.6126281E12, 17763.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6126284E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 15503.5, "minX": 1.0, "maxY": 131095.0, "series": [{"data": [[2.0, 27785.5], [3.0, 25314.5], [4.0, 23654.0], [5.0, 17987.0], [6.0, 21308.0], [7.0, 25710.0], [8.0, 23270.5], [9.0, 23451.0], [10.0, 18514.0], [11.0, 22718.5], [12.0, 25496.5], [13.0, 19846.0], [14.0, 20970.5], [15.0, 21099.0], [16.0, 23219.5], [17.0, 28312.0], [18.0, 23400.0], [20.0, 24403.0], [21.0, 22586.0], [22.0, 24033.0], [23.0, 20211.0], [24.0, 24627.5], [25.0, 23429.0], [26.0, 29459.0], [28.0, 20343.0], [29.0, 23458.0], [30.0, 20336.5], [31.0, 22650.5], [32.0, 25929.0], [33.0, 24545.0], [35.0, 23868.0], [34.0, 25231.0], [36.0, 57128.5], [37.0, 20504.0], [39.0, 29202.0], [38.0, 27818.0], [40.0, 18952.5], [41.0, 17457.0], [43.0, 19263.0], [42.0, 34728.5], [44.0, 23036.0], [45.0, 26057.0], [46.0, 21102.5], [47.0, 50977.0], [49.0, 15749.0], [48.0, 22436.0], [51.0, 15848.0], [50.0, 17266.5], [52.0, 18607.5], [54.0, 16347.0], [55.0, 21788.0], [56.0, 19588.5], [59.0, 20828.0], [58.0, 21261.5], [62.0, 16383.5], [63.0, 21810.0], [65.0, 21096.5], [67.0, 16323.0], [71.0, 20350.5], [69.0, 23196.0], [68.0, 40041.0], [72.0, 25657.5], [73.0, 30612.0], [74.0, 40709.5], [76.0, 30787.0], [77.0, 19012.5], [78.0, 17407.5], [81.0, 27053.0], [84.0, 16373.0], [85.0, 24965.5], [86.0, 20511.0], [90.0, 17303.0], [95.0, 19920.0], [96.0, 15503.5], [101.0, 18475.0], [103.0, 19385.0], [105.0, 17468.0], [116.0, 18909.0], [203.0, 24523.0], [1.0, 26703.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[33.0, 131036.0], [9.0, 129246.0], [36.0, 116787.0], [38.0, 131095.0], [10.0, 129262.0], [3.0, 109812.0], [203.0, 114779.0], [16.0, 131061.5], [1.0, 129172.0], [20.0, 129486.0], [349.0, 130008.0], [25.0, 114521.0], [116.0, 112600.0], [31.0, 114736.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 349.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 40145.0, "series": [{"data": [[2.0, 14357.5], [3.0, 11550.5], [4.0, 11460.0], [5.0, 3884.0], [6.0, 8943.0], [7.0, 12982.0], [8.0, 11335.0], [9.0, 9929.5], [10.0, 5414.0], [11.0, 9673.5], [12.0, 10344.0], [13.0, 6104.0], [14.0, 4358.0], [15.0, 8779.0], [16.0, 6793.0], [17.0, 10422.0], [18.0, 10901.5], [20.0, 9651.0], [21.0, 10925.0], [22.0, 10776.0], [23.0, 7524.0], [24.0, 9745.0], [25.0, 11578.5], [26.0, 18544.0], [28.0, 3209.0], [29.0, 8255.0], [30.0, 3282.0], [31.0, 9756.5], [32.0, 12729.5], [33.0, 10250.0], [35.0, 11418.0], [34.0, 8574.0], [36.0, 40145.0], [37.0, 6133.0], [39.0, 18052.0], [38.0, 11686.0], [40.0, 4645.0], [41.0, 2823.0], [43.0, 5082.0], [42.0, 18366.0], [44.0, 10628.5], [45.0, 12377.0], [46.0, 7944.0], [47.0, 36742.5], [49.0, 2056.0], [48.0, 8144.5], [51.0, 3008.0], [50.0, 3195.0], [52.0, 5086.0], [54.0, 2208.5], [55.0, 9680.0], [56.0, 5679.0], [59.0, 8186.0], [58.0, 7195.0], [62.0, 2072.5], [63.0, 6652.0], [65.0, 7906.5], [67.0, 1783.0], [71.0, 5966.0], [69.0, 11586.0], [68.0, 24986.0], [72.0, 10552.0], [73.0, 16259.0], [74.0, 25454.5], [76.0, 18774.5], [77.0, 3704.0], [78.0, 2465.0], [81.0, 10255.0], [84.0, 4093.0], [85.0, 10295.5], [86.0, 5951.5], [90.0, 4564.5], [95.0, 5906.0], [96.0, 1176.0], [101.0, 4647.0], [103.0, 4866.0], [105.0, 2977.0], [116.0, 3932.0], [203.0, 10755.5], [1.0, 9180.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[33.0, 0.0], [9.0, 0.0], [36.0, 0.0], [38.0, 0.0], [10.0, 0.0], [3.0, 0.0], [203.0, 0.0], [16.0, 0.0], [1.0, 0.0], [20.0, 0.0], [349.0, 0.0], [25.0, 0.0], [116.0, 0.0], [31.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 349.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 7.433333333333334, "minX": 1.6126281E12, "maxY": 26.933333333333334, "series": [{"data": [[1.61262822E12, 26.933333333333334], [1.61262816E12, 21.933333333333334], [1.61262834E12, 25.1], [1.61262828E12, 22.95], [1.6126284E12, 7.433333333333334], [1.6126281E12, 24.066666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6126284E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6126281E12, "maxY": 23.316666666666666, "series": [{"data": [[1.61262822E12, 20.216666666666665], [1.61262816E12, 23.316666666666666], [1.61262834E12, 21.55], [1.61262828E12, 21.5], [1.6126284E12, 21.25], [1.6126281E12, 9.6]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.61262822E12, 5.816666666666666], [1.61262828E12, 0.6166666666666667], [1.61262846E12, 0.016666666666666666], [1.6126284E12, 0.5666666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.61262834E12, 3.9166666666666665], [1.6126284E12, 0.05]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61262846E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6126281E12, "maxY": 23.316666666666666, "series": [{"data": [[1.61262822E12, 20.216666666666665], [1.61262816E12, 23.316666666666666], [1.61262834E12, 21.55], [1.61262828E12, 21.5], [1.6126284E12, 21.25], [1.6126281E12, 9.6]], "isOverall": false, "label": "Home-success", "isController": false}, {"data": [[1.61262822E12, 5.816666666666666], [1.61262834E12, 3.9166666666666665], [1.61262828E12, 0.6166666666666667], [1.61262846E12, 0.016666666666666666], [1.6126284E12, 0.6166666666666667]], "isOverall": false, "label": "Home-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61262846E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6126281E12, "maxY": 23.316666666666666, "series": [{"data": [[1.61262822E12, 20.216666666666665], [1.61262816E12, 23.316666666666666], [1.61262834E12, 21.55], [1.61262828E12, 21.5], [1.6126284E12, 21.25], [1.6126281E12, 9.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.61262822E12, 5.816666666666666], [1.61262834E12, 3.9166666666666665], [1.61262828E12, 0.6166666666666667], [1.61262846E12, 0.016666666666666666], [1.6126284E12, 0.6166666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61262846E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

