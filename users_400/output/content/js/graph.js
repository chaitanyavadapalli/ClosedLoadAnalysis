/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 176.0, "minX": 0.0, "maxY": 25298.0, "series": [{"data": [[0.0, 176.0], [0.1, 198.0], [0.2, 824.0], [0.3, 1053.0], [0.4, 2079.0], [0.5, 2637.0], [0.6, 2754.0], [0.7, 2932.0], [0.8, 3393.0], [0.9, 3614.0], [1.0, 3729.0], [1.1, 3746.0], [1.2, 3811.0], [1.3, 3835.0], [1.4, 3887.0], [1.5, 3941.0], [1.6, 3991.0], [1.7, 4029.0], [1.8, 4105.0], [1.9, 4161.0], [2.0, 4225.0], [2.1, 4268.0], [2.2, 4338.0], [2.3, 4373.0], [2.4, 4432.0], [2.5, 4462.0], [2.6, 4574.0], [2.7, 4668.0], [2.8, 4762.0], [2.9, 4879.0], [3.0, 4937.0], [3.1, 5000.0], [3.2, 5063.0], [3.3, 5095.0], [3.4, 5147.0], [3.5, 5170.0], [3.6, 5207.0], [3.7, 5271.0], [3.8, 5298.0], [3.9, 5347.0], [4.0, 5377.0], [4.1, 5422.0], [4.2, 5459.0], [4.3, 5510.0], [4.4, 5530.0], [4.5, 5568.0], [4.6, 5587.0], [4.7, 5623.0], [4.8, 5652.0], [4.9, 5690.0], [5.0, 5705.0], [5.1, 5736.0], [5.2, 5767.0], [5.3, 5789.0], [5.4, 5812.0], [5.5, 5855.0], [5.6, 5886.0], [5.7, 5906.0], [5.8, 5943.0], [5.9, 5991.0], [6.0, 6028.0], [6.1, 6053.0], [6.2, 6079.0], [6.3, 6118.0], [6.4, 6143.0], [6.5, 6187.0], [6.6, 6215.0], [6.7, 6254.0], [6.8, 6280.0], [6.9, 6299.0], [7.0, 6340.0], [7.1, 6367.0], [7.2, 6404.0], [7.3, 6457.0], [7.4, 6485.0], [7.5, 6536.0], [7.6, 6562.0], [7.7, 6582.0], [7.8, 6611.0], [7.9, 6621.0], [8.0, 6654.0], [8.1, 6673.0], [8.2, 6698.0], [8.3, 6715.0], [8.4, 6741.0], [8.5, 6765.0], [8.6, 6789.0], [8.7, 6804.0], [8.8, 6826.0], [8.9, 6852.0], [9.0, 6881.0], [9.1, 6901.0], [9.2, 6939.0], [9.3, 6958.0], [9.4, 6984.0], [9.5, 6996.0], [9.6, 7024.0], [9.7, 7051.0], [9.8, 7062.0], [9.9, 7073.0], [10.0, 7099.0], [10.1, 7113.0], [10.2, 7129.0], [10.3, 7142.0], [10.4, 7162.0], [10.5, 7177.0], [10.6, 7204.0], [10.7, 7230.0], [10.8, 7263.0], [10.9, 7282.0], [11.0, 7310.0], [11.1, 7328.0], [11.2, 7347.0], [11.3, 7368.0], [11.4, 7412.0], [11.5, 7439.0], [11.6, 7451.0], [11.7, 7491.0], [11.8, 7514.0], [11.9, 7531.0], [12.0, 7568.0], [12.1, 7580.0], [12.2, 7618.0], [12.3, 7630.0], [12.4, 7678.0], [12.5, 7689.0], [12.6, 7701.0], [12.7, 7731.0], [12.8, 7760.0], [12.9, 7814.0], [13.0, 7822.0], [13.1, 7878.0], [13.2, 7899.0], [13.3, 7938.0], [13.4, 7971.0], [13.5, 8011.0], [13.6, 8035.0], [13.7, 8055.0], [13.8, 8085.0], [13.9, 8116.0], [14.0, 8140.0], [14.1, 8167.0], [14.2, 8206.0], [14.3, 8224.0], [14.4, 8258.0], [14.5, 8292.0], [14.6, 8315.0], [14.7, 8366.0], [14.8, 8384.0], [14.9, 8394.0], [15.0, 8419.0], [15.1, 8444.0], [15.2, 8480.0], [15.3, 8522.0], [15.4, 8547.0], [15.5, 8616.0], [15.6, 8638.0], [15.7, 8685.0], [15.8, 8702.0], [15.9, 8735.0], [16.0, 8757.0], [16.1, 8769.0], [16.2, 8792.0], [16.3, 8830.0], [16.4, 8868.0], [16.5, 8930.0], [16.6, 8961.0], [16.7, 8985.0], [16.8, 9015.0], [16.9, 9047.0], [17.0, 9066.0], [17.1, 9102.0], [17.2, 9134.0], [17.3, 9201.0], [17.4, 9269.0], [17.5, 9285.0], [17.6, 9331.0], [17.7, 9396.0], [17.8, 9442.0], [17.9, 9460.0], [18.0, 9490.0], [18.1, 9500.0], [18.2, 9549.0], [18.3, 9560.0], [18.4, 9589.0], [18.5, 9608.0], [18.6, 9640.0], [18.7, 9665.0], [18.8, 9691.0], [18.9, 9731.0], [19.0, 9757.0], [19.1, 9812.0], [19.2, 9831.0], [19.3, 9858.0], [19.4, 9892.0], [19.5, 9928.0], [19.6, 9976.0], [19.7, 10001.0], [19.8, 10017.0], [19.9, 10043.0], [20.0, 10059.0], [20.1, 10066.0], [20.2, 10084.0], [20.3, 10093.0], [20.4, 10106.0], [20.5, 10142.0], [20.6, 10156.0], [20.7, 10186.0], [20.8, 10220.0], [20.9, 10238.0], [21.0, 10268.0], [21.1, 10276.0], [21.2, 10328.0], [21.3, 10362.0], [21.4, 10376.0], [21.5, 10426.0], [21.6, 10448.0], [21.7, 10467.0], [21.8, 10487.0], [21.9, 10512.0], [22.0, 10538.0], [22.1, 10583.0], [22.2, 10611.0], [22.3, 10631.0], [22.4, 10649.0], [22.5, 10672.0], [22.6, 10686.0], [22.7, 10730.0], [22.8, 10740.0], [22.9, 10757.0], [23.0, 10777.0], [23.1, 10801.0], [23.2, 10823.0], [23.3, 10847.0], [23.4, 10864.0], [23.5, 10887.0], [23.6, 10901.0], [23.7, 10923.0], [23.8, 10936.0], [23.9, 10957.0], [24.0, 10980.0], [24.1, 11028.0], [24.2, 11046.0], [24.3, 11076.0], [24.4, 11117.0], [24.5, 11143.0], [24.6, 11152.0], [24.7, 11172.0], [24.8, 11182.0], [24.9, 11208.0], [25.0, 11232.0], [25.1, 11252.0], [25.2, 11265.0], [25.3, 11289.0], [25.4, 11311.0], [25.5, 11349.0], [25.6, 11369.0], [25.7, 11382.0], [25.8, 11397.0], [25.9, 11436.0], [26.0, 11461.0], [26.1, 11479.0], [26.2, 11491.0], [26.3, 11520.0], [26.4, 11528.0], [26.5, 11547.0], [26.6, 11566.0], [26.7, 11577.0], [26.8, 11595.0], [26.9, 11607.0], [27.0, 11631.0], [27.1, 11641.0], [27.2, 11659.0], [27.3, 11683.0], [27.4, 11702.0], [27.5, 11715.0], [27.6, 11726.0], [27.7, 11739.0], [27.8, 11754.0], [27.9, 11792.0], [28.0, 11812.0], [28.1, 11818.0], [28.2, 11850.0], [28.3, 11870.0], [28.4, 11888.0], [28.5, 11898.0], [28.6, 11928.0], [28.7, 11940.0], [28.8, 11974.0], [28.9, 11990.0], [29.0, 12006.0], [29.1, 12015.0], [29.2, 12043.0], [29.3, 12058.0], [29.4, 12072.0], [29.5, 12093.0], [29.6, 12108.0], [29.7, 12129.0], [29.8, 12147.0], [29.9, 12192.0], [30.0, 12206.0], [30.1, 12222.0], [30.2, 12241.0], [30.3, 12245.0], [30.4, 12259.0], [30.5, 12274.0], [30.6, 12285.0], [30.7, 12296.0], [30.8, 12306.0], [30.9, 12312.0], [31.0, 12324.0], [31.1, 12337.0], [31.2, 12343.0], [31.3, 12365.0], [31.4, 12380.0], [31.5, 12395.0], [31.6, 12409.0], [31.7, 12427.0], [31.8, 12437.0], [31.9, 12446.0], [32.0, 12455.0], [32.1, 12464.0], [32.2, 12475.0], [32.3, 12487.0], [32.4, 12498.0], [32.5, 12512.0], [32.6, 12521.0], [32.7, 12527.0], [32.8, 12538.0], [32.9, 12553.0], [33.0, 12557.0], [33.1, 12569.0], [33.2, 12578.0], [33.3, 12591.0], [33.4, 12604.0], [33.5, 12611.0], [33.6, 12630.0], [33.7, 12640.0], [33.8, 12657.0], [33.9, 12662.0], [34.0, 12672.0], [34.1, 12690.0], [34.2, 12699.0], [34.3, 12708.0], [34.4, 12717.0], [34.5, 12726.0], [34.6, 12735.0], [34.7, 12742.0], [34.8, 12749.0], [34.9, 12760.0], [35.0, 12773.0], [35.1, 12784.0], [35.2, 12795.0], [35.3, 12797.0], [35.4, 12809.0], [35.5, 12821.0], [35.6, 12829.0], [35.7, 12838.0], [35.8, 12848.0], [35.9, 12855.0], [36.0, 12859.0], [36.1, 12864.0], [36.2, 12874.0], [36.3, 12885.0], [36.4, 12898.0], [36.5, 12911.0], [36.6, 12921.0], [36.7, 12927.0], [36.8, 12937.0], [36.9, 12945.0], [37.0, 12956.0], [37.1, 12967.0], [37.2, 12974.0], [37.3, 12979.0], [37.4, 12986.0], [37.5, 13002.0], [37.6, 13011.0], [37.7, 13020.0], [37.8, 13027.0], [37.9, 13034.0], [38.0, 13038.0], [38.1, 13046.0], [38.2, 13055.0], [38.3, 13063.0], [38.4, 13070.0], [38.5, 13084.0], [38.6, 13090.0], [38.7, 13101.0], [38.8, 13110.0], [38.9, 13120.0], [39.0, 13125.0], [39.1, 13132.0], [39.2, 13139.0], [39.3, 13147.0], [39.4, 13154.0], [39.5, 13162.0], [39.6, 13166.0], [39.7, 13176.0], [39.8, 13190.0], [39.9, 13196.0], [40.0, 13206.0], [40.1, 13215.0], [40.2, 13224.0], [40.3, 13231.0], [40.4, 13245.0], [40.5, 13254.0], [40.6, 13257.0], [40.7, 13265.0], [40.8, 13272.0], [40.9, 13286.0], [41.0, 13291.0], [41.1, 13297.0], [41.2, 13302.0], [41.3, 13310.0], [41.4, 13319.0], [41.5, 13327.0], [41.6, 13337.0], [41.7, 13348.0], [41.8, 13363.0], [41.9, 13376.0], [42.0, 13384.0], [42.1, 13397.0], [42.2, 13403.0], [42.3, 13407.0], [42.4, 13419.0], [42.5, 13430.0], [42.6, 13439.0], [42.7, 13453.0], [42.8, 13458.0], [42.9, 13471.0], [43.0, 13486.0], [43.1, 13494.0], [43.2, 13506.0], [43.3, 13524.0], [43.4, 13539.0], [43.5, 13544.0], [43.6, 13551.0], [43.7, 13556.0], [43.8, 13565.0], [43.9, 13573.0], [44.0, 13580.0], [44.1, 13601.0], [44.2, 13612.0], [44.3, 13620.0], [44.4, 13628.0], [44.5, 13638.0], [44.6, 13653.0], [44.7, 13665.0], [44.8, 13685.0], [44.9, 13692.0], [45.0, 13706.0], [45.1, 13715.0], [45.2, 13718.0], [45.3, 13729.0], [45.4, 13736.0], [45.5, 13745.0], [45.6, 13751.0], [45.7, 13759.0], [45.8, 13772.0], [45.9, 13792.0], [46.0, 13797.0], [46.1, 13809.0], [46.2, 13816.0], [46.3, 13826.0], [46.4, 13837.0], [46.5, 13844.0], [46.6, 13853.0], [46.7, 13859.0], [46.8, 13871.0], [46.9, 13874.0], [47.0, 13883.0], [47.1, 13891.0], [47.2, 13895.0], [47.3, 13905.0], [47.4, 13912.0], [47.5, 13917.0], [47.6, 13921.0], [47.7, 13923.0], [47.8, 13931.0], [47.9, 13943.0], [48.0, 13949.0], [48.1, 13957.0], [48.2, 13962.0], [48.3, 13973.0], [48.4, 13981.0], [48.5, 13992.0], [48.6, 13997.0], [48.7, 14001.0], [48.8, 14003.0], [48.9, 14013.0], [49.0, 14018.0], [49.1, 14022.0], [49.2, 14033.0], [49.3, 14039.0], [49.4, 14043.0], [49.5, 14048.0], [49.6, 14051.0], [49.7, 14062.0], [49.8, 14074.0], [49.9, 14084.0], [50.0, 14093.0], [50.1, 14104.0], [50.2, 14109.0], [50.3, 14113.0], [50.4, 14114.0], [50.5, 14117.0], [50.6, 14122.0], [50.7, 14129.0], [50.8, 14134.0], [50.9, 14137.0], [51.0, 14143.0], [51.1, 14150.0], [51.2, 14153.0], [51.3, 14158.0], [51.4, 14166.0], [51.5, 14171.0], [51.6, 14177.0], [51.7, 14179.0], [51.8, 14190.0], [51.9, 14195.0], [52.0, 14202.0], [52.1, 14204.0], [52.2, 14207.0], [52.3, 14210.0], [52.4, 14214.0], [52.5, 14218.0], [52.6, 14224.0], [52.7, 14229.0], [52.8, 14233.0], [52.9, 14236.0], [53.0, 14242.0], [53.1, 14249.0], [53.2, 14254.0], [53.3, 14260.0], [53.4, 14269.0], [53.5, 14271.0], [53.6, 14275.0], [53.7, 14282.0], [53.8, 14287.0], [53.9, 14292.0], [54.0, 14297.0], [54.1, 14300.0], [54.2, 14308.0], [54.3, 14313.0], [54.4, 14319.0], [54.5, 14324.0], [54.6, 14326.0], [54.7, 14332.0], [54.8, 14336.0], [54.9, 14339.0], [55.0, 14344.0], [55.1, 14349.0], [55.2, 14351.0], [55.3, 14355.0], [55.4, 14356.0], [55.5, 14360.0], [55.6, 14367.0], [55.7, 14369.0], [55.8, 14372.0], [55.9, 14378.0], [56.0, 14379.0], [56.1, 14384.0], [56.2, 14385.0], [56.3, 14391.0], [56.4, 14395.0], [56.5, 14399.0], [56.6, 14403.0], [56.7, 14410.0], [56.8, 14412.0], [56.9, 14416.0], [57.0, 14417.0], [57.1, 14420.0], [57.2, 14422.0], [57.3, 14425.0], [57.4, 14430.0], [57.5, 14435.0], [57.6, 14440.0], [57.7, 14445.0], [57.8, 14448.0], [57.9, 14450.0], [58.0, 14455.0], [58.1, 14459.0], [58.2, 14461.0], [58.3, 14463.0], [58.4, 14468.0], [58.5, 14470.0], [58.6, 14474.0], [58.7, 14476.0], [58.8, 14479.0], [58.9, 14485.0], [59.0, 14487.0], [59.1, 14490.0], [59.2, 14494.0], [59.3, 14498.0], [59.4, 14501.0], [59.5, 14502.0], [59.6, 14508.0], [59.7, 14510.0], [59.8, 14515.0], [59.9, 14518.0], [60.0, 14522.0], [60.1, 14524.0], [60.2, 14529.0], [60.3, 14531.0], [60.4, 14533.0], [60.5, 14539.0], [60.6, 14547.0], [60.7, 14552.0], [60.8, 14556.0], [60.9, 14559.0], [61.0, 14561.0], [61.1, 14562.0], [61.2, 14566.0], [61.3, 14568.0], [61.4, 14572.0], [61.5, 14575.0], [61.6, 14578.0], [61.7, 14581.0], [61.8, 14584.0], [61.9, 14589.0], [62.0, 14592.0], [62.1, 14597.0], [62.2, 14599.0], [62.3, 14601.0], [62.4, 14607.0], [62.5, 14611.0], [62.6, 14614.0], [62.7, 14618.0], [62.8, 14620.0], [62.9, 14623.0], [63.0, 14628.0], [63.1, 14631.0], [63.2, 14634.0], [63.3, 14637.0], [63.4, 14639.0], [63.5, 14643.0], [63.6, 14648.0], [63.7, 14651.0], [63.8, 14654.0], [63.9, 14656.0], [64.0, 14658.0], [64.1, 14661.0], [64.2, 14664.0], [64.3, 14665.0], [64.4, 14670.0], [64.5, 14674.0], [64.6, 14678.0], [64.7, 14680.0], [64.8, 14684.0], [64.9, 14686.0], [65.0, 14689.0], [65.1, 14693.0], [65.2, 14696.0], [65.3, 14699.0], [65.4, 14701.0], [65.5, 14704.0], [65.6, 14706.0], [65.7, 14709.0], [65.8, 14712.0], [65.9, 14718.0], [66.0, 14720.0], [66.1, 14721.0], [66.2, 14724.0], [66.3, 14726.0], [66.4, 14729.0], [66.5, 14733.0], [66.6, 14736.0], [66.7, 14740.0], [66.8, 14744.0], [66.9, 14747.0], [67.0, 14749.0], [67.1, 14752.0], [67.2, 14755.0], [67.3, 14756.0], [67.4, 14761.0], [67.5, 14764.0], [67.6, 14765.0], [67.7, 14767.0], [67.8, 14771.0], [67.9, 14773.0], [68.0, 14776.0], [68.1, 14778.0], [68.2, 14780.0], [68.3, 14781.0], [68.4, 14787.0], [68.5, 14789.0], [68.6, 14794.0], [68.7, 14797.0], [68.8, 14800.0], [68.9, 14806.0], [69.0, 14814.0], [69.1, 14820.0], [69.2, 14823.0], [69.3, 14828.0], [69.4, 14831.0], [69.5, 14834.0], [69.6, 14837.0], [69.7, 14840.0], [69.8, 14844.0], [69.9, 14846.0], [70.0, 14850.0], [70.1, 14853.0], [70.2, 14858.0], [70.3, 14859.0], [70.4, 14863.0], [70.5, 14867.0], [70.6, 14869.0], [70.7, 14870.0], [70.8, 14873.0], [70.9, 14874.0], [71.0, 14880.0], [71.1, 14881.0], [71.2, 14882.0], [71.3, 14887.0], [71.4, 14889.0], [71.5, 14894.0], [71.6, 14895.0], [71.7, 14897.0], [71.8, 14901.0], [71.9, 14904.0], [72.0, 14907.0], [72.1, 14911.0], [72.2, 14914.0], [72.3, 14919.0], [72.4, 14924.0], [72.5, 14928.0], [72.6, 14930.0], [72.7, 14933.0], [72.8, 14937.0], [72.9, 14941.0], [73.0, 14946.0], [73.1, 14951.0], [73.2, 14954.0], [73.3, 14957.0], [73.4, 14960.0], [73.5, 14964.0], [73.6, 14969.0], [73.7, 14972.0], [73.8, 14974.0], [73.9, 14977.0], [74.0, 14980.0], [74.1, 14985.0], [74.2, 14988.0], [74.3, 14992.0], [74.4, 14995.0], [74.5, 15000.0], [74.6, 15002.0], [74.7, 15006.0], [74.8, 15011.0], [74.9, 15016.0], [75.0, 15019.0], [75.1, 15021.0], [75.2, 15027.0], [75.3, 15032.0], [75.4, 15033.0], [75.5, 15037.0], [75.6, 15041.0], [75.7, 15045.0], [75.8, 15049.0], [75.9, 15050.0], [76.0, 15054.0], [76.1, 15056.0], [76.2, 15059.0], [76.3, 15061.0], [76.4, 15065.0], [76.5, 15068.0], [76.6, 15072.0], [76.7, 15076.0], [76.8, 15080.0], [76.9, 15082.0], [77.0, 15084.0], [77.1, 15086.0], [77.2, 15088.0], [77.3, 15095.0], [77.4, 15096.0], [77.5, 15099.0], [77.6, 15102.0], [77.7, 15103.0], [77.8, 15108.0], [77.9, 15109.0], [78.0, 15115.0], [78.1, 15118.0], [78.2, 15121.0], [78.3, 15122.0], [78.4, 15124.0], [78.5, 15127.0], [78.6, 15130.0], [78.7, 15136.0], [78.8, 15140.0], [78.9, 15142.0], [79.0, 15143.0], [79.1, 15145.0], [79.2, 15147.0], [79.3, 15149.0], [79.4, 15154.0], [79.5, 15159.0], [79.6, 15164.0], [79.7, 15169.0], [79.8, 15172.0], [79.9, 15175.0], [80.0, 15178.0], [80.1, 15184.0], [80.2, 15188.0], [80.3, 15191.0], [80.4, 15194.0], [80.5, 15199.0], [80.6, 15203.0], [80.7, 15205.0], [80.8, 15208.0], [80.9, 15213.0], [81.0, 15217.0], [81.1, 15219.0], [81.2, 15222.0], [81.3, 15228.0], [81.4, 15233.0], [81.5, 15239.0], [81.6, 15243.0], [81.7, 15247.0], [81.8, 15248.0], [81.9, 15254.0], [82.0, 15256.0], [82.1, 15259.0], [82.2, 15264.0], [82.3, 15268.0], [82.4, 15270.0], [82.5, 15274.0], [82.6, 15278.0], [82.7, 15282.0], [82.8, 15285.0], [82.9, 15291.0], [83.0, 15295.0], [83.1, 15298.0], [83.2, 15300.0], [83.3, 15302.0], [83.4, 15308.0], [83.5, 15311.0], [83.6, 15314.0], [83.7, 15316.0], [83.8, 15319.0], [83.9, 15322.0], [84.0, 15326.0], [84.1, 15328.0], [84.2, 15331.0], [84.3, 15333.0], [84.4, 15340.0], [84.5, 15342.0], [84.6, 15347.0], [84.7, 15350.0], [84.8, 15354.0], [84.9, 15358.0], [85.0, 15362.0], [85.1, 15364.0], [85.2, 15369.0], [85.3, 15375.0], [85.4, 15384.0], [85.5, 15386.0], [85.6, 15391.0], [85.7, 15395.0], [85.8, 15398.0], [85.9, 15401.0], [86.0, 15404.0], [86.1, 15407.0], [86.2, 15411.0], [86.3, 15415.0], [86.4, 15420.0], [86.5, 15422.0], [86.6, 15426.0], [86.7, 15427.0], [86.8, 15431.0], [86.9, 15435.0], [87.0, 15438.0], [87.1, 15440.0], [87.2, 15445.0], [87.3, 15452.0], [87.4, 15455.0], [87.5, 15460.0], [87.6, 15465.0], [87.7, 15468.0], [87.8, 15472.0], [87.9, 15476.0], [88.0, 15481.0], [88.1, 15484.0], [88.2, 15489.0], [88.3, 15493.0], [88.4, 15495.0], [88.5, 15500.0], [88.6, 15506.0], [88.7, 15516.0], [88.8, 15517.0], [88.9, 15524.0], [89.0, 15531.0], [89.1, 15540.0], [89.2, 15543.0], [89.3, 15545.0], [89.4, 15552.0], [89.5, 15556.0], [89.6, 15564.0], [89.7, 15566.0], [89.8, 15572.0], [89.9, 15581.0], [90.0, 15584.0], [90.1, 15590.0], [90.2, 15595.0], [90.3, 15603.0], [90.4, 15608.0], [90.5, 15614.0], [90.6, 15629.0], [90.7, 15632.0], [90.8, 15637.0], [90.9, 15649.0], [91.0, 15656.0], [91.1, 15665.0], [91.2, 15672.0], [91.3, 15679.0], [91.4, 15688.0], [91.5, 15717.0], [91.6, 15726.0], [91.7, 15733.0], [91.8, 15743.0], [91.9, 15753.0], [92.0, 15768.0], [92.1, 15780.0], [92.2, 15796.0], [92.3, 15812.0], [92.4, 15830.0], [92.5, 15847.0], [92.6, 15863.0], [92.7, 15871.0], [92.8, 15882.0], [92.9, 15893.0], [93.0, 15926.0], [93.1, 15938.0], [93.2, 15961.0], [93.3, 15991.0], [93.4, 16034.0], [93.5, 16058.0], [93.6, 16091.0], [93.7, 16109.0], [93.8, 16142.0], [93.9, 16160.0], [94.0, 16194.0], [94.1, 16211.0], [94.2, 16248.0], [94.3, 16285.0], [94.4, 16314.0], [94.5, 16328.0], [94.6, 16353.0], [94.7, 16383.0], [94.8, 16427.0], [94.9, 16475.0], [95.0, 16531.0], [95.1, 16571.0], [95.2, 16629.0], [95.3, 16663.0], [95.4, 16715.0], [95.5, 16794.0], [95.6, 16910.0], [95.7, 16975.0], [95.8, 17029.0], [95.9, 17039.0], [96.0, 17105.0], [96.1, 17124.0], [96.2, 17142.0], [96.3, 17200.0], [96.4, 17235.0], [96.5, 17272.0], [96.6, 17335.0], [96.7, 17414.0], [96.8, 17463.0], [96.9, 17510.0], [97.0, 17574.0], [97.1, 17608.0], [97.2, 17672.0], [97.3, 17741.0], [97.4, 17759.0], [97.5, 17774.0], [97.6, 17802.0], [97.7, 17851.0], [97.8, 17863.0], [97.9, 17969.0], [98.0, 17994.0], [98.1, 18018.0], [98.2, 18055.0], [98.3, 18083.0], [98.4, 18122.0], [98.5, 18163.0], [98.6, 18165.0], [98.7, 18177.0], [98.8, 18186.0], [98.9, 18195.0], [99.0, 18208.0], [99.1, 18218.0], [99.2, 18225.0], [99.3, 18238.0], [99.4, 18304.0], [99.5, 18440.0], [99.6, 18900.0], [99.7, 21099.0], [99.8, 22061.0], [99.9, 23204.0]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 225.0, "series": [{"data": [[100.0, 7.0], [200.0, 1.0], [600.0, 1.0], [700.0, 3.0], [800.0, 4.0], [900.0, 2.0], [1000.0, 2.0], [1100.0, 1.0], [1300.0, 2.0], [1500.0, 1.0], [2000.0, 4.0], [2100.0, 1.0], [2300.0, 2.0], [2600.0, 7.0], [2800.0, 2.0], [2700.0, 5.0], [2900.0, 1.0], [3000.0, 1.0], [3300.0, 4.0], [3200.0, 2.0], [3400.0, 1.0], [3500.0, 4.0], [3700.0, 13.0], [3600.0, 3.0], [3800.0, 19.0], [3900.0, 13.0], [4000.0, 11.0], [4200.0, 15.0], [4300.0, 10.0], [4100.0, 9.0], [4400.0, 13.0], [4500.0, 7.0], [4600.0, 7.0], [4700.0, 7.0], [4800.0, 6.0], [5000.0, 14.0], [5100.0, 18.0], [4900.0, 10.0], [5200.0, 15.0], [5300.0, 16.0], [5400.0, 16.0], [5500.0, 21.0], [5600.0, 21.0], [5800.0, 23.0], [5700.0, 25.0], [6100.0, 20.0], [5900.0, 15.0], [6000.0, 23.0], [6300.0, 17.0], [6200.0, 22.0], [6400.0, 16.0], [6500.0, 22.0], [6600.0, 29.0], [6700.0, 32.0], [6800.0, 25.0], [6900.0, 29.0], [7100.0, 37.0], [7000.0, 32.0], [7400.0, 24.0], [7200.0, 25.0], [7300.0, 27.0], [7600.0, 31.0], [7500.0, 24.0], [7900.0, 19.0], [7700.0, 19.0], [7800.0, 21.0], [8100.0, 19.0], [8000.0, 24.0], [8200.0, 24.0], [8300.0, 26.0], [8400.0, 19.0], [8700.0, 28.0], [8500.0, 18.0], [8600.0, 18.0], [9100.0, 14.0], [8900.0, 22.0], [8800.0, 15.0], [9000.0, 20.0], [9200.0, 17.0], [9400.0, 24.0], [9600.0, 23.0], [9700.0, 16.0], [9500.0, 26.0], [9300.0, 10.0], [10000.0, 43.0], [10200.0, 26.0], [10100.0, 26.0], [9800.0, 22.0], [9900.0, 18.0], [10400.0, 26.0], [10500.0, 24.0], [10600.0, 30.0], [10700.0, 30.0], [10300.0, 17.0], [10900.0, 33.0], [11200.0, 32.0], [11100.0, 33.0], [10800.0, 31.0], [11000.0, 18.0], [11300.0, 30.0], [11500.0, 40.0], [11600.0, 36.0], [11700.0, 34.0], [11400.0, 27.0], [11800.0, 38.0], [11900.0, 28.0], [12200.0, 52.0], [12000.0, 40.0], [12100.0, 26.0], [12500.0, 62.0], [12400.0, 56.0], [12700.0, 70.0], [12300.0, 52.0], [12600.0, 57.0], [13200.0, 80.0], [13000.0, 77.0], [13100.0, 80.0], [13300.0, 66.0], [12900.0, 71.0], [12800.0, 72.0], [13400.0, 66.0], [13600.0, 54.0], [13700.0, 73.0], [13800.0, 78.0], [13500.0, 60.0], [13900.0, 92.0], [14000.0, 93.0], [14100.0, 124.0], [14200.0, 135.0], [14300.0, 160.0], [14400.0, 184.0], [14500.0, 188.0], [14600.0, 203.0], [14700.0, 225.0], [14800.0, 193.0], [14900.0, 178.0], [15000.0, 199.0], [15100.0, 193.0], [15200.0, 171.0], [15300.0, 175.0], [15400.0, 174.0], [15500.0, 115.0], [15600.0, 77.0], [15700.0, 50.0], [15800.0, 46.0], [15900.0, 25.0], [16000.0, 20.0], [16200.0, 19.0], [16300.0, 29.0], [16100.0, 28.0], [17200.0, 17.0], [16400.0, 9.0], [16600.0, 13.0], [16800.0, 6.0], [17000.0, 15.0], [17400.0, 15.0], [18200.0, 30.0], [17600.0, 10.0], [17800.0, 18.0], [18000.0, 18.0], [18400.0, 4.0], [18800.0, 1.0], [20400.0, 1.0], [21000.0, 1.0], [20600.0, 1.0], [22000.0, 1.0], [21600.0, 1.0], [21800.0, 1.0], [22400.0, 1.0], [23000.0, 1.0], [23200.0, 1.0], [24400.0, 1.0], [25200.0, 2.0], [16500.0, 15.0], [16700.0, 10.0], [16900.0, 11.0], [17100.0, 20.0], [17300.0, 7.0], [17500.0, 12.0], [17700.0, 23.0], [17900.0, 12.0], [18100.0, 39.0], [18300.0, 5.0], [18500.0, 2.0], [18700.0, 1.0], [18900.0, 2.0], [19100.0, 1.0], [19900.0, 1.0], [20500.0, 1.0], [21100.0, 2.0], [21900.0, 1.0], [22300.0, 1.0], [22500.0, 1.0], [23100.0, 1.0], [22700.0, 1.0], [23900.0, 2.0], [24900.0, 1.0]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 25200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 8.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6489.0, "series": [{"data": [[0.0, 8.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 15.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6489.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 171.56140350877197, "minX": 1.61255796E12, "maxY": 400.0, "series": [{"data": [[1.61255802E12, 400.0], [1.6125582E12, 398.79518950437324], [1.61255808E12, 400.0], [1.61255826E12, 171.56140350877197], [1.61255796E12, 400.0], [1.61255814E12, 400.0]], "isOverall": false, "label": "Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61255826E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6525.0, "minX": 1.0, "maxY": 16100.0, "series": [{"data": [[2.0, 9605.0], [3.0, 10093.0], [4.0, 10066.0], [5.0, 10362.0], [6.0, 10057.0], [8.0, 10340.5], [9.0, 9666.0], [10.0, 10619.0], [13.0, 9936.0], [15.0, 10698.5], [17.0, 10655.5], [18.0, 10077.0], [19.0, 9858.0], [20.0, 9665.0], [21.0, 10076.0], [22.0, 10061.0], [23.0, 13399.0], [25.0, 11338.5], [27.0, 10151.0], [28.0, 11254.0], [29.0, 10119.0], [31.0, 10773.0], [33.0, 11287.0], [32.0, 11373.0], [35.0, 11184.0], [34.0, 11493.0], [37.0, 10876.0], [36.0, 10328.0], [39.0, 11149.0], [38.0, 10901.0], [41.0, 11344.5], [43.0, 11451.0], [42.0, 11217.0], [45.0, 11712.0], [44.0, 12014.0], [47.0, 11727.0], [46.0, 11235.0], [49.0, 11808.0], [48.0, 11715.0], [51.0, 11848.0], [50.0, 12044.0], [53.0, 12004.0], [52.0, 11885.0], [55.0, 11237.0], [54.0, 11990.0], [57.0, 11983.0], [56.0, 12164.0], [58.0, 11537.0], [61.0, 11945.0], [60.0, 12312.0], [62.0, 11978.0], [66.0, 11591.0], [65.0, 11528.0], [64.0, 11726.0], [71.0, 12315.0], [70.0, 11664.0], [69.0, 12382.0], [68.0, 12377.5], [75.0, 12048.0], [73.0, 12379.0], [72.0, 12391.0], [79.0, 12495.0], [78.0, 12269.0], [77.0, 12286.0], [76.0, 12283.0], [83.0, 12635.0], [82.0, 11980.0], [81.0, 11818.0], [80.0, 12503.0], [87.0, 12725.0], [86.0, 12662.0], [85.0, 12320.0], [91.0, 12772.0], [90.0, 12710.0], [89.0, 12475.0], [88.0, 12658.0], [95.0, 12060.0], [94.0, 12135.5], [92.0, 12760.0], [99.0, 12622.0], [98.0, 12690.0], [97.0, 11621.0], [96.0, 12404.0], [103.0, 12513.0], [102.0, 12853.0], [101.0, 12604.0], [100.0, 12723.0], [107.0, 12427.0], [106.0, 12859.0], [105.0, 12658.0], [104.0, 12745.0], [111.0, 12447.0], [110.0, 12611.0], [109.0, 12837.0], [108.0, 12794.0], [115.0, 12773.0], [114.0, 12727.0], [113.0, 12870.0], [112.0, 12821.0], [119.0, 12740.0], [118.0, 12508.0], [117.0, 12493.0], [116.0, 12855.0], [123.0, 12532.0], [122.0, 12568.0], [121.0, 13076.0], [120.0, 12503.0], [126.0, 13015.0], [125.0, 13023.0], [124.0, 12515.0], [135.0, 12891.0], [134.0, 12708.0], [133.0, 13072.0], [132.0, 12986.0], [131.0, 13077.5], [129.0, 12705.0], [128.0, 12668.5], [143.0, 12873.0], [141.0, 13058.0], [140.0, 12831.0], [139.0, 12870.0], [138.0, 12822.0], [137.0, 12858.0], [136.0, 12410.0], [151.0, 12968.0], [150.0, 12846.0], [149.0, 13030.0], [148.0, 13054.0], [147.0, 12890.0], [146.0, 12858.0], [145.0, 12927.0], [144.0, 12970.0], [159.0, 13110.0], [158.0, 12838.0], [157.0, 12930.0], [156.0, 12822.0], [155.0, 12912.0], [154.0, 12848.0], [153.0, 13125.0], [152.0, 12809.0], [167.0, 12906.0], [166.0, 13122.0], [165.0, 12936.0], [164.0, 12941.0], [163.0, 12921.0], [162.0, 13211.0], [161.0, 12981.0], [160.0, 12939.0], [175.0, 12996.0], [174.0, 13011.0], [173.0, 13037.0], [172.0, 14880.0], [171.0, 12874.0], [170.0, 13037.0], [169.0, 13058.0], [168.0, 12819.0], [183.0, 12602.0], [182.0, 13341.0], [181.0, 13282.0], [180.0, 13205.0], [179.0, 12518.0], [178.0, 12979.0], [177.0, 13115.0], [176.0, 12530.0], [191.0, 12603.0], [190.0, 13059.0], [189.0, 13006.0], [188.0, 13146.0], [187.0, 13295.0], [186.0, 13306.0], [185.0, 12627.0], [184.0, 13227.0], [199.0, 13166.0], [198.0, 13160.0], [197.0, 13235.0], [196.0, 12802.0], [195.0, 12952.0], [194.0, 13170.0], [193.0, 13265.0], [192.0, 13040.0], [207.0, 13191.0], [206.0, 12525.0], [205.0, 13254.0], [204.0, 12716.0], [203.0, 13245.0], [202.0, 13219.0], [201.0, 12591.0], [200.0, 12716.0], [215.0, 13206.0], [214.0, 13132.0], [213.0, 12554.0], [212.0, 13147.0], [211.0, 12516.0], [210.0, 13126.0], [209.0, 13190.0], [208.0, 12496.0], [223.0, 12962.0], [221.0, 13033.0], [220.0, 12774.0], [218.0, 13018.0], [217.0, 12462.0], [216.0, 13032.0], [231.0, 12527.0], [230.0, 12552.0], [229.0, 12845.0], [228.0, 13103.0], [227.0, 13016.0], [226.0, 12478.0], [225.0, 13186.0], [224.0, 12439.0], [239.0, 12771.0], [238.0, 12776.0], [237.0, 12812.0], [236.0, 12447.0], [235.0, 12463.0], [234.0, 12445.0], [233.0, 12855.0], [232.0, 12512.0], [247.0, 12723.0], [246.0, 12241.0], [245.0, 12277.0], [244.0, 12336.0], [243.0, 12371.0], [242.0, 12329.0], [241.0, 12318.0], [240.0, 12733.0], [255.0, 12260.0], [254.0, 12741.0], [253.0, 12215.0], [252.0, 12253.0], [251.0, 12773.0], [250.0, 12580.0], [249.0, 12294.0], [248.0, 12326.0], [270.0, 12433.0], [271.0, 12234.0], [269.0, 12338.0], [268.0, 12578.0], [267.0, 12331.0], [266.0, 12425.0], [265.0, 12524.0], [264.0, 12435.0], [263.0, 12640.0], [257.0, 12159.0], [256.0, 12679.0], [259.0, 12633.0], [258.0, 12679.0], [262.0, 12559.0], [261.0, 12538.0], [260.0, 12425.0], [286.0, 11591.0], [287.0, 11905.0], [285.0, 11618.0], [284.0, 11641.0], [283.0, 11832.0], [282.0, 11659.0], [281.0, 11697.0], [280.0, 11740.0], [279.0, 12031.0], [273.0, 12395.0], [272.0, 12015.0], [275.0, 12427.0], [274.0, 11928.0], [278.0, 11739.0], [277.0, 11967.0], [276.0, 12108.0], [302.0, 11152.0], [303.0, 10936.0], [301.0, 11077.0], [300.0, 11117.0], [299.0, 11178.0], [298.0, 11302.0], [297.0, 11143.0], [296.0, 11202.0], [295.0, 11381.0], [289.0, 11747.0], [288.0, 11556.0], [291.0, 11630.0], [290.0, 11609.0], [294.0, 11420.0], [293.0, 11375.0], [292.0, 11639.0], [318.0, 10284.0], [319.0, 10043.0], [317.0, 10465.0], [316.0, 10487.0], [315.0, 10349.0], [314.0, 10425.0], [313.0, 10370.0], [312.0, 10623.0], [311.0, 10481.0], [305.0, 10862.0], [304.0, 10716.0], [307.0, 10741.0], [306.0, 10777.0], [310.0, 10425.0], [309.0, 10836.0], [308.0, 10775.0], [334.0, 9178.0], [335.0, 9062.0], [333.0, 9277.0], [332.0, 9494.0], [331.0, 9459.0], [330.0, 9470.0], [329.0, 9328.0], [328.0, 9489.0], [327.0, 9624.0], [321.0, 10062.0], [320.0, 10465.0], [323.0, 10106.0], [322.0, 10085.0], [326.0, 9613.0], [325.0, 9812.0], [324.0, 9739.0], [350.0, 7491.0], [351.0, 7342.0], [349.0, 7784.0], [348.0, 7582.0], [347.0, 7760.0], [346.0, 8125.0], [345.0, 8292.0], [344.0, 8395.0], [343.0, 8702.0], [337.0, 9148.0], [336.0, 9206.0], [339.0, 9050.0], [338.0, 9098.0], [342.0, 8765.0], [341.0, 8597.0], [340.0, 8559.0], [366.0, 6756.0], [367.0, 7024.0], [365.0, 6952.0], [364.0, 6932.0], [363.0, 6988.0], [362.0, 6989.0], [361.0, 7118.0], [360.0, 7237.0], [359.0, 7264.0], [353.0, 7367.0], [352.0, 7514.0], [355.0, 7567.0], [354.0, 7137.0], [358.0, 7056.0], [357.0, 7300.0], [356.0, 7444.0], [382.0, 6807.0], [383.0, 6878.0], [381.0, 7105.0], [380.0, 6700.0], [379.0, 6792.0], [378.0, 7186.0], [377.0, 10400.0], [376.0, 7043.0], [375.0, 7242.0], [369.0, 6984.0], [368.0, 6966.0], [371.0, 6656.0], [370.0, 6525.0], [374.0, 6696.0], [373.0, 7043.0], [372.0, 7073.0], [398.0, 8079.0], [399.0, 8055.0], [397.0, 7339.0], [396.0, 8116.0], [395.0, 7930.0], [394.0, 7848.0], [393.0, 7099.0], [392.0, 7070.0], [391.0, 7173.0], [385.0, 7572.0], [384.0, 6930.0], [387.0, 7163.0], [386.0, 7514.0], [390.0, 7147.0], [389.0, 7162.0], [388.0, 7104.0], [400.0, 12875.756093571115], [1.0, 16100.0]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[387.7489250614249, 12781.085227272755]], "isOverall": false, "label": "Home-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 400.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 741.0, "minX": 1.61255796E12, "maxY": 7286.083333333333, "series": [{"data": [[1.61255802E12, 7286.083333333333], [1.6125582E12, 7080.3], [1.61255808E12, 6501.033333333334], [1.61255826E12, 1760.25], [1.61255796E12, 4851.3], [1.61255814E12, 6067.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61255802E12, 3057.1666666666665], [1.6125582E12, 2972.6666666666665], [1.61255808E12, 2730.0], [1.61255826E12, 741.0], [1.61255796E12, 2062.6666666666665], [1.61255814E12, 2545.8333333333335]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61255826E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 11992.441520467843, "minX": 1.61255796E12, "maxY": 13880.475840336132, "series": [{"data": [[1.61255802E12, 12709.87880935505], [1.6125582E12, 12685.379737609324], [1.61255808E12, 12894.371428571443], [1.61255826E12, 11992.441520467843], [1.61255796E12, 13880.475840336132], [1.61255814E12, 12195.668936170236]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61255826E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 370.50292397660826, "minX": 1.61255796E12, "maxY": 1786.786764705884, "series": [{"data": [[1.61255802E12, 398.9766123316798], [1.6125582E12, 409.20991253644297], [1.61255808E12, 379.7158730158732], [1.61255826E12, 370.50292397660826], [1.61255796E12, 1786.786764705884], [1.61255814E12, 396.1897872340426]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61255826E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.6150793650793644, "minX": 1.61255796E12, "maxY": 16.361344537815118, "series": [{"data": [[1.61255802E12, 0.6456413890857546], [1.6125582E12, 0.650145772594752], [1.61255808E12, 0.6150793650793644], [1.61255826E12, 0.713450292397661], [1.61255796E12, 16.361344537815118], [1.61255814E12, 0.6595744680851062]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61255826E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 176.0, "minX": 1.61255796E12, "maxY": 25298.0, "series": [{"data": [[1.61255802E12, 22061.0], [1.6125582E12, 25298.0], [1.61255808E12, 22582.0], [1.61255826E12, 16100.0], [1.61255796E12, 19978.0], [1.61255814E12, 25212.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61255802E12, 15513.6], [1.6125582E12, 15067.8], [1.61255808E12, 15403.9], [1.61255826E12, 13068.1], [1.61255796E12, 18007.1], [1.61255814E12, 15011.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61255802E12, 15892.88], [1.6125582E12, 15498.939999999999], [1.61255808E12, 16453.900000000012], [1.61255826E12, 13374.06], [1.61255796E12, 18282.840000000004], [1.61255814E12, 16671.800000000003]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61255802E12, 15633.8], [1.6125582E12, 15233.05], [1.61255808E12, 15498.85], [1.61255826E12, 13190.85], [1.61255796E12, 18187.05], [1.61255814E12, 15176.8]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61255802E12, 3517.0], [1.6125582E12, 6043.0], [1.61255808E12, 4230.0], [1.61255826E12, 8559.0], [1.61255796E12, 176.0], [1.61255814E12, 5396.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61255802E12, 14349.0], [1.6125582E12, 13916.5], [1.61255808E12, 14355.0], [1.61255826E12, 12426.0], [1.61255796E12, 15685.5], [1.61255814E12, 13326.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61255826E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 6794.0, "minX": 1.0, "maxY": 18165.0, "series": [{"data": [[2.0, 9214.0], [3.0, 7162.5], [4.0, 7001.5], [5.0, 8480.0], [6.0, 9068.5], [7.0, 6794.0], [8.0, 7820.0], [9.0, 9536.0], [10.0, 9163.0], [11.0, 9338.0], [12.0, 11174.5], [13.0, 10235.0], [14.0, 12214.0], [15.0, 11658.5], [16.0, 8886.0], [17.0, 9926.0], [18.0, 9670.0], [19.0, 9677.5], [20.0, 11474.5], [21.0, 7095.5], [22.0, 13565.0], [23.0, 8703.0], [24.0, 9673.0], [25.0, 14009.5], [26.0, 12442.0], [27.0, 14019.0], [28.0, 13851.0], [29.0, 12740.5], [30.0, 8487.0], [31.0, 14171.0], [33.0, 13084.0], [34.0, 11587.5], [37.0, 14413.5], [36.0, 12703.0], [39.0, 11969.0], [40.0, 13247.5], [41.0, 14702.5], [43.0, 14519.5], [45.0, 13959.0], [46.0, 13102.5], [47.0, 13665.0], [49.0, 14656.5], [52.0, 15106.0], [53.0, 15071.5], [54.0, 15410.5], [56.0, 14749.5], [58.0, 14606.5], [59.0, 14169.0], [62.0, 14962.0], [63.0, 14051.0], [66.0, 15257.5], [67.0, 15109.0], [71.0, 14837.0], [69.0, 15145.0], [73.0, 15238.0], [74.0, 15003.5], [75.0, 14909.0], [79.0, 14582.0], [80.0, 14539.0], [82.0, 15403.0], [83.0, 14808.5], [86.0, 15749.0], [84.0, 15386.5], [90.0, 15323.5], [89.0, 12979.0], [92.0, 15580.5], [106.0, 16043.0], [119.0, 18165.0], [124.0, 11981.5], [128.0, 17365.5], [1.0, 9200.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 128.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 119.5, "minX": 1.0, "maxY": 4822.0, "series": [{"data": [[2.0, 139.5], [3.0, 135.0], [4.0, 119.5], [5.0, 162.0], [6.0, 173.0], [7.0, 166.0], [8.0, 183.0], [9.0, 163.0], [10.0, 188.5], [11.0, 197.5], [12.0, 171.0], [13.0, 190.0], [14.0, 192.0], [15.0, 204.0], [16.0, 457.0], [17.0, 242.5], [18.0, 509.0], [19.0, 277.0], [20.0, 511.0], [21.0, 517.5], [22.0, 205.5], [23.0, 502.0], [24.0, 585.5], [25.0, 275.5], [26.0, 405.5], [27.0, 314.0], [28.0, 254.5], [29.0, 378.5], [30.0, 357.5], [31.0, 277.0], [33.0, 256.0], [34.0, 584.5], [37.0, 452.0], [36.0, 564.5], [39.0, 594.0], [40.0, 560.0], [41.0, 315.5], [43.0, 363.5], [45.0, 548.0], [46.0, 602.5], [47.0, 527.0], [49.0, 416.0], [52.0, 463.5], [53.0, 333.5], [54.0, 578.5], [56.0, 382.0], [58.0, 487.0], [59.0, 498.0], [62.0, 319.5], [63.0, 537.0], [66.0, 350.5], [67.0, 526.0], [71.0, 512.5], [69.0, 467.0], [73.0, 449.5], [74.0, 445.0], [75.0, 451.0], [79.0, 531.0], [80.0, 577.0], [82.0, 444.0], [83.0, 540.5], [86.0, 492.5], [84.0, 463.0], [90.0, 427.0], [89.0, 370.0], [92.0, 572.0], [106.0, 1648.5], [119.0, 4822.0], [124.0, 517.0], [128.0, 4774.5], [1.0, 171.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 128.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.61255796E12, "maxY": 22.866666666666667, "series": [{"data": [[1.61255802E12, 21.883333333333333], [1.6125582E12, 22.55], [1.61255808E12, 19.133333333333333], [1.61255826E12, 0.05], [1.61255796E12, 22.05], [1.61255814E12, 22.866666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61255826E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 5.7, "minX": 1.61255796E12, "maxY": 23.516666666666666, "series": [{"data": [[1.61255802E12, 23.516666666666666], [1.6125582E12, 22.866666666666667], [1.61255808E12, 21.0], [1.61255826E12, 5.7], [1.61255796E12, 15.866666666666667], [1.61255814E12, 19.583333333333332]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61255826E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5.7, "minX": 1.61255796E12, "maxY": 23.516666666666666, "series": [{"data": [[1.61255802E12, 23.516666666666666], [1.6125582E12, 22.866666666666667], [1.61255808E12, 21.0], [1.61255826E12, 5.7], [1.61255796E12, 15.866666666666667], [1.61255814E12, 19.583333333333332]], "isOverall": false, "label": "Home-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61255826E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.7, "minX": 1.61255796E12, "maxY": 23.516666666666666, "series": [{"data": [[1.61255802E12, 23.516666666666666], [1.6125582E12, 22.866666666666667], [1.61255808E12, 21.0], [1.61255826E12, 5.7], [1.61255796E12, 15.866666666666667], [1.61255814E12, 19.583333333333332]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61255826E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

