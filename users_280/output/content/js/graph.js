/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 175.0, "minX": 0.0, "maxY": 14145.0, "series": [{"data": [[0.0, 175.0], [0.1, 175.0], [0.2, 176.0], [0.3, 176.0], [0.4, 176.0], [0.5, 177.0], [0.6, 178.0], [0.7, 178.0], [0.8, 179.0], [0.9, 179.0], [1.0, 180.0], [1.1, 180.0], [1.2, 181.0], [1.3, 181.0], [1.4, 181.0], [1.5, 181.0], [1.6, 181.0], [1.7, 181.0], [1.8, 182.0], [1.9, 182.0], [2.0, 182.0], [2.1, 182.0], [2.2, 182.0], [2.3, 183.0], [2.4, 183.0], [2.5, 183.0], [2.6, 183.0], [2.7, 183.0], [2.8, 184.0], [2.9, 184.0], [3.0, 184.0], [3.1, 184.0], [3.2, 184.0], [3.3, 185.0], [3.4, 186.0], [3.5, 187.0], [3.6, 187.0], [3.7, 188.0], [3.8, 189.0], [3.9, 190.0], [4.0, 192.0], [4.1, 194.0], [4.2, 196.0], [4.3, 199.0], [4.4, 201.0], [4.5, 202.0], [4.6, 204.0], [4.7, 205.0], [4.8, 207.0], [4.9, 209.0], [5.0, 212.0], [5.1, 213.0], [5.2, 216.0], [5.3, 220.0], [5.4, 223.0], [5.5, 225.0], [5.6, 227.0], [5.7, 234.0], [5.8, 238.0], [5.9, 241.0], [6.0, 246.0], [6.1, 251.0], [6.2, 259.0], [6.3, 265.0], [6.4, 274.0], [6.5, 284.0], [6.6, 297.0], [6.7, 305.0], [6.8, 316.0], [6.9, 321.0], [7.0, 331.0], [7.1, 344.0], [7.2, 350.0], [7.3, 359.0], [7.4, 367.0], [7.5, 375.0], [7.6, 380.0], [7.7, 385.0], [7.8, 396.0], [7.9, 400.0], [8.0, 405.0], [8.1, 415.0], [8.2, 423.0], [8.3, 434.0], [8.4, 450.0], [8.5, 460.0], [8.6, 468.0], [8.7, 478.0], [8.8, 496.0], [8.9, 503.0], [9.0, 510.0], [9.1, 521.0], [9.2, 533.0], [9.3, 555.0], [9.4, 577.0], [9.5, 595.0], [9.6, 605.0], [9.7, 623.0], [9.8, 635.0], [9.9, 648.0], [10.0, 659.0], [10.1, 671.0], [10.2, 681.0], [10.3, 697.0], [10.4, 709.0], [10.5, 715.0], [10.6, 727.0], [10.7, 739.0], [10.8, 757.0], [10.9, 766.0], [11.0, 781.0], [11.1, 794.0], [11.2, 801.0], [11.3, 812.0], [11.4, 827.0], [11.5, 839.0], [11.6, 843.0], [11.7, 857.0], [11.8, 867.0], [11.9, 890.0], [12.0, 894.0], [12.1, 903.0], [12.2, 926.0], [12.3, 945.0], [12.4, 959.0], [12.5, 974.0], [12.6, 985.0], [12.7, 1005.0], [12.8, 1022.0], [12.9, 1039.0], [13.0, 1052.0], [13.1, 1062.0], [13.2, 1073.0], [13.3, 1099.0], [13.4, 1119.0], [13.5, 1139.0], [13.6, 1166.0], [13.7, 1178.0], [13.8, 1194.0], [13.9, 1220.0], [14.0, 1225.0], [14.1, 1279.0], [14.2, 1324.0], [14.3, 1358.0], [14.4, 1373.0], [14.5, 1393.0], [14.6, 1420.0], [14.7, 1449.0], [14.8, 1498.0], [14.9, 1537.0], [15.0, 1575.0], [15.1, 1631.0], [15.2, 1674.0], [15.3, 1718.0], [15.4, 1776.0], [15.5, 1809.0], [15.6, 1847.0], [15.7, 1887.0], [15.8, 1943.0], [15.9, 1987.0], [16.0, 2021.0], [16.1, 2066.0], [16.2, 2136.0], [16.3, 2208.0], [16.4, 2255.0], [16.5, 2379.0], [16.6, 2424.0], [16.7, 2475.0], [16.8, 2582.0], [16.9, 2629.0], [17.0, 2683.0], [17.1, 2713.0], [17.2, 2770.0], [17.3, 2875.0], [17.4, 2911.0], [17.5, 3005.0], [17.6, 3057.0], [17.7, 3087.0], [17.8, 3107.0], [17.9, 3132.0], [18.0, 3243.0], [18.1, 3280.0], [18.2, 3353.0], [18.3, 3369.0], [18.4, 3401.0], [18.5, 3449.0], [18.6, 3520.0], [18.7, 3582.0], [18.8, 3645.0], [18.9, 3682.0], [19.0, 3710.0], [19.1, 3734.0], [19.2, 3778.0], [19.3, 3860.0], [19.4, 3954.0], [19.5, 4025.0], [19.6, 4073.0], [19.7, 4129.0], [19.8, 4164.0], [19.9, 4233.0], [20.0, 4284.0], [20.1, 4324.0], [20.2, 4387.0], [20.3, 4433.0], [20.4, 4463.0], [20.5, 4531.0], [20.6, 4577.0], [20.7, 4640.0], [20.8, 4679.0], [20.9, 4714.0], [21.0, 4793.0], [21.1, 4820.0], [21.2, 4887.0], [21.3, 4931.0], [21.4, 5001.0], [21.5, 5085.0], [21.6, 5133.0], [21.7, 5218.0], [21.8, 5259.0], [21.9, 5291.0], [22.0, 5348.0], [22.1, 5390.0], [22.2, 5416.0], [22.3, 5465.0], [22.4, 5504.0], [22.5, 5549.0], [22.6, 5622.0], [22.7, 5708.0], [22.8, 5797.0], [22.9, 5876.0], [23.0, 5962.0], [23.1, 6022.0], [23.2, 6087.0], [23.3, 6129.0], [23.4, 6190.0], [23.5, 6205.0], [23.6, 6223.0], [23.7, 6303.0], [23.8, 6389.0], [23.9, 6400.0], [24.0, 6448.0], [24.1, 6467.0], [24.2, 6541.0], [24.3, 6578.0], [24.4, 6611.0], [24.5, 6647.0], [24.6, 6705.0], [24.7, 6751.0], [24.8, 6786.0], [24.9, 6822.0], [25.0, 6855.0], [25.1, 6897.0], [25.2, 6917.0], [25.3, 6940.0], [25.4, 6959.0], [25.5, 6987.0], [25.6, 7000.0], [25.7, 7035.0], [25.8, 7070.0], [25.9, 7097.0], [26.0, 7127.0], [26.1, 7144.0], [26.2, 7170.0], [26.3, 7190.0], [26.4, 7200.0], [26.5, 7212.0], [26.6, 7221.0], [26.7, 7237.0], [26.8, 7252.0], [26.9, 7275.0], [27.0, 7289.0], [27.1, 7315.0], [27.2, 7334.0], [27.3, 7387.0], [27.4, 7398.0], [27.5, 7404.0], [27.6, 7416.0], [27.7, 7432.0], [27.8, 7458.0], [27.9, 7468.0], [28.0, 7487.0], [28.1, 7502.0], [28.2, 7510.0], [28.3, 7520.0], [28.4, 7531.0], [28.5, 7557.0], [28.6, 7571.0], [28.7, 7585.0], [28.8, 7610.0], [28.9, 7621.0], [29.0, 7630.0], [29.1, 7649.0], [29.2, 7663.0], [29.3, 7684.0], [29.4, 7691.0], [29.5, 7705.0], [29.6, 7716.0], [29.7, 7734.0], [29.8, 7747.0], [29.9, 7765.0], [30.0, 7773.0], [30.1, 7797.0], [30.2, 7816.0], [30.3, 7838.0], [30.4, 7851.0], [30.5, 7863.0], [30.6, 7869.0], [30.7, 7883.0], [30.8, 7897.0], [30.9, 7908.0], [31.0, 7923.0], [31.1, 7939.0], [31.2, 7943.0], [31.3, 7953.0], [31.4, 7968.0], [31.5, 7988.0], [31.6, 7996.0], [31.7, 8001.0], [31.8, 8012.0], [31.9, 8016.0], [32.0, 8028.0], [32.1, 8043.0], [32.2, 8051.0], [32.3, 8062.0], [32.4, 8074.0], [32.5, 8084.0], [32.6, 8100.0], [32.7, 8110.0], [32.8, 8123.0], [32.9, 8152.0], [33.0, 8154.0], [33.1, 8175.0], [33.2, 8195.0], [33.3, 8206.0], [33.4, 8220.0], [33.5, 8226.0], [33.6, 8238.0], [33.7, 8254.0], [33.8, 8268.0], [33.9, 8286.0], [34.0, 8304.0], [34.1, 8313.0], [34.2, 8332.0], [34.3, 8339.0], [34.4, 8348.0], [34.5, 8362.0], [34.6, 8380.0], [34.7, 8392.0], [34.8, 8406.0], [34.9, 8410.0], [35.0, 8431.0], [35.1, 8440.0], [35.2, 8453.0], [35.3, 8465.0], [35.4, 8471.0], [35.5, 8487.0], [35.6, 8500.0], [35.7, 8505.0], [35.8, 8512.0], [35.9, 8519.0], [36.0, 8533.0], [36.1, 8547.0], [36.2, 8555.0], [36.3, 8573.0], [36.4, 8580.0], [36.5, 8594.0], [36.6, 8609.0], [36.7, 8624.0], [36.8, 8631.0], [36.9, 8644.0], [37.0, 8663.0], [37.1, 8674.0], [37.2, 8689.0], [37.3, 8713.0], [37.4, 8729.0], [37.5, 8738.0], [37.6, 8757.0], [37.7, 8775.0], [37.8, 8781.0], [37.9, 8797.0], [38.0, 8811.0], [38.1, 8818.0], [38.2, 8823.0], [38.3, 8835.0], [38.4, 8849.0], [38.5, 8869.0], [38.6, 8882.0], [38.7, 8890.0], [38.8, 8899.0], [38.9, 8909.0], [39.0, 8915.0], [39.1, 8928.0], [39.2, 8941.0], [39.3, 8956.0], [39.4, 8970.0], [39.5, 8981.0], [39.6, 8986.0], [39.7, 8996.0], [39.8, 9006.0], [39.9, 9011.0], [40.0, 9016.0], [40.1, 9025.0], [40.2, 9036.0], [40.3, 9043.0], [40.4, 9048.0], [40.5, 9061.0], [40.6, 9069.0], [40.7, 9074.0], [40.8, 9081.0], [40.9, 9092.0], [41.0, 9103.0], [41.1, 9112.0], [41.2, 9118.0], [41.3, 9127.0], [41.4, 9138.0], [41.5, 9149.0], [41.6, 9163.0], [41.7, 9179.0], [41.8, 9188.0], [41.9, 9195.0], [42.0, 9202.0], [42.1, 9212.0], [42.2, 9225.0], [42.3, 9230.0], [42.4, 9241.0], [42.5, 9250.0], [42.6, 9255.0], [42.7, 9262.0], [42.8, 9270.0], [42.9, 9281.0], [43.0, 9291.0], [43.1, 9295.0], [43.2, 9300.0], [43.3, 9309.0], [43.4, 9316.0], [43.5, 9321.0], [43.6, 9326.0], [43.7, 9336.0], [43.8, 9344.0], [43.9, 9352.0], [44.0, 9363.0], [44.1, 9369.0], [44.2, 9379.0], [44.3, 9388.0], [44.4, 9394.0], [44.5, 9403.0], [44.6, 9411.0], [44.7, 9423.0], [44.8, 9430.0], [44.9, 9435.0], [45.0, 9443.0], [45.1, 9451.0], [45.2, 9460.0], [45.3, 9468.0], [45.4, 9480.0], [45.5, 9489.0], [45.6, 9500.0], [45.7, 9514.0], [45.8, 9525.0], [45.9, 9535.0], [46.0, 9543.0], [46.1, 9552.0], [46.2, 9559.0], [46.3, 9563.0], [46.4, 9569.0], [46.5, 9576.0], [46.6, 9582.0], [46.7, 9586.0], [46.8, 9589.0], [46.9, 9597.0], [47.0, 9602.0], [47.1, 9607.0], [47.2, 9613.0], [47.3, 9615.0], [47.4, 9620.0], [47.5, 9630.0], [47.6, 9631.0], [47.7, 9639.0], [47.8, 9644.0], [47.9, 9655.0], [48.0, 9661.0], [48.1, 9666.0], [48.2, 9669.0], [48.3, 9675.0], [48.4, 9684.0], [48.5, 9689.0], [48.6, 9698.0], [48.7, 9703.0], [48.8, 9708.0], [48.9, 9710.0], [49.0, 9717.0], [49.1, 9721.0], [49.2, 9725.0], [49.3, 9728.0], [49.4, 9730.0], [49.5, 9739.0], [49.6, 9743.0], [49.7, 9746.0], [49.8, 9751.0], [49.9, 9754.0], [50.0, 9757.0], [50.1, 9760.0], [50.2, 9763.0], [50.3, 9766.0], [50.4, 9774.0], [50.5, 9779.0], [50.6, 9781.0], [50.7, 9785.0], [50.8, 9787.0], [50.9, 9793.0], [51.0, 9797.0], [51.1, 9801.0], [51.2, 9808.0], [51.3, 9811.0], [51.4, 9817.0], [51.5, 9821.0], [51.6, 9825.0], [51.7, 9832.0], [51.8, 9836.0], [51.9, 9842.0], [52.0, 9845.0], [52.1, 9851.0], [52.2, 9854.0], [52.3, 9856.0], [52.4, 9862.0], [52.5, 9867.0], [52.6, 9873.0], [52.7, 9874.0], [52.8, 9877.0], [52.9, 9879.0], [53.0, 9883.0], [53.1, 9889.0], [53.2, 9891.0], [53.3, 9895.0], [53.4, 9901.0], [53.5, 9905.0], [53.6, 9909.0], [53.7, 9915.0], [53.8, 9918.0], [53.9, 9921.0], [54.0, 9925.0], [54.1, 9931.0], [54.2, 9935.0], [54.3, 9938.0], [54.4, 9940.0], [54.5, 9943.0], [54.6, 9945.0], [54.7, 9947.0], [54.8, 9948.0], [54.9, 9950.0], [55.0, 9951.0], [55.1, 9953.0], [55.2, 9959.0], [55.3, 9961.0], [55.4, 9963.0], [55.5, 9965.0], [55.6, 9967.0], [55.7, 9967.0], [55.8, 9970.0], [55.9, 9972.0], [56.0, 9975.0], [56.1, 9976.0], [56.2, 9979.0], [56.3, 9982.0], [56.4, 9984.0], [56.5, 9987.0], [56.6, 9989.0], [56.7, 9993.0], [56.8, 9996.0], [56.9, 9999.0], [57.0, 10003.0], [57.1, 10005.0], [57.2, 10006.0], [57.3, 10008.0], [57.4, 10012.0], [57.5, 10015.0], [57.6, 10019.0], [57.7, 10022.0], [57.8, 10025.0], [57.9, 10031.0], [58.0, 10032.0], [58.1, 10034.0], [58.2, 10036.0], [58.3, 10037.0], [58.4, 10039.0], [58.5, 10043.0], [58.6, 10047.0], [58.7, 10051.0], [58.8, 10052.0], [58.9, 10055.0], [59.0, 10057.0], [59.1, 10059.0], [59.2, 10061.0], [59.3, 10064.0], [59.4, 10067.0], [59.5, 10070.0], [59.6, 10072.0], [59.7, 10074.0], [59.8, 10076.0], [59.9, 10079.0], [60.0, 10080.0], [60.1, 10081.0], [60.2, 10083.0], [60.3, 10084.0], [60.4, 10087.0], [60.5, 10089.0], [60.6, 10092.0], [60.7, 10098.0], [60.8, 10101.0], [60.9, 10103.0], [61.0, 10104.0], [61.1, 10106.0], [61.2, 10108.0], [61.3, 10111.0], [61.4, 10113.0], [61.5, 10117.0], [61.6, 10119.0], [61.7, 10123.0], [61.8, 10125.0], [61.9, 10128.0], [62.0, 10132.0], [62.1, 10135.0], [62.2, 10139.0], [62.3, 10140.0], [62.4, 10143.0], [62.5, 10146.0], [62.6, 10150.0], [62.7, 10152.0], [62.8, 10156.0], [62.9, 10159.0], [63.0, 10160.0], [63.1, 10163.0], [63.2, 10168.0], [63.3, 10169.0], [63.4, 10170.0], [63.5, 10172.0], [63.6, 10174.0], [63.7, 10175.0], [63.8, 10178.0], [63.9, 10179.0], [64.0, 10181.0], [64.1, 10184.0], [64.2, 10187.0], [64.3, 10191.0], [64.4, 10196.0], [64.5, 10199.0], [64.6, 10203.0], [64.7, 10206.0], [64.8, 10208.0], [64.9, 10210.0], [65.0, 10212.0], [65.1, 10214.0], [65.2, 10217.0], [65.3, 10218.0], [65.4, 10221.0], [65.5, 10225.0], [65.6, 10227.0], [65.7, 10230.0], [65.8, 10233.0], [65.9, 10235.0], [66.0, 10237.0], [66.1, 10244.0], [66.2, 10248.0], [66.3, 10251.0], [66.4, 10255.0], [66.5, 10258.0], [66.6, 10259.0], [66.7, 10265.0], [66.8, 10268.0], [66.9, 10274.0], [67.0, 10275.0], [67.1, 10278.0], [67.2, 10282.0], [67.3, 10287.0], [67.4, 10291.0], [67.5, 10295.0], [67.6, 10296.0], [67.7, 10300.0], [67.8, 10302.0], [67.9, 10305.0], [68.0, 10307.0], [68.1, 10310.0], [68.2, 10314.0], [68.3, 10316.0], [68.4, 10318.0], [68.5, 10319.0], [68.6, 10322.0], [68.7, 10325.0], [68.8, 10326.0], [68.9, 10328.0], [69.0, 10330.0], [69.1, 10332.0], [69.2, 10333.0], [69.3, 10336.0], [69.4, 10338.0], [69.5, 10341.0], [69.6, 10344.0], [69.7, 10345.0], [69.8, 10348.0], [69.9, 10349.0], [70.0, 10352.0], [70.1, 10358.0], [70.2, 10361.0], [70.3, 10363.0], [70.4, 10366.0], [70.5, 10369.0], [70.6, 10370.0], [70.7, 10373.0], [70.8, 10375.0], [70.9, 10377.0], [71.0, 10380.0], [71.1, 10383.0], [71.2, 10385.0], [71.3, 10388.0], [71.4, 10390.0], [71.5, 10392.0], [71.6, 10397.0], [71.7, 10399.0], [71.8, 10401.0], [71.9, 10402.0], [72.0, 10403.0], [72.1, 10405.0], [72.2, 10406.0], [72.3, 10407.0], [72.4, 10411.0], [72.5, 10413.0], [72.6, 10415.0], [72.7, 10416.0], [72.8, 10418.0], [72.9, 10420.0], [73.0, 10424.0], [73.1, 10427.0], [73.2, 10429.0], [73.3, 10432.0], [73.4, 10433.0], [73.5, 10437.0], [73.6, 10440.0], [73.7, 10441.0], [73.8, 10443.0], [73.9, 10447.0], [74.0, 10448.0], [74.1, 10451.0], [74.2, 10453.0], [74.3, 10455.0], [74.4, 10456.0], [74.5, 10458.0], [74.6, 10461.0], [74.7, 10465.0], [74.8, 10466.0], [74.9, 10470.0], [75.0, 10475.0], [75.1, 10477.0], [75.2, 10478.0], [75.3, 10480.0], [75.4, 10485.0], [75.5, 10487.0], [75.6, 10491.0], [75.7, 10495.0], [75.8, 10500.0], [75.9, 10504.0], [76.0, 10507.0], [76.1, 10512.0], [76.2, 10516.0], [76.3, 10519.0], [76.4, 10524.0], [76.5, 10529.0], [76.6, 10532.0], [76.7, 10537.0], [76.8, 10539.0], [76.9, 10541.0], [77.0, 10545.0], [77.1, 10552.0], [77.2, 10555.0], [77.3, 10557.0], [77.4, 10561.0], [77.5, 10563.0], [77.6, 10575.0], [77.7, 10579.0], [77.8, 10583.0], [77.9, 10586.0], [78.0, 10591.0], [78.1, 10597.0], [78.2, 10601.0], [78.3, 10606.0], [78.4, 10612.0], [78.5, 10619.0], [78.6, 10624.0], [78.7, 10627.0], [78.8, 10635.0], [78.9, 10641.0], [79.0, 10646.0], [79.1, 10651.0], [79.2, 10658.0], [79.3, 10664.0], [79.4, 10668.0], [79.5, 10673.0], [79.6, 10678.0], [79.7, 10683.0], [79.8, 10687.0], [79.9, 10691.0], [80.0, 10699.0], [80.1, 10706.0], [80.2, 10714.0], [80.3, 10718.0], [80.4, 10721.0], [80.5, 10732.0], [80.6, 10737.0], [80.7, 10745.0], [80.8, 10749.0], [80.9, 10754.0], [81.0, 10760.0], [81.1, 10762.0], [81.2, 10764.0], [81.3, 10773.0], [81.4, 10781.0], [81.5, 10783.0], [81.6, 10788.0], [81.7, 10790.0], [81.8, 10795.0], [81.9, 10797.0], [82.0, 10803.0], [82.1, 10806.0], [82.2, 10810.0], [82.3, 10812.0], [82.4, 10815.0], [82.5, 10818.0], [82.6, 10823.0], [82.7, 10826.0], [82.8, 10829.0], [82.9, 10830.0], [83.0, 10835.0], [83.1, 10838.0], [83.2, 10843.0], [83.3, 10848.0], [83.4, 10851.0], [83.5, 10854.0], [83.6, 10856.0], [83.7, 10860.0], [83.8, 10864.0], [83.9, 10868.0], [84.0, 10872.0], [84.1, 10875.0], [84.2, 10880.0], [84.3, 10889.0], [84.4, 10891.0], [84.5, 10894.0], [84.6, 10899.0], [84.7, 10907.0], [84.8, 10913.0], [84.9, 10918.0], [85.0, 10923.0], [85.1, 10926.0], [85.2, 10932.0], [85.3, 10938.0], [85.4, 10951.0], [85.5, 10954.0], [85.6, 10955.0], [85.7, 10962.0], [85.8, 10964.0], [85.9, 10966.0], [86.0, 10969.0], [86.1, 10972.0], [86.2, 10975.0], [86.3, 10982.0], [86.4, 10989.0], [86.5, 10993.0], [86.6, 11000.0], [86.7, 11006.0], [86.8, 11011.0], [86.9, 11017.0], [87.0, 11022.0], [87.1, 11027.0], [87.2, 11041.0], [87.3, 11047.0], [87.4, 11053.0], [87.5, 11068.0], [87.6, 11074.0], [87.7, 11080.0], [87.8, 11087.0], [87.9, 11090.0], [88.0, 11096.0], [88.1, 11104.0], [88.2, 11107.0], [88.3, 11114.0], [88.4, 11124.0], [88.5, 11127.0], [88.6, 11131.0], [88.7, 11134.0], [88.8, 11143.0], [88.9, 11147.0], [89.0, 11153.0], [89.1, 11157.0], [89.2, 11160.0], [89.3, 11167.0], [89.4, 11177.0], [89.5, 11182.0], [89.6, 11196.0], [89.7, 11201.0], [89.8, 11212.0], [89.9, 11221.0], [90.0, 11246.0], [90.1, 11252.0], [90.2, 11260.0], [90.3, 11269.0], [90.4, 11279.0], [90.5, 11295.0], [90.6, 11310.0], [90.7, 11318.0], [90.8, 11330.0], [90.9, 11344.0], [91.0, 11351.0], [91.1, 11364.0], [91.2, 11370.0], [91.3, 11376.0], [91.4, 11384.0], [91.5, 11392.0], [91.6, 11397.0], [91.7, 11408.0], [91.8, 11414.0], [91.9, 11418.0], [92.0, 11429.0], [92.1, 11440.0], [92.2, 11457.0], [92.3, 11468.0], [92.4, 11473.0], [92.5, 11486.0], [92.6, 11492.0], [92.7, 11500.0], [92.8, 11506.0], [92.9, 11513.0], [93.0, 11518.0], [93.1, 11526.0], [93.2, 11536.0], [93.3, 11540.0], [93.4, 11545.0], [93.5, 11559.0], [93.6, 11571.0], [93.7, 11573.0], [93.8, 11584.0], [93.9, 11595.0], [94.0, 11600.0], [94.1, 11608.0], [94.2, 11618.0], [94.3, 11620.0], [94.4, 11631.0], [94.5, 11647.0], [94.6, 11660.0], [94.7, 11664.0], [94.8, 11682.0], [94.9, 11691.0], [95.0, 11715.0], [95.1, 11744.0], [95.2, 11768.0], [95.3, 11805.0], [95.4, 11941.0], [95.5, 12007.0], [95.6, 12052.0], [95.7, 12086.0], [95.8, 12115.0], [95.9, 12141.0], [96.0, 12170.0], [96.1, 12183.0], [96.2, 12202.0], [96.3, 12217.0], [96.4, 12288.0], [96.5, 12313.0], [96.6, 12327.0], [96.7, 12356.0], [96.8, 12367.0], [96.9, 12381.0], [97.0, 12386.0], [97.1, 12400.0], [97.2, 12425.0], [97.3, 12455.0], [97.4, 12468.0], [97.5, 12484.0], [97.6, 12506.0], [97.7, 12522.0], [97.8, 12540.0], [97.9, 12560.0], [98.0, 12582.0], [98.1, 12611.0], [98.2, 12652.0], [98.3, 12669.0], [98.4, 12717.0], [98.5, 12738.0], [98.6, 12771.0], [98.7, 12800.0], [98.8, 12826.0], [98.9, 12841.0], [99.0, 12856.0], [99.1, 12871.0], [99.2, 12885.0], [99.3, 12892.0], [99.4, 12917.0], [99.5, 12929.0], [99.6, 12937.0], [99.7, 12939.0], [99.8, 12948.0], [99.9, 13099.0]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 255.0, "series": [{"data": [[100.0, 255.0], [200.0, 139.0], [300.0, 72.0], [400.0, 58.0], [500.0, 42.0], [600.0, 45.0], [700.0, 52.0], [800.0, 52.0], [900.0, 36.0], [1000.0, 38.0], [1100.0, 30.0], [1200.0, 21.0], [1300.0, 21.0], [1400.0, 16.0], [1500.0, 12.0], [1600.0, 14.0], [1700.0, 14.0], [1800.0, 14.0], [1900.0, 14.0], [2000.0, 10.0], [2100.0, 9.0], [2200.0, 8.0], [2300.0, 8.0], [2400.0, 9.0], [2500.0, 9.0], [2600.0, 12.0], [2800.0, 8.0], [2700.0, 11.0], [2900.0, 7.0], [3000.0, 15.0], [3100.0, 12.0], [3300.0, 16.0], [3200.0, 10.0], [3400.0, 10.0], [3500.0, 10.0], [3700.0, 16.0], [3600.0, 14.0], [3800.0, 5.0], [3900.0, 6.0], [4000.0, 14.0], [4200.0, 14.0], [4100.0, 10.0], [4300.0, 11.0], [4600.0, 13.0], [4500.0, 10.0], [4400.0, 12.0], [4700.0, 12.0], [4800.0, 11.0], [4900.0, 10.0], [5100.0, 5.0], [5000.0, 9.0], [5200.0, 18.0], [5300.0, 12.0], [5500.0, 13.0], [5600.0, 5.0], [5400.0, 14.0], [5800.0, 6.0], [5700.0, 7.0], [5900.0, 9.0], [6000.0, 11.0], [6100.0, 13.0], [6200.0, 14.0], [6300.0, 12.0], [6400.0, 16.0], [6600.0, 13.0], [6500.0, 10.0], [6900.0, 27.0], [6700.0, 16.0], [6800.0, 17.0], [7100.0, 29.0], [7000.0, 20.0], [7200.0, 37.0], [7400.0, 39.0], [7300.0, 24.0], [7500.0, 40.0], [7600.0, 40.0], [7700.0, 40.0], [7800.0, 42.0], [7900.0, 51.0], [8100.0, 37.0], [8000.0, 54.0], [8600.0, 39.0], [8700.0, 41.0], [8200.0, 44.0], [8300.0, 48.0], [8500.0, 60.0], [8400.0, 47.0], [9000.0, 70.0], [9200.0, 72.0], [8800.0, 52.0], [8900.0, 56.0], [9100.0, 61.0], [9500.0, 81.0], [9600.0, 99.0], [9700.0, 144.0], [9400.0, 66.0], [9300.0, 76.0], [9900.0, 209.0], [10000.0, 227.0], [9800.0, 138.0], [10200.0, 185.0], [10100.0, 223.0], [10300.0, 241.0], [10400.0, 242.0], [10500.0, 140.0], [10600.0, 109.0], [10700.0, 114.0], [10800.0, 160.0], [10900.0, 116.0], [11000.0, 84.0], [11100.0, 99.0], [11200.0, 51.0], [11300.0, 63.0], [11500.0, 76.0], [11600.0, 58.0], [11700.0, 20.0], [11400.0, 64.0], [11800.0, 6.0], [11900.0, 5.0], [12000.0, 19.0], [12100.0, 23.0], [12200.0, 14.0], [12300.0, 40.0], [12400.0, 29.0], [12500.0, 28.0], [12600.0, 18.0], [12700.0, 19.0], [12800.0, 37.0], [12900.0, 34.0], [13000.0, 2.0], [13200.0, 1.0], [13400.0, 1.0], [13700.0, 1.0], [14100.0, 1.0], [13900.0, 1.0]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 14100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 353.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5044.0, "series": [{"data": [[0.0, 524.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 353.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5044.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 224.7666195190946, "minX": 1.61255508E12, "maxY": 280.0, "series": [{"data": [[1.61255514E12, 280.0], [1.61255532E12, 280.0], [1.61255538E12, 224.7666195190946], [1.6125552E12, 280.0], [1.61255526E12, 280.0], [1.61255508E12, 280.0]], "isOverall": false, "label": "Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61255538E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 180.0, "minX": 1.0, "maxY": 14145.0, "series": [{"data": [[2.0, 242.0], [3.0, 227.0], [4.0, 183.0], [5.0, 190.0], [6.0, 181.0], [7.0, 249.0], [8.0, 249.0], [9.0, 216.0], [10.0, 208.0], [11.0, 207.0], [12.0, 214.0], [13.0, 180.0], [14.0, 181.0], [15.0, 182.0], [16.0, 181.0], [17.0, 213.0], [18.0, 194.0], [19.0, 218.0], [20.0, 192.0], [21.0, 207.0], [22.0, 228.0], [23.0, 281.0], [25.0, 239.5], [26.0, 278.0], [27.0, 345.0], [28.0, 367.0], [29.0, 337.0], [30.0, 344.0], [31.0, 362.0], [33.0, 522.0], [32.0, 450.0], [35.0, 605.0], [34.0, 424.0], [37.0, 467.0], [36.0, 623.0], [39.0, 820.0], [38.0, 643.0], [40.0, 702.0], [43.0, 904.6666666666666], [45.0, 1563.0], [44.0, 1194.0], [47.0, 1428.0], [46.0, 1610.0], [48.0, 5259.0], [51.0, 1691.0], [50.0, 1677.0], [53.0, 1847.0], [52.0, 1729.0], [55.0, 13723.0], [54.0, 1757.0], [57.0, 2770.0], [56.0, 13994.0], [59.0, 2763.0], [58.0, 2754.0], [61.0, 3074.0], [60.0, 2912.0], [63.0, 3041.0], [62.0, 3108.0], [67.0, 3565.0], [66.0, 3660.0], [65.0, 3912.0], [64.0, 3149.0], [71.0, 14145.0], [70.0, 6917.0], [69.0, 4033.0], [68.0, 3736.0], [75.0, 4588.0], [74.0, 4702.0], [73.0, 4493.0], [72.0, 4688.0], [79.0, 9294.0], [78.0, 6121.0], [77.0, 6087.0], [76.0, 4929.0], [83.0, 7214.0], [82.0, 7207.0], [81.0, 7227.0], [80.0, 6389.0], [87.0, 7426.0], [86.0, 7655.0], [85.0, 7709.0], [84.0, 7616.0], [91.0, 7525.0], [90.0, 7940.0], [89.0, 12418.0], [88.0, 7829.0], [95.0, 8226.0], [94.0, 8208.0], [93.0, 8102.0], [92.0, 7992.0], [99.0, 8096.0], [98.0, 8389.0], [97.0, 8080.0], [96.0, 8487.0], [103.0, 8534.0], [102.0, 8513.0], [101.0, 8098.0], [100.0, 8461.0], [107.0, 8814.0], [106.0, 8742.0], [105.0, 8716.0], [104.0, 8232.0], [111.0, 9147.0], [110.0, 9004.0], [109.0, 8406.0], [108.0, 8343.0], [115.0, 9372.0], [114.0, 9133.0], [113.0, 8635.0], [112.0, 9073.0], [119.0, 9543.0], [118.0, 9069.0], [117.0, 9086.0], [116.0, 9179.0], [122.0, 8869.0], [121.0, 9156.0], [120.0, 8910.0], [127.0, 9240.0], [126.0, 9025.0], [125.0, 9113.0], [124.0, 8942.5], [135.0, 9670.0], [134.0, 9626.0], [133.0, 9731.0], [132.0, 9720.0], [131.0, 9411.0], [130.0, 9199.0], [129.0, 9115.0], [128.0, 9210.0], [143.0, 10031.0], [142.0, 10005.0], [141.0, 10003.0], [140.0, 9180.0], [139.0, 9230.0], [138.0, 9250.0], [137.0, 9631.0], [136.0, 9115.0], [151.0, 9779.0], [150.0, 9815.0], [149.0, 9622.0], [148.0, 10159.0], [147.0, 9790.0], [146.0, 9951.0], [145.0, 9996.0], [144.0, 10003.0], [159.0, 9709.0], [158.0, 9712.0], [157.0, 9777.0], [156.0, 9863.0], [155.0, 10079.0], [154.0, 9679.0], [153.0, 9879.0], [152.0, 9689.0], [167.0, 9992.0], [166.0, 9875.0], [165.0, 9946.0], [164.0, 9970.0], [163.0, 9753.0], [162.0, 10132.0], [161.0, 9727.0], [160.0, 9799.0], [175.0, 9873.0], [174.0, 10217.0], [173.0, 10344.0], [172.0, 10031.0], [171.0, 10162.0], [170.0, 10328.0], [169.0, 9936.0], [168.0, 10000.0], [183.0, 10166.0], [182.0, 9925.0], [181.0, 10048.0], [180.0, 9949.0], [179.0, 10210.0], [178.0, 10024.0], [177.0, 9947.0], [176.0, 9874.0], [191.0, 9966.0], [190.0, 9929.0], [189.0, 10060.0], [188.0, 10064.0], [187.0, 10367.0], [186.0, 10043.0], [185.0, 10383.0], [184.0, 9977.0], [199.0, 10390.0], [198.0, 10036.0], [197.0, 10196.0], [196.0, 9920.0], [195.0, 10432.0], [194.0, 10441.0], [193.0, 9913.0], [192.0, 9978.0], [207.0, 10461.0], [206.0, 10504.0], [205.0, 10072.0], [204.0, 10119.0], [203.0, 10512.0], [202.0, 10539.0], [200.0, 10332.0], [215.0, 10375.0], [214.0, 10454.0], [213.0, 10015.0], [212.0, 10064.0], [211.0, 9968.0], [210.0, 10399.0], [209.0, 10397.0], [208.0, 10499.0], [223.0, 10326.0], [222.0, 9938.0], [221.0, 10044.0], [220.0, 10045.0], [219.0, 9904.0], [218.0, 10240.0], [217.0, 10007.0], [216.0, 9963.0], [230.0, 10349.0], [229.0, 9892.0], [228.0, 10089.0], [227.0, 10064.0], [225.0, 10211.0], [224.0, 9920.0], [239.0, 10265.0], [238.0, 10055.0], [237.0, 9940.0], [236.0, 10180.5], [234.0, 10103.0], [233.0, 9976.0], [232.0, 10018.5], [247.0, 10112.0], [246.0, 9984.0], [245.0, 9805.0], [244.0, 10103.0], [243.0, 10203.0], [242.0, 9824.0], [241.0, 10069.0], [240.0, 10217.0], [255.0, 10058.0], [254.0, 10145.0], [253.0, 9891.0], [252.0, 10101.0], [251.0, 9884.0], [250.0, 9978.0], [249.0, 9974.0], [248.0, 10000.0], [270.0, 9904.0], [271.0, 9878.0], [269.0, 9869.0], [268.0, 9910.0], [267.0, 9901.0], [266.0, 9722.0], [265.0, 9891.0], [264.0, 10058.0], [263.0, 9976.0], [257.0, 9776.0], [256.0, 9843.0], [259.0, 9969.0], [258.0, 9810.0], [262.0, 9746.0], [261.0, 9982.0], [260.0, 9808.0], [280.0, 8041.3211627081955], [279.0, 9873.0], [278.0, 9849.0], [277.0, 9926.0], [276.0, 9906.0], [275.0, 9896.0], [274.0, 9613.0], [273.0, 9909.0], [272.0, 9956.0], [1.0, 258.0]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[273.40483026515784, 8016.624387772276]], "isOverall": false, "label": "Home-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 280.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 680.3333333333334, "minX": 1.61255508E12, "maxY": 7041.05, "series": [{"data": [[1.61255514E12, 6581.466666666666], [1.61255532E12, 5982.733333333334], [1.61255538E12, 3635.366666666667], [1.6125552E12, 5516.383333333333], [1.61255526E12, 7041.05], [1.61255508E12, 1589.8333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61255514E12, 2788.5], [1.61255532E12, 2522.0], [1.61255538E12, 1531.8333333333333], [1.6125552E12, 2333.5], [1.61255526E12, 2972.6666666666665], [1.61255508E12, 680.3333333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61255538E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6949.7405498281705, "minX": 1.61255508E12, "maxY": 11114.159235668792, "series": [{"data": [[1.61255514E12, 9055.576534576529], [1.61255532E12, 6949.7405498281705], [1.61255538E12, 7384.444130127296], [1.6125552E12, 7847.343546889497], [1.61255526E12, 7696.917638483958], [1.61255508E12, 11114.159235668792]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61255538E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 202.27835051546376, "minX": 1.61255508E12, "maxY": 1236.3694267515923, "series": [{"data": [[1.61255514E12, 304.32090132090104], [1.61255532E12, 202.27835051546376], [1.61255538E12, 224.68175388967478], [1.6125552E12, 227.21355617455896], [1.61255526E12, 229.83309037900852], [1.61255508E12, 1236.3694267515923]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61255538E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.4679300291545187, "minX": 1.61255508E12, "maxY": 62.238853503184714, "series": [{"data": [[1.61255514E12, 0.6169386169386168], [1.61255532E12, 0.5360824742268049], [1.61255538E12, 0.5148514851485146], [1.6125552E12, 0.469823584029712], [1.61255526E12, 0.4679300291545187], [1.61255508E12, 62.238853503184714]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61255538E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 175.0, "minX": 1.61255508E12, "maxY": 14145.0, "series": [{"data": [[1.61255514E12, 12606.0], [1.61255532E12, 13482.0], [1.61255538E12, 14145.0], [1.6125552E12, 13251.0], [1.61255526E12, 11805.0], [1.61255508E12, 12973.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61255514E12, 11529.2], [1.61255532E12, 10254.0], [1.61255538E12, 10203.8], [1.6125552E12, 10853.4], [1.61255526E12, 10399.1], [1.61255508E12, 12913.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61255514E12, 11776.0], [1.61255532E12, 10509.55], [1.61255538E12, 10823.079999999993], [1.6125552E12, 11691.920000000002], [1.61255526E12, 10610.24], [1.61255508E12, 12950.7]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61255514E12, 11618.0], [1.61255532E12, 10347.75], [1.61255538E12, 10387.2], [1.6125552E12, 11050.699999999999], [1.61255526E12, 10476.0], [1.61255508E12, 12937.25]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61255514E12, 175.0], [1.61255532E12, 176.0], [1.61255538E12, 179.0], [1.6125552E12, 175.0], [1.61255526E12, 177.0], [1.61255508E12, 175.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61255514E12, 10779.0], [1.61255532E12, 8991.0], [1.61255538E12, 9179.0], [1.6125552E12, 10035.0], [1.61255526E12, 9440.0], [1.61255508E12, 12399.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61255538E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 196.0, "minX": 1.0, "maxY": 12707.0, "series": [{"data": [[2.0, 3160.5], [3.0, 4674.0], [4.0, 4335.5], [5.0, 5988.5], [6.0, 3924.0], [7.0, 6232.5], [8.0, 1024.5], [9.0, 2126.0], [10.0, 196.0], [11.0, 7996.0], [12.0, 4190.5], [13.0, 799.0], [14.0, 413.0], [15.0, 8382.0], [16.0, 472.5], [17.0, 425.0], [18.0, 424.0], [19.0, 8932.5], [20.0, 10083.5], [21.0, 711.0], [22.0, 9117.0], [23.0, 281.0], [24.0, 9296.0], [25.0, 9751.5], [26.0, 798.0], [27.0, 9315.0], [30.0, 3095.0], [31.0, 9044.5], [33.0, 10187.0], [32.0, 4047.0], [34.0, 9658.5], [35.0, 9785.0], [37.0, 9836.0], [39.0, 8516.0], [44.0, 9972.0], [47.0, 7590.0], [49.0, 9695.5], [48.0, 10032.5], [50.0, 9879.5], [53.0, 10400.0], [54.0, 7397.5], [55.0, 8299.0], [56.0, 7396.5], [60.0, 10289.0], [61.0, 8742.0], [65.0, 10142.0], [67.0, 9680.0], [70.0, 10251.0], [68.0, 9762.0], [74.0, 10333.0], [79.0, 9744.0], [76.0, 10328.5], [77.0, 10121.0], [81.0, 11358.0], [82.0, 9583.5], [83.0, 10316.0], [80.0, 10125.5], [90.0, 10128.0], [92.0, 10788.0], [93.0, 10327.0], [94.0, 9876.0], [96.0, 10891.5], [108.0, 10684.5], [132.0, 11018.0], [129.0, 10787.0], [141.0, 11526.0], [146.0, 11312.5], [177.0, 12707.0], [1.0, 3427.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 177.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 11.0, "minX": 1.0, "maxY": 2176.0, "series": [{"data": [[2.0, 36.5], [3.0, 41.0], [4.0, 45.0], [5.0, 56.5], [6.0, 41.0], [7.0, 61.0], [8.0, 36.5], [9.0, 51.0], [10.0, 11.0], [11.0, 72.0], [12.0, 39.0], [13.0, 28.0], [14.0, 19.5], [15.0, 103.0], [16.0, 26.5], [17.0, 26.0], [18.0, 19.0], [19.0, 100.5], [20.0, 109.5], [21.0, 38.0], [22.0, 102.5], [23.0, 21.0], [24.0, 124.0], [25.0, 75.5], [26.0, 52.0], [27.0, 121.5], [30.0, 126.0], [31.0, 136.0], [33.0, 174.0], [32.0, 181.5], [34.0, 151.0], [35.0, 185.0], [37.0, 176.0], [39.0, 240.0], [44.0, 178.0], [47.0, 417.0], [49.0, 225.5], [48.0, 299.5], [50.0, 284.0], [53.0, 316.0], [54.0, 395.5], [55.0, 392.0], [56.0, 397.0], [60.0, 294.5], [61.0, 399.0], [65.0, 282.0], [67.0, 376.0], [70.0, 246.5], [68.0, 358.0], [74.0, 272.0], [79.0, 378.0], [76.0, 327.0], [77.0, 289.0], [81.0, 431.5], [82.0, 405.5], [83.0, 351.0], [80.0, 334.0], [90.0, 296.0], [92.0, 434.0], [93.0, 301.0], [94.0, 362.0], [96.0, 257.0], [108.0, 327.0], [132.0, 341.0], [129.0, 362.0], [141.0, 359.0], [146.0, 466.5], [177.0, 2176.0], [1.0, 29.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 177.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 7.783333333333333, "minX": 1.61255508E12, "maxY": 23.166666666666668, "series": [{"data": [[1.61255514E12, 16.85], [1.61255532E12, 23.166666666666668], [1.61255538E12, 7.783333333333333], [1.6125552E12, 22.25], [1.61255526E12, 18.8], [1.61255508E12, 9.833333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61255538E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 5.233333333333333, "minX": 1.61255508E12, "maxY": 22.866666666666667, "series": [{"data": [[1.61255514E12, 21.45], [1.61255532E12, 19.4], [1.61255538E12, 11.783333333333333], [1.6125552E12, 17.95], [1.61255526E12, 22.866666666666667], [1.61255508E12, 5.233333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61255538E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5.233333333333333, "minX": 1.61255508E12, "maxY": 22.866666666666667, "series": [{"data": [[1.61255514E12, 21.45], [1.61255532E12, 19.4], [1.61255538E12, 11.783333333333333], [1.6125552E12, 17.95], [1.61255526E12, 22.866666666666667], [1.61255508E12, 5.233333333333333]], "isOverall": false, "label": "Home-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61255538E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.233333333333333, "minX": 1.61255508E12, "maxY": 22.866666666666667, "series": [{"data": [[1.61255514E12, 21.45], [1.61255532E12, 19.4], [1.61255538E12, 11.783333333333333], [1.6125552E12, 17.95], [1.61255526E12, 22.866666666666667], [1.61255508E12, 5.233333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61255538E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

