/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 13196.0, "minX": 0.0, "maxY": 170510.0, "series": [{"data": [[0.0, 13196.0], [0.1, 13644.0], [0.2, 13899.0], [0.3, 14063.0], [0.4, 14293.0], [0.5, 14451.0], [0.6, 14550.0], [0.7, 14647.0], [0.8, 14681.0], [0.9, 14710.0], [1.0, 14808.0], [1.1, 14842.0], [1.2, 14891.0], [1.3, 14923.0], [1.4, 14964.0], [1.5, 14990.0], [1.6, 15033.0], [1.7, 15055.0], [1.8, 15140.0], [1.9, 15211.0], [2.0, 15240.0], [2.1, 15268.0], [2.2, 15297.0], [2.3, 15324.0], [2.4, 15352.0], [2.5, 15385.0], [2.6, 15409.0], [2.7, 15460.0], [2.8, 15492.0], [2.9, 15517.0], [3.0, 15566.0], [3.1, 15600.0], [3.2, 15629.0], [3.3, 15664.0], [3.4, 15700.0], [3.5, 15706.0], [3.6, 15719.0], [3.7, 15743.0], [3.8, 15777.0], [3.9, 15785.0], [4.0, 15802.0], [4.1, 15816.0], [4.2, 15820.0], [4.3, 15834.0], [4.4, 15848.0], [4.5, 15859.0], [4.6, 15880.0], [4.7, 15890.0], [4.8, 15902.0], [4.9, 15908.0], [5.0, 15923.0], [5.1, 15937.0], [5.2, 15945.0], [5.3, 15953.0], [5.4, 15957.0], [5.5, 15964.0], [5.6, 15974.0], [5.7, 15982.0], [5.8, 15993.0], [5.9, 16000.0], [6.0, 16004.0], [6.1, 16011.0], [6.2, 16018.0], [6.3, 16032.0], [6.4, 16041.0], [6.5, 16050.0], [6.6, 16060.0], [6.7, 16071.0], [6.8, 16079.0], [6.9, 16083.0], [7.0, 16094.0], [7.1, 16099.0], [7.2, 16107.0], [7.3, 16113.0], [7.4, 16122.0], [7.5, 16128.0], [7.6, 16135.0], [7.7, 16142.0], [7.8, 16149.0], [7.9, 16156.0], [8.0, 16164.0], [8.1, 16169.0], [8.2, 16182.0], [8.3, 16190.0], [8.4, 16194.0], [8.5, 16205.0], [8.6, 16210.0], [8.7, 16216.0], [8.8, 16220.0], [8.9, 16227.0], [9.0, 16232.0], [9.1, 16241.0], [9.2, 16245.0], [9.3, 16248.0], [9.4, 16252.0], [9.5, 16258.0], [9.6, 16268.0], [9.7, 16271.0], [9.8, 16276.0], [9.9, 16282.0], [10.0, 16288.0], [10.1, 16290.0], [10.2, 16296.0], [10.3, 16299.0], [10.4, 16304.0], [10.5, 16308.0], [10.6, 16314.0], [10.7, 16320.0], [10.8, 16325.0], [10.9, 16330.0], [11.0, 16337.0], [11.1, 16343.0], [11.2, 16348.0], [11.3, 16353.0], [11.4, 16360.0], [11.5, 16363.0], [11.6, 16368.0], [11.7, 16375.0], [11.8, 16379.0], [11.9, 16387.0], [12.0, 16394.0], [12.1, 16397.0], [12.2, 16401.0], [12.3, 16407.0], [12.4, 16415.0], [12.5, 16425.0], [12.6, 16430.0], [12.7, 16434.0], [12.8, 16443.0], [12.9, 16451.0], [13.0, 16458.0], [13.1, 16461.0], [13.2, 16467.0], [13.3, 16473.0], [13.4, 16480.0], [13.5, 16487.0], [13.6, 16495.0], [13.7, 16500.0], [13.8, 16503.0], [13.9, 16507.0], [14.0, 16512.0], [14.1, 16521.0], [14.2, 16529.0], [14.3, 16536.0], [14.4, 16544.0], [14.5, 16547.0], [14.6, 16556.0], [14.7, 16564.0], [14.8, 16573.0], [14.9, 16583.0], [15.0, 16591.0], [15.1, 16597.0], [15.2, 16601.0], [15.3, 16611.0], [15.4, 16619.0], [15.5, 16627.0], [15.6, 16631.0], [15.7, 16634.0], [15.8, 16643.0], [15.9, 16659.0], [16.0, 16668.0], [16.1, 16675.0], [16.2, 16681.0], [16.3, 16686.0], [16.4, 16689.0], [16.5, 16695.0], [16.6, 16703.0], [16.7, 16707.0], [16.8, 16716.0], [16.9, 16729.0], [17.0, 16734.0], [17.1, 16736.0], [17.2, 16745.0], [17.3, 16752.0], [17.4, 16760.0], [17.5, 16763.0], [17.6, 16771.0], [17.7, 16779.0], [17.8, 16782.0], [17.9, 16785.0], [18.0, 16794.0], [18.1, 16800.0], [18.2, 16805.0], [18.3, 16811.0], [18.4, 16823.0], [18.5, 16831.0], [18.6, 16840.0], [18.7, 16847.0], [18.8, 16856.0], [18.9, 16862.0], [19.0, 16867.0], [19.1, 16882.0], [19.2, 16899.0], [19.3, 16914.0], [19.4, 16919.0], [19.5, 16923.0], [19.6, 16928.0], [19.7, 16938.0], [19.8, 16945.0], [19.9, 16954.0], [20.0, 16968.0], [20.1, 16979.0], [20.2, 16985.0], [20.3, 16992.0], [20.4, 17004.0], [20.5, 17019.0], [20.6, 17035.0], [20.7, 17047.0], [20.8, 17055.0], [20.9, 17064.0], [21.0, 17072.0], [21.1, 17082.0], [21.2, 17090.0], [21.3, 17105.0], [21.4, 17115.0], [21.5, 17122.0], [21.6, 17131.0], [21.7, 17139.0], [21.8, 17144.0], [21.9, 17156.0], [22.0, 17170.0], [22.1, 17177.0], [22.2, 17181.0], [22.3, 17196.0], [22.4, 17205.0], [22.5, 17219.0], [22.6, 17229.0], [22.7, 17238.0], [22.8, 17245.0], [22.9, 17251.0], [23.0, 17258.0], [23.1, 17263.0], [23.2, 17270.0], [23.3, 17274.0], [23.4, 17284.0], [23.5, 17295.0], [23.6, 17304.0], [23.7, 17308.0], [23.8, 17320.0], [23.9, 17324.0], [24.0, 17331.0], [24.1, 17337.0], [24.2, 17341.0], [24.3, 17356.0], [24.4, 17368.0], [24.5, 17374.0], [24.6, 17384.0], [24.7, 17397.0], [24.8, 17401.0], [24.9, 17409.0], [25.0, 17425.0], [25.1, 17430.0], [25.2, 17439.0], [25.3, 17452.0], [25.4, 17461.0], [25.5, 17472.0], [25.6, 17476.0], [25.7, 17482.0], [25.8, 17492.0], [25.9, 17500.0], [26.0, 17511.0], [26.1, 17525.0], [26.2, 17530.0], [26.3, 17539.0], [26.4, 17544.0], [26.5, 17556.0], [26.6, 17562.0], [26.7, 17569.0], [26.8, 17573.0], [26.9, 17586.0], [27.0, 17598.0], [27.1, 17602.0], [27.2, 17611.0], [27.3, 17618.0], [27.4, 17626.0], [27.5, 17636.0], [27.6, 17642.0], [27.7, 17652.0], [27.8, 17659.0], [27.9, 17676.0], [28.0, 17683.0], [28.1, 17699.0], [28.2, 17707.0], [28.3, 17714.0], [28.4, 17725.0], [28.5, 17737.0], [28.6, 17744.0], [28.7, 17750.0], [28.8, 17760.0], [28.9, 17776.0], [29.0, 17784.0], [29.1, 17801.0], [29.2, 17810.0], [29.3, 17828.0], [29.4, 17837.0], [29.5, 17845.0], [29.6, 17857.0], [29.7, 17872.0], [29.8, 17882.0], [29.9, 17892.0], [30.0, 17899.0], [30.1, 17908.0], [30.2, 17917.0], [30.3, 17926.0], [30.4, 17936.0], [30.5, 17950.0], [30.6, 17958.0], [30.7, 17972.0], [30.8, 17984.0], [30.9, 17993.0], [31.0, 18004.0], [31.1, 18017.0], [31.2, 18023.0], [31.3, 18034.0], [31.4, 18048.0], [31.5, 18056.0], [31.6, 18065.0], [31.7, 18071.0], [31.8, 18082.0], [31.9, 18089.0], [32.0, 18099.0], [32.1, 18108.0], [32.2, 18114.0], [32.3, 18120.0], [32.4, 18131.0], [32.5, 18149.0], [32.6, 18158.0], [32.7, 18168.0], [32.8, 18174.0], [32.9, 18181.0], [33.0, 18189.0], [33.1, 18193.0], [33.2, 18200.0], [33.3, 18204.0], [33.4, 18208.0], [33.5, 18220.0], [33.6, 18232.0], [33.7, 18240.0], [33.8, 18248.0], [33.9, 18253.0], [34.0, 18259.0], [34.1, 18262.0], [34.2, 18267.0], [34.3, 18277.0], [34.4, 18283.0], [34.5, 18292.0], [34.6, 18297.0], [34.7, 18302.0], [34.8, 18313.0], [34.9, 18323.0], [35.0, 18330.0], [35.1, 18336.0], [35.2, 18345.0], [35.3, 18348.0], [35.4, 18353.0], [35.5, 18357.0], [35.6, 18361.0], [35.7, 18366.0], [35.8, 18372.0], [35.9, 18379.0], [36.0, 18384.0], [36.1, 18389.0], [36.2, 18395.0], [36.3, 18403.0], [36.4, 18409.0], [36.5, 18422.0], [36.6, 18430.0], [36.7, 18437.0], [36.8, 18444.0], [36.9, 18454.0], [37.0, 18465.0], [37.1, 18480.0], [37.2, 18490.0], [37.3, 18494.0], [37.4, 18506.0], [37.5, 18524.0], [37.6, 18531.0], [37.7, 18548.0], [37.8, 18561.0], [37.9, 18579.0], [38.0, 18589.0], [38.1, 18599.0], [38.2, 18608.0], [38.3, 18621.0], [38.4, 18635.0], [38.5, 18650.0], [38.6, 18671.0], [38.7, 18686.0], [38.8, 18715.0], [38.9, 18737.0], [39.0, 18747.0], [39.1, 18757.0], [39.2, 18773.0], [39.3, 18794.0], [39.4, 18809.0], [39.5, 18828.0], [39.6, 18846.0], [39.7, 18852.0], [39.8, 18869.0], [39.9, 18885.0], [40.0, 18903.0], [40.1, 18912.0], [40.2, 18925.0], [40.3, 18945.0], [40.4, 18960.0], [40.5, 18971.0], [40.6, 18987.0], [40.7, 18997.0], [40.8, 19026.0], [40.9, 19039.0], [41.0, 19061.0], [41.1, 19081.0], [41.2, 19094.0], [41.3, 19109.0], [41.4, 19126.0], [41.5, 19139.0], [41.6, 19163.0], [41.7, 19174.0], [41.8, 19197.0], [41.9, 19214.0], [42.0, 19225.0], [42.1, 19238.0], [42.2, 19255.0], [42.3, 19273.0], [42.4, 19306.0], [42.5, 19334.0], [42.6, 19370.0], [42.7, 19400.0], [42.8, 19411.0], [42.9, 19435.0], [43.0, 19455.0], [43.1, 19465.0], [43.2, 19480.0], [43.3, 19496.0], [43.4, 19523.0], [43.5, 19542.0], [43.6, 19559.0], [43.7, 19567.0], [43.8, 19576.0], [43.9, 19585.0], [44.0, 19606.0], [44.1, 19624.0], [44.2, 19628.0], [44.3, 19644.0], [44.4, 19655.0], [44.5, 19670.0], [44.6, 19678.0], [44.7, 19699.0], [44.8, 19712.0], [44.9, 19728.0], [45.0, 19752.0], [45.1, 19770.0], [45.2, 19793.0], [45.3, 19810.0], [45.4, 19828.0], [45.5, 19835.0], [45.6, 19850.0], [45.7, 19864.0], [45.8, 19887.0], [45.9, 19895.0], [46.0, 19907.0], [46.1, 19916.0], [46.2, 19934.0], [46.3, 19938.0], [46.4, 19948.0], [46.5, 19959.0], [46.6, 19972.0], [46.7, 19985.0], [46.8, 19998.0], [46.9, 20009.0], [47.0, 20013.0], [47.1, 20025.0], [47.2, 20033.0], [47.3, 20046.0], [47.4, 20055.0], [47.5, 20067.0], [47.6, 20074.0], [47.7, 20080.0], [47.8, 20085.0], [47.9, 20094.0], [48.0, 20102.0], [48.1, 20111.0], [48.2, 20119.0], [48.3, 20124.0], [48.4, 20139.0], [48.5, 20148.0], [48.6, 20157.0], [48.7, 20175.0], [48.8, 20190.0], [48.9, 20198.0], [49.0, 20204.0], [49.1, 20216.0], [49.2, 20228.0], [49.3, 20238.0], [49.4, 20253.0], [49.5, 20255.0], [49.6, 20269.0], [49.7, 20279.0], [49.8, 20286.0], [49.9, 20292.0], [50.0, 20299.0], [50.1, 20311.0], [50.2, 20317.0], [50.3, 20328.0], [50.4, 20335.0], [50.5, 20344.0], [50.6, 20360.0], [50.7, 20372.0], [50.8, 20382.0], [50.9, 20395.0], [51.0, 20406.0], [51.1, 20411.0], [51.2, 20425.0], [51.3, 20434.0], [51.4, 20443.0], [51.5, 20460.0], [51.6, 20479.0], [51.7, 20494.0], [51.8, 20501.0], [51.9, 20511.0], [52.0, 20520.0], [52.1, 20537.0], [52.2, 20542.0], [52.3, 20555.0], [52.4, 20560.0], [52.5, 20578.0], [52.6, 20589.0], [52.7, 20594.0], [52.8, 20607.0], [52.9, 20622.0], [53.0, 20630.0], [53.1, 20639.0], [53.2, 20644.0], [53.3, 20661.0], [53.4, 20667.0], [53.5, 20678.0], [53.6, 20690.0], [53.7, 20697.0], [53.8, 20718.0], [53.9, 20734.0], [54.0, 20745.0], [54.1, 20754.0], [54.2, 20761.0], [54.3, 20768.0], [54.4, 20779.0], [54.5, 20791.0], [54.6, 20800.0], [54.7, 20811.0], [54.8, 20815.0], [54.9, 20823.0], [55.0, 20830.0], [55.1, 20839.0], [55.2, 20852.0], [55.3, 20879.0], [55.4, 20891.0], [55.5, 20903.0], [55.6, 20907.0], [55.7, 20914.0], [55.8, 20924.0], [55.9, 20932.0], [56.0, 20952.0], [56.1, 20963.0], [56.2, 20983.0], [56.3, 21001.0], [56.4, 21022.0], [56.5, 21040.0], [56.6, 21066.0], [56.7, 21093.0], [56.8, 21113.0], [56.9, 21140.0], [57.0, 21151.0], [57.1, 21176.0], [57.2, 21199.0], [57.3, 21217.0], [57.4, 21253.0], [57.5, 21272.0], [57.6, 21309.0], [57.7, 21337.0], [57.8, 21354.0], [57.9, 21376.0], [58.0, 21405.0], [58.1, 21411.0], [58.2, 21428.0], [58.3, 21439.0], [58.4, 21465.0], [58.5, 21489.0], [58.6, 21499.0], [58.7, 21522.0], [58.8, 21537.0], [58.9, 21553.0], [59.0, 21566.0], [59.1, 21587.0], [59.2, 21599.0], [59.3, 21632.0], [59.4, 21662.0], [59.5, 21680.0], [59.6, 21695.0], [59.7, 21731.0], [59.8, 21769.0], [59.9, 21809.0], [60.0, 21827.0], [60.1, 21858.0], [60.2, 21884.0], [60.3, 21895.0], [60.4, 21913.0], [60.5, 21929.0], [60.6, 21951.0], [60.7, 21960.0], [60.8, 21987.0], [60.9, 22008.0], [61.0, 22046.0], [61.1, 22060.0], [61.2, 22083.0], [61.3, 22105.0], [61.4, 22131.0], [61.5, 22162.0], [61.6, 22185.0], [61.7, 22211.0], [61.8, 22233.0], [61.9, 22281.0], [62.0, 22304.0], [62.1, 22325.0], [62.2, 22340.0], [62.3, 22372.0], [62.4, 22384.0], [62.5, 22404.0], [62.6, 22436.0], [62.7, 22446.0], [62.8, 22465.0], [62.9, 22478.0], [63.0, 22492.0], [63.1, 22504.0], [63.2, 22520.0], [63.3, 22538.0], [63.4, 22550.0], [63.5, 22556.0], [63.6, 22569.0], [63.7, 22585.0], [63.8, 22618.0], [63.9, 22662.0], [64.0, 22684.0], [64.1, 22702.0], [64.2, 22721.0], [64.3, 22747.0], [64.4, 22784.0], [64.5, 22812.0], [64.6, 22839.0], [64.7, 22857.0], [64.8, 22891.0], [64.9, 22920.0], [65.0, 22949.0], [65.1, 22970.0], [65.2, 22994.0], [65.3, 23027.0], [65.4, 23070.0], [65.5, 23106.0], [65.6, 23128.0], [65.7, 23147.0], [65.8, 23168.0], [65.9, 23200.0], [66.0, 23230.0], [66.1, 23249.0], [66.2, 23269.0], [66.3, 23290.0], [66.4, 23307.0], [66.5, 23330.0], [66.6, 23365.0], [66.7, 23372.0], [66.8, 23391.0], [66.9, 23407.0], [67.0, 23420.0], [67.1, 23458.0], [67.2, 23477.0], [67.3, 23513.0], [67.4, 23534.0], [67.5, 23552.0], [67.6, 23562.0], [67.7, 23572.0], [67.8, 23590.0], [67.9, 23615.0], [68.0, 23623.0], [68.1, 23653.0], [68.2, 23670.0], [68.3, 23688.0], [68.4, 23702.0], [68.5, 23724.0], [68.6, 23740.0], [68.7, 23750.0], [68.8, 23767.0], [68.9, 23787.0], [69.0, 23803.0], [69.1, 23812.0], [69.2, 23832.0], [69.3, 23848.0], [69.4, 23859.0], [69.5, 23866.0], [69.6, 23878.0], [69.7, 23894.0], [69.8, 23905.0], [69.9, 23917.0], [70.0, 23933.0], [70.1, 23950.0], [70.2, 23969.0], [70.3, 23991.0], [70.4, 24000.0], [70.5, 24012.0], [70.6, 24037.0], [70.7, 24054.0], [70.8, 24074.0], [70.9, 24111.0], [71.0, 24154.0], [71.1, 24200.0], [71.2, 24218.0], [71.3, 24241.0], [71.4, 24269.0], [71.5, 24286.0], [71.6, 24301.0], [71.7, 24318.0], [71.8, 24362.0], [71.9, 24396.0], [72.0, 24434.0], [72.1, 24457.0], [72.2, 24497.0], [72.3, 24526.0], [72.4, 24564.0], [72.5, 24589.0], [72.6, 24629.0], [72.7, 24652.0], [72.8, 24665.0], [72.9, 24676.0], [73.0, 24706.0], [73.1, 24729.0], [73.2, 24779.0], [73.3, 24791.0], [73.4, 24806.0], [73.5, 24827.0], [73.6, 24844.0], [73.7, 24851.0], [73.8, 24870.0], [73.9, 24886.0], [74.0, 24914.0], [74.1, 24962.0], [74.2, 24973.0], [74.3, 25017.0], [74.4, 25034.0], [74.5, 25066.0], [74.6, 25081.0], [74.7, 25116.0], [74.8, 25139.0], [74.9, 25186.0], [75.0, 25206.0], [75.1, 25236.0], [75.2, 25275.0], [75.3, 25299.0], [75.4, 25313.0], [75.5, 25338.0], [75.6, 25362.0], [75.7, 25404.0], [75.8, 25428.0], [75.9, 25449.0], [76.0, 25479.0], [76.1, 25507.0], [76.2, 25557.0], [76.3, 25597.0], [76.4, 25626.0], [76.5, 25657.0], [76.6, 25683.0], [76.7, 25710.0], [76.8, 25769.0], [76.9, 25798.0], [77.0, 25820.0], [77.1, 25860.0], [77.2, 25892.0], [77.3, 25933.0], [77.4, 25967.0], [77.5, 25984.0], [77.6, 26024.0], [77.7, 26069.0], [77.8, 26121.0], [77.9, 26159.0], [78.0, 26199.0], [78.1, 26239.0], [78.2, 26282.0], [78.3, 26341.0], [78.4, 26414.0], [78.5, 26468.0], [78.6, 26487.0], [78.7, 26543.0], [78.8, 26585.0], [78.9, 26616.0], [79.0, 26630.0], [79.1, 26672.0], [79.2, 26716.0], [79.3, 26745.0], [79.4, 26767.0], [79.5, 26794.0], [79.6, 26834.0], [79.7, 26872.0], [79.8, 26895.0], [79.9, 26922.0], [80.0, 26971.0], [80.1, 27015.0], [80.2, 27038.0], [80.3, 27070.0], [80.4, 27099.0], [80.5, 27137.0], [80.6, 27178.0], [80.7, 27191.0], [80.8, 27237.0], [80.9, 27255.0], [81.0, 27290.0], [81.1, 27320.0], [81.2, 27346.0], [81.3, 27371.0], [81.4, 27403.0], [81.5, 27447.0], [81.6, 27480.0], [81.7, 27529.0], [81.8, 27569.0], [81.9, 27620.0], [82.0, 27695.0], [82.1, 27734.0], [82.2, 27766.0], [82.3, 27803.0], [82.4, 27898.0], [82.5, 27962.0], [82.6, 28015.0], [82.7, 28107.0], [82.8, 28149.0], [82.9, 28181.0], [83.0, 28272.0], [83.1, 28341.0], [83.2, 28396.0], [83.3, 28434.0], [83.4, 28474.0], [83.5, 28563.0], [83.6, 28601.0], [83.7, 28619.0], [83.8, 28682.0], [83.9, 28765.0], [84.0, 28820.0], [84.1, 28892.0], [84.2, 28945.0], [84.3, 29007.0], [84.4, 29079.0], [84.5, 29197.0], [84.6, 29258.0], [84.7, 29381.0], [84.8, 29448.0], [84.9, 29544.0], [85.0, 29788.0], [85.1, 29957.0], [85.2, 30449.0], [85.3, 30520.0], [85.4, 30633.0], [85.5, 30729.0], [85.6, 30884.0], [85.7, 31231.0], [85.8, 31262.0], [85.9, 31338.0], [86.0, 31394.0], [86.1, 31427.0], [86.2, 31449.0], [86.3, 31477.0], [86.4, 31504.0], [86.5, 31523.0], [86.6, 31570.0], [86.7, 31603.0], [86.8, 31642.0], [86.9, 31673.0], [87.0, 31702.0], [87.1, 31752.0], [87.2, 31820.0], [87.3, 31904.0], [87.4, 32007.0], [87.5, 32062.0], [87.6, 32164.0], [87.7, 32222.0], [87.8, 32257.0], [87.9, 32324.0], [88.0, 32369.0], [88.1, 32416.0], [88.2, 32430.0], [88.3, 32476.0], [88.4, 32548.0], [88.5, 32612.0], [88.6, 32678.0], [88.7, 32751.0], [88.8, 32814.0], [88.9, 32840.0], [89.0, 32892.0], [89.1, 32917.0], [89.2, 32964.0], [89.3, 33041.0], [89.4, 33077.0], [89.5, 33185.0], [89.6, 33247.0], [89.7, 33305.0], [89.8, 33354.0], [89.9, 33401.0], [90.0, 33439.0], [90.1, 33471.0], [90.2, 33502.0], [90.3, 33523.0], [90.4, 33560.0], [90.5, 33593.0], [90.6, 33637.0], [90.7, 33678.0], [90.8, 33713.0], [90.9, 33750.0], [91.0, 33803.0], [91.1, 33875.0], [91.2, 33952.0], [91.3, 34018.0], [91.4, 34104.0], [91.5, 34143.0], [91.6, 34175.0], [91.7, 34268.0], [91.8, 34396.0], [91.9, 34508.0], [92.0, 34585.0], [92.1, 34682.0], [92.2, 34806.0], [92.3, 34896.0], [92.4, 34975.0], [92.5, 35042.0], [92.6, 35152.0], [92.7, 35203.0], [92.8, 35365.0], [92.9, 35496.0], [93.0, 35528.0], [93.1, 35552.0], [93.2, 35612.0], [93.3, 35712.0], [93.4, 35772.0], [93.5, 35798.0], [93.6, 35819.0], [93.7, 35842.0], [93.8, 35890.0], [93.9, 35985.0], [94.0, 36067.0], [94.1, 36144.0], [94.2, 36280.0], [94.3, 36458.0], [94.4, 36786.0], [94.5, 37304.0], [94.6, 37427.0], [94.7, 37663.0], [94.8, 38545.0], [94.9, 40057.0], [95.0, 41074.0], [95.1, 41661.0], [95.2, 41701.0], [95.3, 41733.0], [95.4, 44168.0], [95.5, 47271.0], [95.6, 47758.0], [95.7, 47918.0], [95.8, 48238.0], [95.9, 48419.0], [96.0, 48993.0], [96.1, 49085.0], [96.2, 50436.0], [96.3, 81639.0], [96.4, 83139.0], [96.5, 84704.0], [96.6, 87105.0], [96.7, 87455.0], [96.8, 87710.0], [96.9, 87900.0], [97.0, 88148.0], [97.1, 88476.0], [97.2, 90074.0], [97.3, 95676.0], [97.4, 97274.0], [97.5, 97991.0], [97.6, 110671.0], [97.7, 129330.0], [97.8, 129444.0], [97.9, 129468.0], [98.0, 129483.0], [98.1, 129535.0], [98.2, 129596.0], [98.3, 129666.0], [98.4, 129720.0], [98.5, 129772.0], [98.6, 129837.0], [98.7, 129881.0], [98.8, 129903.0], [98.9, 129945.0], [99.0, 130159.0], [99.1, 130259.0], [99.2, 130370.0], [99.3, 130725.0], [99.4, 130754.0], [99.5, 130783.0], [99.6, 130854.0], [99.7, 130917.0], [99.8, 170445.0], [99.9, 170495.0], [100.0, 170510.0]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 13100.0, "maxY": 129.0, "series": [{"data": [[170400.0, 9.0], [83500.0, 1.0], [87500.0, 1.0], [88300.0, 3.0], [86700.0, 1.0], [89900.0, 2.0], [93900.0, 2.0], [90700.0, 1.0], [97100.0, 1.0], [97900.0, 2.0], [109100.0, 3.0], [129900.0, 13.0], [130700.0, 25.0], [34500.0, 9.0], [32900.0, 14.0], [33700.0, 17.0], [34100.0, 17.0], [33300.0, 15.0], [34900.0, 9.0], [35300.0, 4.0], [35700.0, 15.0], [36500.0, 2.0], [36100.0, 6.0], [36900.0, 4.0], [38500.0, 1.0], [38900.0, 1.0], [37700.0, 2.0], [37300.0, 4.0], [41300.0, 1.0], [42100.0, 1.0], [41700.0, 13.0], [44100.0, 1.0], [48100.0, 2.0], [48900.0, 4.0], [47700.0, 3.0], [47300.0, 4.0], [48500.0, 1.0], [50100.0, 1.0], [50500.0, 1.0], [49700.0, 1.0], [65800.0, 1.0], [83400.0, 1.0], [86600.0, 1.0], [87400.0, 4.0], [88200.0, 1.0], [90600.0, 1.0], [97000.0, 1.0], [97800.0, 1.0], [110600.0, 8.0], [129800.0, 18.0], [81700.0, 1.0], [84900.0, 1.0], [87300.0, 2.0], [88100.0, 3.0], [96900.0, 1.0], [97700.0, 1.0], [129700.0, 11.0], [13100.0, 1.0], [13300.0, 1.0], [13500.0, 2.0], [13600.0, 4.0], [13700.0, 2.0], [13800.0, 4.0], [13900.0, 5.0], [14000.0, 2.0], [14100.0, 4.0], [14200.0, 3.0], [14300.0, 2.0], [14400.0, 10.0], [14500.0, 5.0], [14600.0, 16.0], [14700.0, 7.0], [14800.0, 16.0], [14900.0, 23.0], [15000.0, 15.0], [15100.0, 8.0], [15200.0, 26.0], [15300.0, 21.0], [15400.0, 21.0], [15500.0, 17.0], [15600.0, 21.0], [15700.0, 40.0], [15800.0, 55.0], [15900.0, 77.0], [16000.0, 86.0], [16100.0, 94.0], [16200.0, 129.0], [16300.0, 129.0], [17200.0, 82.0], [16400.0, 103.0], [16600.0, 98.0], [16800.0, 80.0], [17000.0, 66.0], [17400.0, 77.0], [18200.0, 105.0], [17600.0, 72.0], [17800.0, 65.0], [18000.0, 75.0], [18400.0, 75.0], [18600.0, 44.0], [19400.0, 43.0], [18800.0, 45.0], [19000.0, 35.0], [19200.0, 39.0], [19600.0, 51.0], [19800.0, 49.0], [20000.0, 81.0], [20200.0, 75.0], [20400.0, 57.0], [21400.0, 44.0], [21000.0, 31.0], [20800.0, 62.0], [21200.0, 26.0], [20600.0, 67.0], [22000.0, 28.0], [21800.0, 31.0], [21600.0, 28.0], [22200.0, 20.0], [22400.0, 42.0], [23400.0, 32.0], [22600.0, 24.0], [23200.0, 33.0], [22800.0, 26.0], [23000.0, 19.0], [23600.0, 36.0], [23800.0, 53.0], [24000.0, 35.0], [24200.0, 32.0], [24400.0, 20.0], [24600.0, 33.0], [25400.0, 29.0], [25200.0, 24.0], [24800.0, 42.0], [25000.0, 28.0], [25800.0, 22.0], [25600.0, 27.0], [26000.0, 17.0], [26200.0, 17.0], [26400.0, 19.0], [26600.0, 24.0], [27000.0, 22.0], [27200.0, 22.0], [27400.0, 17.0], [27600.0, 11.0], [26800.0, 21.0], [28400.0, 16.0], [28600.0, 16.0], [27800.0, 8.0], [28000.0, 9.0], [28200.0, 8.0], [29000.0, 8.0], [29200.0, 6.0], [29400.0, 8.0], [29600.0, 1.0], [28800.0, 11.0], [30000.0, 1.0], [30200.0, 2.0], [30400.0, 7.0], [30600.0, 7.0], [29800.0, 1.0], [30800.0, 4.0], [31200.0, 11.0], [31600.0, 22.0], [31400.0, 23.0], [31800.0, 9.0], [32000.0, 8.0], [32200.0, 17.0], [32400.0, 22.0], [32600.0, 10.0], [33200.0, 9.0], [33600.0, 16.0], [32800.0, 17.0], [34400.0, 5.0], [34800.0, 11.0], [34000.0, 6.0], [35200.0, 5.0], [35600.0, 7.0], [36000.0, 10.0], [36800.0, 1.0], [36400.0, 6.0], [37600.0, 5.0], [38800.0, 2.0], [40800.0, 3.0], [40000.0, 1.0], [41600.0, 7.0], [41200.0, 1.0], [46400.0, 1.0], [46800.0, 1.0], [48400.0, 3.0], [47200.0, 2.0], [48000.0, 1.0], [50400.0, 2.0], [50000.0, 1.0], [49600.0, 1.0], [81600.0, 1.0], [83200.0, 2.0], [87200.0, 1.0], [88800.0, 1.0], [90400.0, 1.0], [96800.0, 2.0], [97600.0, 1.0], [129600.0, 10.0], [170500.0, 5.0], [83100.0, 2.0], [84700.0, 1.0], [87900.0, 5.0], [86300.0, 1.0], [87100.0, 3.0], [91100.0, 1.0], [96700.0, 1.0], [97500.0, 1.0], [129500.0, 13.0], [130300.0, 4.0], [33100.0, 7.0], [33900.0, 7.0], [34700.0, 5.0], [34300.0, 6.0], [33500.0, 23.0], [35100.0, 10.0], [35500.0, 20.0], [35900.0, 8.0], [36700.0, 1.0], [36300.0, 4.0], [37100.0, 1.0], [37500.0, 3.0], [38300.0, 1.0], [39100.0, 2.0], [40300.0, 1.0], [40700.0, 1.0], [41100.0, 4.0], [46700.0, 1.0], [46300.0, 1.0], [47900.0, 5.0], [48700.0, 1.0], [47500.0, 1.0], [48300.0, 5.0], [49500.0, 2.0], [51900.0, 1.0], [53100.0, 1.0], [83000.0, 4.0], [87800.0, 2.0], [88600.0, 1.0], [97400.0, 1.0], [129400.0, 20.0], [131000.0, 2.0], [130200.0, 9.0], [87700.0, 5.0], [88500.0, 1.0], [86900.0, 1.0], [98100.0, 1.0], [129300.0, 3.0], [130900.0, 8.0], [130100.0, 3.0], [16500.0, 101.0], [16700.0, 106.0], [16900.0, 79.0], [17100.0, 73.0], [17300.0, 86.0], [17500.0, 83.0], [17700.0, 67.0], [17900.0, 64.0], [18100.0, 80.0], [18300.0, 110.0], [18500.0, 53.0], [18900.0, 50.0], [18700.0, 42.0], [19100.0, 41.0], [19300.0, 23.0], [19700.0, 37.0], [20300.0, 67.0], [19500.0, 45.0], [19900.0, 60.0], [20100.0, 66.0], [21100.0, 33.0], [20900.0, 55.0], [21300.0, 28.0], [21500.0, 41.0], [20500.0, 66.0], [20700.0, 62.0], [21700.0, 18.0], [22100.0, 28.0], [21900.0, 38.0], [22300.0, 36.0], [22500.0, 47.0], [22700.0, 25.0], [23500.0, 38.0], [22900.0, 26.0], [23100.0, 29.0], [23300.0, 32.0], [23700.0, 43.0], [23900.0, 45.0], [24100.0, 14.0], [24500.0, 20.0], [24300.0, 26.0], [24700.0, 24.0], [24900.0, 23.0], [25300.0, 26.0], [25100.0, 20.0], [25500.0, 15.0], [25900.0, 22.0], [25700.0, 14.0], [26100.0, 16.0], [26300.0, 7.0], [26500.0, 14.0], [27300.0, 24.0], [27100.0, 23.0], [27500.0, 16.0], [26700.0, 25.0], [26900.0, 17.0], [27700.0, 18.0], [28100.0, 16.0], [27900.0, 11.0], [28500.0, 11.0], [28300.0, 12.0], [29300.0, 8.0], [28700.0, 8.0], [29100.0, 8.0], [28900.0, 13.0], [29500.0, 8.0], [30500.0, 6.0], [30700.0, 7.0], [29700.0, 6.0], [29900.0, 3.0], [30100.0, 1.0], [30300.0, 1.0], [30900.0, 2.0], [31700.0, 12.0], [31300.0, 15.0], [31500.0, 21.0], [31100.0, 1.0], [31900.0, 6.0], [32100.0, 9.0], [32300.0, 11.0], [32500.0, 9.0], [32700.0, 11.0], [33000.0, 15.0], [33800.0, 12.0], [34200.0, 9.0], [33400.0, 21.0], [34600.0, 6.0], [35000.0, 6.0], [35400.0, 5.0], [35800.0, 21.0], [36200.0, 4.0], [36600.0, 1.0], [37400.0, 5.0], [39400.0, 1.0], [41000.0, 2.0], [47000.0, 1.0], [48200.0, 1.0], [49000.0, 7.0], [47800.0, 4.0], [53000.0, 1.0], [82000.0, 1.0], [87600.0, 3.0], [88400.0, 3.0], [86800.0, 1.0], [90000.0, 2.0], [95600.0, 1.0], [97200.0, 1.0], [98000.0, 1.0], [130000.0, 1.0], [130800.0, 6.0]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 170500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 171.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6773.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6773.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 171.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 382.83009079118006, "minX": 1.6126302E12, "maxY": 700.0, "series": [{"data": [[1.61263026E12, 700.0], [1.61263044E12, 700.0], [1.6126305E12, 382.83009079118006], [1.61263032E12, 700.0], [1.61263038E12, 700.0], [1.6126302E12, 700.0]], "isOverall": false, "label": "Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6126305E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17810.0, "minX": 2.0, "maxY": 130962.0, "series": [{"data": [[2.0, 130263.0], [4.0, 130297.0], [7.0, 130315.0], [9.0, 130236.0], [10.0, 21316.0], [11.0, 33750.0], [12.0, 22080.0], [13.0, 26985.0], [14.0, 23989.0], [15.0, 21128.0], [16.0, 30729.0], [17.0, 41750.0], [18.0, 41738.0], [19.0, 41736.0], [20.0, 41734.0], [22.0, 41732.5], [23.0, 41729.0], [24.0, 41735.0], [25.0, 20952.0], [26.0, 41706.0], [27.0, 41703.0], [28.0, 41702.0], [29.0, 20823.0], [31.0, 31259.5], [33.0, 41698.0], [32.0, 20352.0], [35.0, 41682.0], [34.0, 41702.0], [37.0, 20262.0], [36.0, 20351.0], [39.0, 20838.0], [38.0, 41692.0], [41.0, 41684.0], [40.0, 20800.0], [43.0, 33493.0], [42.0, 20792.0], [44.0, 41661.0], [46.0, 37586.5], [49.0, 33487.0], [48.0, 27256.5], [51.0, 20810.0], [53.0, 27283.5], [55.0, 33539.0], [54.0, 20857.0], [57.0, 20790.0], [56.0, 33751.0], [59.0, 33764.5], [61.0, 33691.0], [60.0, 33471.0], [63.0, 33547.5], [67.0, 33448.0], [66.0, 20915.0], [65.0, 20889.0], [64.0, 33466.0], [71.0, 20899.0], [70.0, 20820.0], [69.0, 33738.0], [68.0, 20750.0], [75.0, 20909.0], [74.0, 20328.0], [73.0, 20916.0], [72.0, 20882.0], [79.0, 20847.0], [78.0, 33612.0], [77.0, 20892.0], [76.0, 20911.0], [83.0, 20839.0], [82.0, 20839.5], [80.0, 20875.0], [87.0, 20749.0], [86.0, 20745.0], [85.0, 20742.0], [84.0, 20834.0], [91.0, 20687.0], [90.0, 20718.0], [89.0, 20696.0], [88.0, 20723.0], [95.0, 20657.0], [94.0, 41211.0], [93.0, 20671.0], [92.0, 20712.0], [99.0, 20628.0], [98.0, 20643.0], [97.0, 30896.0], [103.0, 20622.0], [102.0, 41170.0], [101.0, 41191.0], [100.0, 20637.0], [107.0, 20498.0], [106.0, 20527.0], [105.0, 20557.0], [104.0, 20602.0], [111.0, 20068.0], [110.0, 20118.0], [109.0, 42142.0], [108.0, 20438.0], [115.0, 20118.0], [114.0, 20077.0], [113.0, 20109.0], [112.0, 20048.0], [119.0, 20098.0], [118.0, 20029.0], [117.0, 20077.0], [116.0, 19833.0], [123.0, 20080.0], [122.0, 19987.0], [120.0, 19910.0], [127.0, 19847.0], [126.0, 19922.0], [125.0, 20136.0], [135.0, 20056.0], [134.0, 19793.0], [133.0, 19893.0], [132.0, 19835.0], [131.0, 19967.0], [130.0, 20312.0], [129.0, 19979.0], [128.0, 20335.0], [143.0, 20192.0], [142.0, 20176.0], [141.0, 20178.0], [140.0, 19754.0], [139.0, 20015.0], [138.0, 19819.0], [137.0, 19818.0], [151.0, 20198.0], [150.0, 20251.0], [149.0, 20331.0], [148.0, 20100.0], [147.0, 20172.0], [146.0, 20022.0], [145.0, 19952.0], [144.0, 20083.0], [159.0, 20013.0], [158.0, 20100.0], [157.0, 20074.0], [156.0, 20139.0], [155.0, 20122.0], [154.0, 19961.0], [153.0, 20125.5], [167.0, 20040.0], [166.0, 20067.0], [165.0, 20052.0], [163.0, 20057.0], [162.0, 20058.0], [161.0, 19907.0], [160.0, 20148.0], [175.0, 19976.0], [174.0, 20179.0], [173.0, 19959.0], [172.0, 20175.0], [171.0, 19981.0], [170.0, 20117.0], [169.0, 20085.0], [168.0, 20054.0], [183.0, 19334.0], [182.0, 19348.0], [181.0, 34801.0], [180.0, 19604.0], [179.0, 19909.0], [178.0, 20018.0], [177.0, 20012.0], [176.0, 20118.0], [190.0, 19235.0], [189.0, 34606.0], [188.0, 34652.0], [187.0, 34585.0], [186.0, 19255.0], [185.0, 19288.0], [184.0, 34682.0], [199.0, 18327.0], [198.0, 18262.0], [197.0, 18930.0], [196.0, 19051.0], [195.0, 34535.0], [194.0, 19189.0], [193.0, 34508.0], [192.0, 34502.5], [207.0, 18189.0], [206.0, 18194.0], [205.0, 18158.0], [204.0, 18203.0], [203.0, 18200.0], [202.0, 18168.0], [201.0, 18297.0], [200.0, 18243.0], [215.0, 18169.0], [214.0, 18061.0], [213.0, 18089.0], [212.0, 18089.0], [211.0, 18094.0], [210.0, 18165.0], [209.0, 18088.0], [208.0, 18110.0], [223.0, 17989.0], [222.0, 18141.0], [221.0, 18017.0], [220.0, 18313.0], [219.0, 18036.0], [218.0, 18022.0], [217.0, 18002.0], [216.0, 18143.0], [231.0, 18168.0], [230.0, 18194.0], [229.0, 18259.0], [228.0, 17811.0], [227.0, 18402.0], [226.0, 18205.0], [225.0, 17965.0], [224.0, 18313.0], [239.0, 18747.0], [238.0, 18885.0], [237.0, 18244.0], [236.0, 18153.0], [235.0, 21916.0], [234.0, 21913.0], [233.0, 18874.0], [232.0, 18122.0], [247.0, 18841.0], [246.0, 18890.0], [245.0, 18769.0], [244.0, 20334.0], [242.0, 18854.0], [241.0, 18636.0], [240.0, 17810.0], [255.0, 18987.0], [254.0, 21851.0], [253.0, 18577.0], [252.0, 21939.0], [251.0, 18962.0], [250.0, 18906.0], [249.0, 17830.0], [248.0, 18686.0], [270.0, 21428.0], [271.0, 21378.0], [269.0, 21411.0], [268.0, 18754.0], [267.0, 18846.0], [266.0, 18898.0], [265.0, 18296.0], [264.0, 18903.0], [263.0, 18676.0], [257.0, 21695.0], [256.0, 21893.0], [259.0, 21891.0], [258.0, 21951.0], [262.0, 18669.0], [261.0, 18619.0], [260.0, 18677.0], [286.0, 18747.0], [287.0, 18411.0], [284.0, 18794.0], [275.0, 18856.0], [274.0, 18690.0], [273.0, 21590.0], [272.0, 18458.0], [283.0, 20403.0], [282.0, 18797.0], [280.0, 18924.0], [279.0, 18816.0], [278.0, 18912.0], [277.0, 18836.0], [276.0, 18677.0], [302.0, 18638.0], [303.0, 18890.0], [301.0, 18625.0], [300.0, 18905.0], [299.0, 18917.0], [298.0, 20124.0], [297.0, 20284.0], [296.0, 19417.0], [295.0, 18954.0], [289.0, 19026.0], [288.0, 18805.0], [291.0, 21989.0], [290.0, 18719.0], [294.0, 18448.0], [293.0, 20815.0], [292.0, 18474.0], [318.0, 21795.0], [319.0, 18319.0], [317.0, 21827.0], [316.0, 18799.0], [315.0, 18514.0], [314.0, 18620.0], [313.0, 21929.0], [312.0, 18663.0], [311.0, 18831.0], [305.0, 19090.0], [304.0, 18396.0], [307.0, 20085.0], [306.0, 18351.0], [310.0, 19100.0], [309.0, 18354.0], [308.0, 18848.0], [334.0, 19396.0], [335.0, 18205.0], [333.0, 20349.0], [332.0, 18268.0], [331.0, 21960.0], [330.0, 19573.5], [328.0, 18280.0], [327.0, 21731.0], [321.0, 18549.0], [323.0, 19548.0], [322.0, 34779.0], [326.0, 18422.0], [325.0, 18331.0], [324.0, 18990.0], [350.0, 20000.0], [351.0, 20121.0], [349.0, 27279.0], [348.0, 19915.0], [347.0, 18065.0], [346.0, 21021.0], [345.0, 20074.0], [344.0, 27395.0], [343.0, 21408.0], [337.0, 18158.0], [336.0, 20069.0], [339.0, 21477.0], [338.0, 21216.0], [342.0, 20106.0], [341.0, 21212.0], [340.0, 19469.0], [366.0, 21465.0], [367.0, 18018.0], [365.0, 18206.0], [364.0, 21509.0], [363.0, 19943.0], [362.0, 19912.0], [361.0, 21692.0], [360.0, 18184.0], [359.0, 18189.0], [353.0, 27246.0], [352.0, 20051.0], [355.0, 20027.0], [354.0, 19945.0], [358.0, 21665.0], [357.0, 19936.0], [356.0, 21304.0], [382.0, 20817.0], [383.0, 36530.0], [381.0, 20760.0], [380.0, 20907.0], [379.0, 19306.0], [378.0, 19842.0], [377.0, 26745.0], [376.0, 23987.0], [375.0, 26780.0], [369.0, 17987.0], [368.0, 19863.0], [371.0, 21519.0], [370.0, 18097.0], [374.0, 19465.0], [373.0, 18036.0], [372.0, 21599.0], [398.0, 36444.0], [399.0, 36319.0], [397.0, 20323.0], [396.0, 20311.0], [395.0, 36341.0], [394.0, 36397.0], [393.0, 21902.0], [392.0, 36458.0], [391.0, 36489.0], [385.0, 20252.0], [384.0, 20358.0], [387.0, 20315.0], [386.0, 22083.0], [390.0, 36439.0], [388.0, 36472.0], [415.0, 33302.0], [414.0, 25653.666666666668], [403.0, 20095.0], [402.0, 33568.0], [401.0, 36363.0], [400.0, 20473.0], [411.0, 20983.0], [410.0, 33484.0], [409.0, 21643.0], [408.0, 33502.0], [407.0, 36208.0], [406.0, 29794.0], [405.0, 27912.5], [430.0, 36058.0], [431.0, 36144.0], [429.0, 36067.0], [428.0, 36078.0], [427.0, 26406.0], [426.0, 20408.0], [425.0, 36143.0], [423.0, 36096.0], [419.0, 27810.0], [417.0, 24141.0], [422.0, 26414.0], [421.0, 21818.0], [420.0, 19954.0], [446.0, 20318.0], [447.0, 26421.0], [445.0, 22174.0], [444.0, 36028.0], [443.0, 36068.0], [442.0, 33281.0], [441.0, 20980.0], [440.0, 21507.0], [439.0, 36018.0], [433.0, 22307.0], [432.0, 36100.0], [435.0, 21596.0], [434.0, 26624.0], [438.0, 29370.0], [437.0, 36012.0], [436.0, 26604.0], [462.0, 32755.0], [463.0, 26236.0], [461.0, 29057.0], [460.0, 21717.0], [459.0, 26057.0], [458.0, 22076.0], [457.0, 21826.0], [456.0, 33077.0], [455.0, 35846.0], [449.0, 29376.0], [448.0, 26199.0], [451.0, 21604.0], [450.0, 33210.0], [454.0, 26044.0], [453.0, 21638.0], [452.0, 26444.0], [478.0, 25775.0], [479.0, 27168.0], [477.0, 27488.0], [476.0, 27565.0], [475.0, 25655.0], [474.0, 25046.0], [473.0, 32623.0], [472.0, 28916.0], [471.0, 25978.0], [465.0, 26123.0], [464.0, 21829.0], [467.0, 21601.0], [466.0, 26018.0], [470.0, 26024.0], [469.0, 20768.0], [468.0, 21264.0], [494.0, 26586.0], [495.0, 26554.0], [493.0, 24492.0], [492.0, 26607.0], [491.0, 28434.0], [490.0, 24497.0], [489.0, 26734.0], [488.0, 26764.0], [487.0, 24716.0], [481.0, 27325.0], [480.0, 27385.0], [483.0, 24685.0], [482.0, 26837.0], [486.0, 25060.5], [485.0, 24610.0], [499.0, 24340.0], [511.0, 130905.0], [509.0, 130824.5], [507.0, 130838.0], [505.0, 130851.5], [504.0, 130772.0], [502.0, 130777.0], [500.0, 130962.0], [498.0, 26616.0], [497.0, 24621.0], [496.0, 24774.0], [538.0, 23743.0], [542.0, 23128.0], [543.0, 23053.0], [528.0, 130788.0], [533.0, 130810.5], [531.0, 130929.0], [541.0, 23254.0], [540.0, 23626.0], [539.0, 23653.0], [537.0, 130726.0], [519.0, 130913.0], [517.0, 130800.0], [516.0, 130802.66666666667], [515.0, 130884.0], [513.0, 130824.5], [512.0, 130739.0], [527.0, 130725.0], [526.0, 130728.5], [524.0, 130741.0], [523.0, 130756.0], [522.0, 130829.0], [520.0, 130747.0], [535.0, 130714.0], [534.0, 130771.0], [572.0, 26287.0], [575.0, 27290.0], [561.0, 26483.0], [560.0, 26521.0], [563.0, 22001.0], [562.0, 27516.0], [565.0, 25387.0], [564.0, 22024.0], [574.0, 27255.0], [573.0, 21923.0], [571.0, 26277.0], [570.0, 26341.0], [569.0, 26316.0], [568.0, 21980.0], [559.0, 26627.0], [545.0, 27085.0], [544.0, 28634.0], [547.0, 27094.0], [546.0, 28113.0], [549.0, 26999.0], [548.0, 22819.0], [551.0, 21794.0], [550.0, 26977.0], [558.0, 22314.0], [557.0, 27663.0], [556.0, 27778.0], [555.0, 29788.0], [554.0, 26895.0], [553.0, 22474.0], [552.0, 26942.0], [567.0, 27340.0], [566.0, 21066.0], [604.0, 26493.0], [607.0, 26484.0], [593.0, 26834.0], [592.0, 26971.0], [595.0, 26773.0], [594.0, 26763.0], [597.0, 26715.0], [596.0, 26667.0], [606.0, 26482.0], [605.0, 26564.0], [603.0, 26603.0], [602.0, 26624.0], [601.0, 26655.0], [600.0, 26658.0], [591.0, 27017.0], [577.0, 27278.0], [576.0, 27308.0], [579.0, 21880.0], [578.0, 25915.0], [581.0, 21804.0], [580.0, 21905.0], [583.0, 21769.0], [582.0, 27250.0], [590.0, 27130.0], [589.0, 27036.0], [588.0, 27178.0], [587.0, 27038.0], [586.0, 25982.0], [585.0, 27116.0], [584.0, 26029.0], [599.0, 26678.0], [598.0, 26672.0], [636.0, 20502.0], [639.0, 20331.0], [625.0, 23177.0], [624.0, 23231.0], [627.0, 22187.0], [626.0, 23998.0], [629.0, 21202.0], [628.0, 21951.0], [638.0, 19972.0], [637.0, 20429.0], [635.0, 20444.0], [634.0, 20664.0], [633.0, 20734.0], [632.0, 20502.0], [623.0, 23372.0], [609.0, 25429.0], [608.0, 26400.0], [611.0, 24220.0], [610.0, 26084.0], [613.0, 24279.0], [612.0, 23572.0], [615.0, 24184.0], [614.0, 24694.0], [622.0, 23330.0], [621.0, 23323.0], [620.0, 24439.0], [619.0, 24077.0], [618.0, 23292.0], [617.0, 24217.0], [616.0, 24228.0], [631.0, 20593.0], [630.0, 20624.0], [668.0, 20907.0], [671.0, 20811.0], [657.0, 21004.0], [656.0, 19771.0], [659.0, 19655.0], [658.0, 20992.0], [661.0, 19992.0], [660.0, 19998.0], [670.0, 19478.0], [669.0, 19875.0], [667.0, 19906.0], [666.0, 19547.0], [665.0, 20944.0], [664.0, 20000.0], [655.0, 20078.0], [640.0, 20135.0], [643.0, 20086.0], [641.0, 20317.0], [645.0, 19887.0], [644.0, 20215.0], [647.0, 27371.0], [646.0, 20029.0], [654.0, 21337.0], [653.0, 20109.0], [652.0, 19892.0], [651.0, 19925.0], [650.0, 20148.0], [649.0, 19844.0], [648.0, 27346.0], [663.0, 20069.0], [662.0, 19902.0], [697.0, 38389.0], [692.0, 110674.0], [700.0, 24703.581745396303], [699.0, 19133.0], [698.0, 18193.0], [696.0, 19573.0], [679.0, 20706.0], [678.0, 38898.0], [677.0, 20775.0], [676.0, 20755.0], [675.0, 19729.0], [674.0, 19773.0], [673.0, 20838.0], [672.0, 19838.0], [695.0, 19807.0], [694.0, 25956.0], [693.0, 19204.0], [689.0, 110671.0], [684.0, 19573.0], [683.0, 20635.0], [682.0, 19705.0], [681.0, 20612.0], [680.0, 19566.0]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[664.784130184333, 25420.828629032236]], "isOverall": false, "label": "Home-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 700.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1551.3333333333333, "minX": 1.6126302E12, "maxY": 10737.333333333334, "series": [{"data": [[1.61263026E12, 6953.5], [1.61263044E12, 7032.233333333334], [1.6126305E12, 6144.2], [1.61263032E12, 7274.516666666666], [1.61263038E12, 10737.333333333334], [1.6126302E12, 4169.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61263026E12, 2948.8333333333335], [1.61263044E12, 2782.0], [1.6126305E12, 1551.3333333333333], [1.61263032E12, 2849.1666666666665], [1.61263038E12, 2760.3333333333335], [1.6126302E12, 1783.1666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6126305E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 21453.944106925832, "minX": 1.6126302E12, "maxY": 31282.245136186782, "series": [{"data": [[1.61263026E12, 23618.935341660577], [1.61263044E12, 24644.762751159167], [1.6126305E12, 31282.245136186782], [1.61263032E12, 22320.105501130358], [1.61263038E12, 30038.415935672594], [1.6126302E12, 21453.944106925832]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6126305E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 7359.640542577244, "minX": 1.6126302E12, "maxY": 10062.177743431203, "series": [{"data": [[1.61263026E12, 9913.109478324755], [1.61263044E12, 10062.177743431203], [1.6126305E12, 8918.482490272376], [1.61263032E12, 7359.640542577244], [1.61263038E12, 8067.033625730994], [1.6126302E12, 7559.370595382761]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6126305E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1850.5565006075324, "minX": 1.6126302E12, "maxY": 11300.08430609599, "series": [{"data": [[1.61263026E12, 4215.58706833211], [1.61263044E12, 4874.093508500773], [1.6126305E12, 11300.08430609599], [1.61263032E12, 2900.5990957045924], [1.61263038E12, 10495.26169590646], [1.6126302E12, 1850.5565006075324]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6126305E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 13196.0, "minX": 1.6126302E12, "maxY": 98172.0, "series": [{"data": [[1.61263026E12, 98172.0], [1.61263044E12, 91176.0], [1.6126305E12, 42142.0], [1.61263032E12, 51955.0], [1.61263038E12, 82061.0], [1.6126302E12, 37692.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61263026E12, 31469.0], [1.61263044E12, 32769.5], [1.6126305E12, 33706.0], [1.61263032E12, 29202.2], [1.61263038E12, 27558.0], [1.6126302E12, 35020.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61263026E12, 96901.56], [1.61263044E12, 88131.65000000002], [1.6126305E12, 41732.83], [1.61263032E12, 33727.03999999999], [1.61263038E12, 40901.0], [1.6126302E12, 35939.84]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61263026E12, 32425.8], [1.61263044E12, 47851.0], [1.6126305E12, 36344.3], [1.61263032E12, 31817.6], [1.61263038E12, 33172.0], [1.6126302E12, 35760.8]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61263026E12, 13744.0], [1.61263044E12, 15556.0], [1.6126305E12, 16676.0], [1.61263032E12, 15600.0], [1.61263038E12, 15221.0], [1.6126302E12, 13196.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61263026E12, 19238.0], [1.61263044E12, 20596.5], [1.6126305E12, 20838.5], [1.61263032E12, 19518.0], [1.61263038E12, 20956.5], [1.6126302E12, 17514.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6126305E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 15385.0, "minX": 1.0, "maxY": 170494.0, "series": [{"data": [[2.0, 23999.0], [3.0, 23351.0], [4.0, 21754.0], [5.0, 23560.0], [6.0, 22954.0], [7.0, 23737.0], [8.0, 22726.5], [9.0, 21734.5], [10.0, 22573.0], [11.0, 26229.0], [12.0, 26071.5], [13.0, 27578.5], [14.0, 24844.5], [15.0, 24184.0], [16.0, 20397.0], [17.0, 19524.0], [18.0, 19718.5], [19.0, 21507.0], [20.0, 22058.0], [21.0, 22695.0], [22.0, 21943.5], [23.0, 22842.5], [24.0, 24404.0], [25.0, 24533.0], [26.0, 20254.5], [27.0, 20087.0], [28.0, 19397.0], [29.0, 21918.0], [30.0, 17279.0], [31.0, 16283.5], [33.0, 24201.5], [35.0, 17490.0], [34.0, 21841.0], [37.0, 25948.5], [36.0, 23333.0], [39.0, 20690.0], [41.0, 22728.0], [40.0, 20326.0], [43.0, 23131.0], [42.0, 19887.5], [45.0, 21396.5], [47.0, 20412.0], [49.0, 20501.0], [51.0, 19847.0], [50.0, 17657.0], [53.0, 21350.0], [52.0, 28070.5], [54.0, 16945.0], [55.0, 18097.0], [56.0, 19124.0], [57.0, 18031.0], [58.0, 16934.5], [59.0, 19054.0], [60.0, 20025.0], [63.0, 18353.0], [64.0, 33284.0], [67.0, 16906.5], [66.0, 24301.5], [65.0, 22436.0], [69.0, 18644.0], [68.0, 18750.5], [73.0, 16452.0], [76.0, 22822.5], [83.0, 16378.0], [88.0, 17120.0], [91.0, 16451.0], [90.0, 19248.0], [93.0, 16291.0], [92.0, 21040.0], [97.0, 17504.5], [99.0, 16766.0], [103.0, 16361.0], [107.0, 35529.0], [113.0, 16670.0], [127.0, 15385.0], [149.0, 18219.0], [1.0, 22932.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 130222.0], [33.0, 109166.0], [37.0, 110671.5], [9.0, 130294.0], [39.0, 129880.5], [76.0, 129619.5], [38.0, 130774.5], [23.0, 170494.0], [13.0, 130998.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 149.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 19535.0, "series": [{"data": [[2.0, 12777.0], [3.0, 10213.0], [4.0, 9317.5], [5.0, 11600.0], [6.0, 11634.5], [7.0, 9608.0], [8.0, 8619.5], [9.0, 10055.5], [10.0, 7967.0], [11.0, 12694.5], [12.0, 14489.0], [13.0, 13775.5], [14.0, 12154.0], [15.0, 11861.0], [16.0, 8615.0], [17.0, 6874.0], [18.0, 6093.0], [19.0, 9949.5], [20.0, 9100.0], [21.0, 11510.5], [22.0, 7567.5], [23.0, 10358.5], [24.0, 9523.5], [25.0, 10859.5], [26.0, 6715.0], [27.0, 6722.0], [28.0, 5720.0], [29.0, 8866.0], [30.0, 4092.5], [31.0, 1887.5], [33.0, 11736.0], [35.0, 4316.0], [34.0, 6908.5], [37.0, 12734.5], [36.0, 10494.5], [39.0, 11531.0], [41.0, 7041.0], [40.0, 8193.0], [43.0, 10283.0], [42.0, 7418.5], [45.0, 9521.0], [47.0, 10610.0], [49.0, 5826.0], [51.0, 3999.0], [50.0, 4050.5], [53.0, 6098.0], [52.0, 13662.5], [54.0, 2105.5], [55.0, 4078.0], [56.0, 4888.5], [57.0, 5250.0], [58.0, 3680.0], [59.0, 3932.5], [60.0, 6859.0], [63.0, 3418.0], [64.0, 18607.5], [67.0, 2260.0], [66.0, 10586.0], [65.0, 8054.0], [69.0, 3321.0], [68.0, 1795.0], [73.0, 4788.0], [76.0, 7823.0], [83.0, 1266.0], [88.0, 1621.0], [91.0, 1408.0], [90.0, 2088.5], [93.0, 1749.0], [92.0, 13202.0], [97.0, 2122.5], [99.0, 1342.0], [103.0, 885.0], [107.0, 19535.0], [113.0, 1634.0], [127.0, 737.0], [149.0, 5113.0], [1.0, 9893.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 0.0], [33.0, 0.0], [37.0, 0.0], [9.0, 0.0], [39.0, 0.0], [76.0, 0.0], [38.0, 0.0], [23.0, 0.0], [13.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 149.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4.933333333333334, "minX": 1.6126302E12, "maxY": 24.983333333333334, "series": [{"data": [[1.61263026E12, 21.716666666666665], [1.61263044E12, 21.183333333333334], [1.6126305E12, 4.933333333333334], [1.61263032E12, 19.316666666666666], [1.61263038E12, 23.6], [1.6126302E12, 24.983333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6126305E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.6126302E12, "maxY": 22.683333333333334, "series": [{"data": [[1.61263026E12, 22.683333333333334], [1.61263044E12, 21.4], [1.6126305E12, 11.933333333333334], [1.61263032E12, 21.916666666666668], [1.61263038E12, 21.233333333333334], [1.6126302E12, 13.716666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.61263044E12, 0.11666666666666667], [1.6126305E12, 0.7833333333333333], [1.61263032E12, 0.2], [1.61263038E12, 1.3333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.61263044E12, 0.05], [1.6126305E12, 0.13333333333333333], [1.61263038E12, 0.23333333333333334]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6126305E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.6126302E12, "maxY": 22.683333333333334, "series": [{"data": [[1.61263026E12, 22.683333333333334], [1.61263044E12, 21.4], [1.6126305E12, 11.933333333333334], [1.61263032E12, 21.916666666666668], [1.61263038E12, 21.233333333333334], [1.6126302E12, 13.716666666666667]], "isOverall": false, "label": "Home-success", "isController": false}, {"data": [[1.61263044E12, 0.16666666666666666], [1.6126305E12, 0.9166666666666666], [1.61263032E12, 0.2], [1.61263038E12, 1.5666666666666667]], "isOverall": false, "label": "Home-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6126305E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.6126302E12, "maxY": 22.683333333333334, "series": [{"data": [[1.61263026E12, 22.683333333333334], [1.61263044E12, 21.4], [1.6126305E12, 11.933333333333334], [1.61263032E12, 21.916666666666668], [1.61263038E12, 21.233333333333334], [1.6126302E12, 13.716666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.61263044E12, 0.16666666666666666], [1.6126305E12, 0.9166666666666666], [1.61263032E12, 0.2], [1.61263038E12, 1.5666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6126305E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

