/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 11307.0, "minX": 0.0, "maxY": 215114.0, "series": [{"data": [[0.0, 11307.0], [0.1, 11891.0], [0.2, 12927.0], [0.3, 13636.0], [0.4, 13856.0], [0.5, 13891.0], [0.6, 13995.0], [0.7, 14081.0], [0.8, 14148.0], [0.9, 14173.0], [1.0, 14219.0], [1.1, 14244.0], [1.2, 14261.0], [1.3, 14290.0], [1.4, 14312.0], [1.5, 14347.0], [1.6, 14364.0], [1.7, 14399.0], [1.8, 14430.0], [1.9, 14479.0], [2.0, 14547.0], [2.1, 14596.0], [2.2, 14633.0], [2.3, 14689.0], [2.4, 14733.0], [2.5, 14786.0], [2.6, 14814.0], [2.7, 14841.0], [2.8, 14861.0], [2.9, 14873.0], [3.0, 14906.0], [3.1, 14944.0], [3.2, 14993.0], [3.3, 15012.0], [3.4, 15045.0], [3.5, 15068.0], [3.6, 15092.0], [3.7, 15115.0], [3.8, 15138.0], [3.9, 15170.0], [4.0, 15198.0], [4.1, 15216.0], [4.2, 15242.0], [4.3, 15261.0], [4.4, 15278.0], [4.5, 15295.0], [4.6, 15313.0], [4.7, 15323.0], [4.8, 15333.0], [4.9, 15339.0], [5.0, 15353.0], [5.1, 15370.0], [5.2, 15397.0], [5.3, 15427.0], [5.4, 15437.0], [5.5, 15456.0], [5.6, 15474.0], [5.7, 15478.0], [5.8, 15497.0], [5.9, 15516.0], [6.0, 15527.0], [6.1, 15556.0], [6.2, 15568.0], [6.3, 15590.0], [6.4, 15602.0], [6.5, 15613.0], [6.6, 15625.0], [6.7, 15641.0], [6.8, 15650.0], [6.9, 15666.0], [7.0, 15679.0], [7.1, 15686.0], [7.2, 15702.0], [7.3, 15719.0], [7.4, 15738.0], [7.5, 15748.0], [7.6, 15769.0], [7.7, 15790.0], [7.8, 15798.0], [7.9, 15821.0], [8.0, 15829.0], [8.1, 15845.0], [8.2, 15854.0], [8.3, 15871.0], [8.4, 15886.0], [8.5, 15897.0], [8.6, 15918.0], [8.7, 15938.0], [8.8, 15945.0], [8.9, 15981.0], [9.0, 15991.0], [9.1, 16001.0], [9.2, 16030.0], [9.3, 16041.0], [9.4, 16046.0], [9.5, 16077.0], [9.6, 16103.0], [9.7, 16116.0], [9.8, 16148.0], [9.9, 16174.0], [10.0, 16183.0], [10.1, 16200.0], [10.2, 16218.0], [10.3, 16243.0], [10.4, 16261.0], [10.5, 16277.0], [10.6, 16285.0], [10.7, 16297.0], [10.8, 16313.0], [10.9, 16333.0], [11.0, 16344.0], [11.1, 16357.0], [11.2, 16371.0], [11.3, 16388.0], [11.4, 16403.0], [11.5, 16417.0], [11.6, 16423.0], [11.7, 16441.0], [11.8, 16450.0], [11.9, 16469.0], [12.0, 16488.0], [12.1, 16498.0], [12.2, 16512.0], [12.3, 16525.0], [12.4, 16540.0], [12.5, 16552.0], [12.6, 16562.0], [12.7, 16581.0], [12.8, 16596.0], [12.9, 16607.0], [13.0, 16633.0], [13.1, 16657.0], [13.2, 16678.0], [13.3, 16690.0], [13.4, 16701.0], [13.5, 16715.0], [13.6, 16724.0], [13.7, 16736.0], [13.8, 16754.0], [13.9, 16763.0], [14.0, 16787.0], [14.1, 16800.0], [14.2, 16811.0], [14.3, 16834.0], [14.4, 16859.0], [14.5, 16865.0], [14.6, 16874.0], [14.7, 16890.0], [14.8, 16920.0], [14.9, 16939.0], [15.0, 16946.0], [15.1, 16955.0], [15.2, 16971.0], [15.3, 16979.0], [15.4, 16985.0], [15.5, 17000.0], [15.6, 17006.0], [15.7, 17026.0], [15.8, 17036.0], [15.9, 17057.0], [16.0, 17078.0], [16.1, 17087.0], [16.2, 17096.0], [16.3, 17103.0], [16.4, 17115.0], [16.5, 17130.0], [16.6, 17144.0], [16.7, 17161.0], [16.8, 17177.0], [16.9, 17190.0], [17.0, 17203.0], [17.1, 17211.0], [17.2, 17220.0], [17.3, 17231.0], [17.4, 17234.0], [17.5, 17247.0], [17.6, 17257.0], [17.7, 17268.0], [17.8, 17282.0], [17.9, 17288.0], [18.0, 17300.0], [18.1, 17308.0], [18.2, 17319.0], [18.3, 17323.0], [18.4, 17335.0], [18.5, 17344.0], [18.6, 17363.0], [18.7, 17370.0], [18.8, 17383.0], [18.9, 17397.0], [19.0, 17403.0], [19.1, 17417.0], [19.2, 17437.0], [19.3, 17444.0], [19.4, 17464.0], [19.5, 17474.0], [19.6, 17483.0], [19.7, 17497.0], [19.8, 17505.0], [19.9, 17514.0], [20.0, 17524.0], [20.1, 17530.0], [20.2, 17545.0], [20.3, 17555.0], [20.4, 17567.0], [20.5, 17580.0], [20.6, 17599.0], [20.7, 17607.0], [20.8, 17622.0], [20.9, 17633.0], [21.0, 17649.0], [21.1, 17666.0], [21.2, 17680.0], [21.3, 17687.0], [21.4, 17700.0], [21.5, 17717.0], [21.6, 17727.0], [21.7, 17734.0], [21.8, 17756.0], [21.9, 17774.0], [22.0, 17793.0], [22.1, 17803.0], [22.2, 17821.0], [22.3, 17830.0], [22.4, 17839.0], [22.5, 17848.0], [22.6, 17853.0], [22.7, 17865.0], [22.8, 17872.0], [22.9, 17884.0], [23.0, 17894.0], [23.1, 17904.0], [23.2, 17919.0], [23.3, 17931.0], [23.4, 17935.0], [23.5, 17943.0], [23.6, 17958.0], [23.7, 17968.0], [23.8, 17984.0], [23.9, 18004.0], [24.0, 18024.0], [24.1, 18044.0], [24.2, 18056.0], [24.3, 18077.0], [24.4, 18089.0], [24.5, 18108.0], [24.6, 18121.0], [24.7, 18130.0], [24.8, 18143.0], [24.9, 18155.0], [25.0, 18170.0], [25.1, 18186.0], [25.2, 18216.0], [25.3, 18231.0], [25.4, 18252.0], [25.5, 18273.0], [25.6, 18286.0], [25.7, 18292.0], [25.8, 18298.0], [25.9, 18306.0], [26.0, 18315.0], [26.1, 18325.0], [26.2, 18340.0], [26.3, 18353.0], [26.4, 18360.0], [26.5, 18370.0], [26.6, 18381.0], [26.7, 18387.0], [26.8, 18399.0], [26.9, 18418.0], [27.0, 18425.0], [27.1, 18440.0], [27.2, 18448.0], [27.3, 18463.0], [27.4, 18483.0], [27.5, 18493.0], [27.6, 18507.0], [27.7, 18518.0], [27.8, 18533.0], [27.9, 18556.0], [28.0, 18570.0], [28.1, 18587.0], [28.2, 18594.0], [28.3, 18609.0], [28.4, 18623.0], [28.5, 18630.0], [28.6, 18648.0], [28.7, 18662.0], [28.8, 18675.0], [28.9, 18702.0], [29.0, 18725.0], [29.1, 18744.0], [29.2, 18761.0], [29.3, 18787.0], [29.4, 18801.0], [29.5, 18822.0], [29.6, 18848.0], [29.7, 18859.0], [29.8, 18875.0], [29.9, 18890.0], [30.0, 18914.0], [30.1, 18935.0], [30.2, 18944.0], [30.3, 18953.0], [30.4, 18978.0], [30.5, 18989.0], [30.6, 19004.0], [30.7, 19010.0], [30.8, 19017.0], [30.9, 19034.0], [31.0, 19043.0], [31.1, 19055.0], [31.2, 19071.0], [31.3, 19089.0], [31.4, 19096.0], [31.5, 19106.0], [31.6, 19117.0], [31.7, 19125.0], [31.8, 19130.0], [31.9, 19134.0], [32.0, 19140.0], [32.1, 19149.0], [32.2, 19160.0], [32.3, 19172.0], [32.4, 19182.0], [32.5, 19202.0], [32.6, 19211.0], [32.7, 19224.0], [32.8, 19242.0], [32.9, 19250.0], [33.0, 19262.0], [33.1, 19272.0], [33.2, 19280.0], [33.3, 19288.0], [33.4, 19298.0], [33.5, 19306.0], [33.6, 19315.0], [33.7, 19333.0], [33.8, 19342.0], [33.9, 19351.0], [34.0, 19356.0], [34.1, 19369.0], [34.2, 19385.0], [34.3, 19391.0], [34.4, 19402.0], [34.5, 19421.0], [34.6, 19434.0], [34.7, 19440.0], [34.8, 19459.0], [34.9, 19474.0], [35.0, 19486.0], [35.1, 19495.0], [35.2, 19504.0], [35.3, 19507.0], [35.4, 19515.0], [35.5, 19524.0], [35.6, 19541.0], [35.7, 19549.0], [35.8, 19563.0], [35.9, 19575.0], [36.0, 19585.0], [36.1, 19602.0], [36.2, 19623.0], [36.3, 19635.0], [36.4, 19648.0], [36.5, 19663.0], [36.6, 19686.0], [36.7, 19696.0], [36.8, 19711.0], [36.9, 19718.0], [37.0, 19734.0], [37.1, 19746.0], [37.2, 19761.0], [37.3, 19771.0], [37.4, 19785.0], [37.5, 19800.0], [37.6, 19811.0], [37.7, 19822.0], [37.8, 19829.0], [37.9, 19842.0], [38.0, 19861.0], [38.1, 19881.0], [38.2, 19901.0], [38.3, 19912.0], [38.4, 19922.0], [38.5, 19934.0], [38.6, 19946.0], [38.7, 19959.0], [38.8, 19977.0], [38.9, 19999.0], [39.0, 20009.0], [39.1, 20016.0], [39.2, 20032.0], [39.3, 20049.0], [39.4, 20055.0], [39.5, 20076.0], [39.6, 20091.0], [39.7, 20113.0], [39.8, 20123.0], [39.9, 20130.0], [40.0, 20140.0], [40.1, 20162.0], [40.2, 20178.0], [40.3, 20186.0], [40.4, 20203.0], [40.5, 20212.0], [40.6, 20226.0], [40.7, 20239.0], [40.8, 20246.0], [40.9, 20260.0], [41.0, 20271.0], [41.1, 20289.0], [41.2, 20301.0], [41.3, 20311.0], [41.4, 20334.0], [41.5, 20358.0], [41.6, 20371.0], [41.7, 20379.0], [41.8, 20400.0], [41.9, 20421.0], [42.0, 20428.0], [42.1, 20447.0], [42.2, 20461.0], [42.3, 20478.0], [42.4, 20500.0], [42.5, 20528.0], [42.6, 20549.0], [42.7, 20570.0], [42.8, 20578.0], [42.9, 20599.0], [43.0, 20613.0], [43.1, 20627.0], [43.2, 20646.0], [43.3, 20668.0], [43.4, 20686.0], [43.5, 20703.0], [43.6, 20725.0], [43.7, 20738.0], [43.8, 20748.0], [43.9, 20759.0], [44.0, 20773.0], [44.1, 20791.0], [44.2, 20815.0], [44.3, 20842.0], [44.4, 20854.0], [44.5, 20872.0], [44.6, 20890.0], [44.7, 20905.0], [44.8, 20924.0], [44.9, 20943.0], [45.0, 20964.0], [45.1, 20981.0], [45.2, 21011.0], [45.3, 21039.0], [45.4, 21052.0], [45.5, 21068.0], [45.6, 21091.0], [45.7, 21108.0], [45.8, 21127.0], [45.9, 21167.0], [46.0, 21185.0], [46.1, 21206.0], [46.2, 21229.0], [46.3, 21252.0], [46.4, 21265.0], [46.5, 21278.0], [46.6, 21307.0], [46.7, 21320.0], [46.8, 21335.0], [46.9, 21355.0], [47.0, 21367.0], [47.1, 21379.0], [47.2, 21395.0], [47.3, 21414.0], [47.4, 21430.0], [47.5, 21443.0], [47.6, 21459.0], [47.7, 21479.0], [47.8, 21492.0], [47.9, 21514.0], [48.0, 21531.0], [48.1, 21549.0], [48.2, 21562.0], [48.3, 21589.0], [48.4, 21611.0], [48.5, 21618.0], [48.6, 21636.0], [48.7, 21654.0], [48.8, 21664.0], [48.9, 21670.0], [49.0, 21683.0], [49.1, 21710.0], [49.2, 21735.0], [49.3, 21757.0], [49.4, 21777.0], [49.5, 21797.0], [49.6, 21815.0], [49.7, 21824.0], [49.8, 21833.0], [49.9, 21841.0], [50.0, 21851.0], [50.1, 21857.0], [50.2, 21863.0], [50.3, 21882.0], [50.4, 21898.0], [50.5, 21907.0], [50.6, 21917.0], [50.7, 21933.0], [50.8, 21944.0], [50.9, 21954.0], [51.0, 21978.0], [51.1, 21985.0], [51.2, 21992.0], [51.3, 22000.0], [51.4, 22015.0], [51.5, 22019.0], [51.6, 22026.0], [51.7, 22038.0], [51.8, 22050.0], [51.9, 22059.0], [52.0, 22071.0], [52.1, 22080.0], [52.2, 22086.0], [52.3, 22099.0], [52.4, 22109.0], [52.5, 22119.0], [52.6, 22132.0], [52.7, 22147.0], [52.8, 22152.0], [52.9, 22171.0], [53.0, 22190.0], [53.1, 22206.0], [53.2, 22224.0], [53.3, 22241.0], [53.4, 22262.0], [53.5, 22277.0], [53.6, 22302.0], [53.7, 22319.0], [53.8, 22333.0], [53.9, 22349.0], [54.0, 22360.0], [54.1, 22379.0], [54.2, 22389.0], [54.3, 22405.0], [54.4, 22421.0], [54.5, 22434.0], [54.6, 22444.0], [54.7, 22456.0], [54.8, 22484.0], [54.9, 22507.0], [55.0, 22518.0], [55.1, 22532.0], [55.2, 22545.0], [55.3, 22558.0], [55.4, 22583.0], [55.5, 22605.0], [55.6, 22619.0], [55.7, 22634.0], [55.8, 22646.0], [55.9, 22665.0], [56.0, 22682.0], [56.1, 22706.0], [56.2, 22727.0], [56.3, 22734.0], [56.4, 22742.0], [56.5, 22758.0], [56.6, 22778.0], [56.7, 22789.0], [56.8, 22797.0], [56.9, 22802.0], [57.0, 22811.0], [57.1, 22821.0], [57.2, 22830.0], [57.3, 22839.0], [57.4, 22848.0], [57.5, 22856.0], [57.6, 22867.0], [57.7, 22877.0], [57.8, 22884.0], [57.9, 22896.0], [58.0, 22905.0], [58.1, 22913.0], [58.2, 22925.0], [58.3, 22936.0], [58.4, 22948.0], [58.5, 22955.0], [58.6, 22969.0], [58.7, 22983.0], [58.8, 22994.0], [58.9, 23001.0], [59.0, 23010.0], [59.1, 23015.0], [59.2, 23029.0], [59.3, 23044.0], [59.4, 23049.0], [59.5, 23059.0], [59.6, 23068.0], [59.7, 23081.0], [59.8, 23087.0], [59.9, 23096.0], [60.0, 23121.0], [60.1, 23135.0], [60.2, 23145.0], [60.3, 23152.0], [60.4, 23171.0], [60.5, 23192.0], [60.6, 23200.0], [60.7, 23209.0], [60.8, 23220.0], [60.9, 23231.0], [61.0, 23243.0], [61.1, 23253.0], [61.2, 23264.0], [61.3, 23271.0], [61.4, 23286.0], [61.5, 23295.0], [61.6, 23308.0], [61.7, 23320.0], [61.8, 23337.0], [61.9, 23348.0], [62.0, 23362.0], [62.1, 23381.0], [62.2, 23408.0], [62.3, 23426.0], [62.4, 23436.0], [62.5, 23444.0], [62.6, 23461.0], [62.7, 23474.0], [62.8, 23485.0], [62.9, 23501.0], [63.0, 23516.0], [63.1, 23534.0], [63.2, 23551.0], [63.3, 23565.0], [63.4, 23580.0], [63.5, 23607.0], [63.6, 23619.0], [63.7, 23628.0], [63.8, 23634.0], [63.9, 23647.0], [64.0, 23669.0], [64.1, 23681.0], [64.2, 23689.0], [64.3, 23707.0], [64.4, 23712.0], [64.5, 23726.0], [64.6, 23734.0], [64.7, 23744.0], [64.8, 23760.0], [64.9, 23779.0], [65.0, 23805.0], [65.1, 23815.0], [65.2, 23833.0], [65.3, 23855.0], [65.4, 23867.0], [65.5, 23874.0], [65.6, 23889.0], [65.7, 23912.0], [65.8, 23949.0], [65.9, 23959.0], [66.0, 23975.0], [66.1, 23988.0], [66.2, 24013.0], [66.3, 24029.0], [66.4, 24048.0], [66.5, 24065.0], [66.6, 24093.0], [66.7, 24121.0], [66.8, 24132.0], [66.9, 24153.0], [67.0, 24171.0], [67.1, 24197.0], [67.2, 24215.0], [67.3, 24237.0], [67.4, 24260.0], [67.5, 24281.0], [67.6, 24298.0], [67.7, 24337.0], [67.8, 24363.0], [67.9, 24381.0], [68.0, 24401.0], [68.1, 24425.0], [68.2, 24445.0], [68.3, 24503.0], [68.4, 24515.0], [68.5, 24530.0], [68.6, 24552.0], [68.7, 24566.0], [68.8, 24580.0], [68.9, 24598.0], [69.0, 24606.0], [69.1, 24623.0], [69.2, 24641.0], [69.3, 24654.0], [69.4, 24675.0], [69.5, 24691.0], [69.6, 24707.0], [69.7, 24733.0], [69.8, 24768.0], [69.9, 24776.0], [70.0, 24794.0], [70.1, 24811.0], [70.2, 24837.0], [70.3, 24846.0], [70.4, 24858.0], [70.5, 24878.0], [70.6, 24890.0], [70.7, 24895.0], [70.8, 24916.0], [70.9, 24926.0], [71.0, 24939.0], [71.1, 24963.0], [71.2, 24989.0], [71.3, 25011.0], [71.4, 25022.0], [71.5, 25047.0], [71.6, 25064.0], [71.7, 25082.0], [71.8, 25104.0], [71.9, 25116.0], [72.0, 25129.0], [72.1, 25143.0], [72.2, 25161.0], [72.3, 25182.0], [72.4, 25211.0], [72.5, 25227.0], [72.6, 25254.0], [72.7, 25265.0], [72.8, 25282.0], [72.9, 25291.0], [73.0, 25311.0], [73.1, 25352.0], [73.2, 25368.0], [73.3, 25394.0], [73.4, 25411.0], [73.5, 25436.0], [73.6, 25461.0], [73.7, 25510.0], [73.8, 25531.0], [73.9, 25586.0], [74.0, 25618.0], [74.1, 25666.0], [74.2, 25709.0], [74.3, 25754.0], [74.4, 25814.0], [74.5, 25869.0], [74.6, 25904.0], [74.7, 25934.0], [74.8, 26015.0], [74.9, 26087.0], [75.0, 26129.0], [75.1, 26200.0], [75.2, 26261.0], [75.3, 26323.0], [75.4, 26349.0], [75.5, 26396.0], [75.6, 26447.0], [75.7, 26481.0], [75.8, 26512.0], [75.9, 26568.0], [76.0, 26638.0], [76.1, 26730.0], [76.2, 26832.0], [76.3, 26921.0], [76.4, 27044.0], [76.5, 27207.0], [76.6, 27350.0], [76.7, 27478.0], [76.8, 27564.0], [76.9, 27711.0], [77.0, 27744.0], [77.1, 27823.0], [77.2, 28012.0], [77.3, 28143.0], [77.4, 28221.0], [77.5, 28320.0], [77.6, 28369.0], [77.7, 28439.0], [77.8, 28510.0], [77.9, 28592.0], [78.0, 28639.0], [78.1, 28702.0], [78.2, 28739.0], [78.3, 28777.0], [78.4, 28825.0], [78.5, 28881.0], [78.6, 28970.0], [78.7, 29075.0], [78.8, 29110.0], [78.9, 29177.0], [79.0, 29322.0], [79.1, 29366.0], [79.2, 29479.0], [79.3, 29629.0], [79.4, 29680.0], [79.5, 29862.0], [79.6, 30140.0], [79.7, 30281.0], [79.8, 30350.0], [79.9, 30401.0], [80.0, 30692.0], [80.1, 30806.0], [80.2, 30881.0], [80.3, 30981.0], [80.4, 31162.0], [80.5, 31267.0], [80.6, 31328.0], [80.7, 31443.0], [80.8, 31569.0], [80.9, 31657.0], [81.0, 31742.0], [81.1, 31830.0], [81.2, 31946.0], [81.3, 31996.0], [81.4, 32038.0], [81.5, 32092.0], [81.6, 32141.0], [81.7, 32218.0], [81.8, 32300.0], [81.9, 32367.0], [82.0, 32427.0], [82.1, 32522.0], [82.2, 32555.0], [82.3, 32624.0], [82.4, 32677.0], [82.5, 32718.0], [82.6, 32749.0], [82.7, 32895.0], [82.8, 32986.0], [82.9, 33032.0], [83.0, 33078.0], [83.1, 33099.0], [83.2, 33217.0], [83.3, 33247.0], [83.4, 33277.0], [83.5, 33304.0], [83.6, 33357.0], [83.7, 33385.0], [83.8, 33413.0], [83.9, 33459.0], [84.0, 33479.0], [84.1, 33507.0], [84.2, 33561.0], [84.3, 33681.0], [84.4, 33884.0], [84.5, 33971.0], [84.6, 34032.0], [84.7, 34153.0], [84.8, 34349.0], [84.9, 34807.0], [85.0, 35196.0], [85.1, 35289.0], [85.2, 35343.0], [85.3, 35418.0], [85.4, 35683.0], [85.5, 35769.0], [85.6, 36730.0], [85.7, 36887.0], [85.8, 37029.0], [85.9, 37144.0], [86.0, 37210.0], [86.1, 37264.0], [86.2, 37328.0], [86.3, 37395.0], [86.4, 37486.0], [86.5, 37562.0], [86.6, 37694.0], [86.7, 37753.0], [86.8, 38203.0], [86.9, 38542.0], [87.0, 39071.0], [87.1, 43857.0], [87.2, 46891.0], [87.3, 48398.0], [87.4, 48512.0], [87.5, 48641.0], [87.6, 48676.0], [87.7, 48700.0], [87.8, 48767.0], [87.9, 48795.0], [88.0, 48897.0], [88.1, 49033.0], [88.2, 49170.0], [88.3, 49323.0], [88.4, 49647.0], [88.5, 50123.0], [88.6, 50491.0], [88.7, 50605.0], [88.8, 50706.0], [88.9, 50735.0], [89.0, 50754.0], [89.1, 50853.0], [89.2, 51193.0], [89.3, 51872.0], [89.4, 53473.0], [89.5, 54264.0], [89.6, 55157.0], [89.7, 55218.0], [89.8, 56333.0], [89.9, 56614.0], [90.0, 62755.0], [90.1, 64574.0], [90.2, 65656.0], [90.3, 68881.0], [90.4, 69308.0], [90.5, 69843.0], [90.6, 69884.0], [90.7, 70040.0], [90.8, 73434.0], [90.9, 74920.0], [91.0, 78132.0], [91.1, 78264.0], [91.2, 78552.0], [91.3, 78731.0], [91.4, 81057.0], [91.5, 82000.0], [91.6, 82864.0], [91.7, 83349.0], [91.8, 83444.0], [91.9, 83540.0], [92.0, 83635.0], [92.1, 83768.0], [92.2, 83992.0], [92.3, 84340.0], [92.4, 84666.0], [92.5, 85137.0], [92.6, 85373.0], [92.7, 86420.0], [92.8, 86635.0], [92.9, 87485.0], [93.0, 87634.0], [93.1, 87721.0], [93.2, 88095.0], [93.3, 107038.0], [93.4, 107434.0], [93.5, 108605.0], [93.6, 108609.0], [93.7, 108613.0], [93.8, 129238.0], [93.9, 129243.0], [94.0, 129381.0], [94.1, 129621.0], [94.2, 129679.0], [94.3, 129773.0], [94.4, 129946.0], [94.5, 130095.0], [94.6, 130265.0], [94.7, 130379.0], [94.8, 130421.0], [94.9, 130672.0], [95.0, 130737.0], [95.1, 130830.0], [95.2, 130890.0], [95.3, 130960.0], [95.4, 131055.0], [95.5, 131101.0], [95.6, 132909.0], [95.7, 133155.0], [95.8, 133225.0], [95.9, 133275.0], [96.0, 133370.0], [96.1, 133791.0], [96.2, 136767.0], [96.3, 170201.0], [96.4, 170257.0], [96.5, 170271.0], [96.6, 170276.0], [96.7, 170279.0], [96.8, 170281.0], [96.9, 170285.0], [97.0, 170289.0], [97.1, 170296.0], [97.2, 170303.0], [97.3, 170307.0], [97.4, 170310.0], [97.5, 170316.0], [97.6, 170319.0], [97.7, 170323.0], [97.8, 170326.0], [97.9, 170330.0], [98.0, 170331.0], [98.1, 170334.0], [98.2, 170335.0], [98.3, 170337.0], [98.4, 170340.0], [98.5, 170344.0], [98.6, 170349.0], [98.7, 170354.0], [98.8, 170359.0], [98.9, 170366.0], [99.0, 170369.0], [99.1, 170378.0], [99.2, 170382.0], [99.3, 170388.0], [99.4, 170394.0], [99.5, 170397.0], [99.6, 170402.0], [99.7, 170412.0], [99.8, 170420.0], [99.9, 170685.0]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 11300.0, "maxY": 177.0, "series": [{"data": [[170400.0, 22.0], [132900.0, 2.0], [69900.0, 4.0], [81100.0, 3.0], [85900.0, 1.0], [84300.0, 2.0], [87500.0, 5.0], [130700.0, 6.0], [33700.0, 3.0], [32900.0, 7.0], [34500.0, 4.0], [36100.0, 1.0], [35300.0, 10.0], [37700.0, 7.0], [36900.0, 5.0], [38500.0, 2.0], [48900.0, 6.0], [49700.0, 3.0], [50500.0, 6.0], [51300.0, 3.0], [54500.0, 2.0], [53700.0, 1.0], [55300.0, 1.0], [56100.0, 2.0], [78600.0, 2.0], [83400.0, 13.0], [85000.0, 2.0], [86600.0, 2.0], [101000.0, 1.0], [107400.0, 3.0], [129800.0, 2.0], [133300.0, 9.0], [69700.0, 2.0], [79300.0, 1.0], [84100.0, 2.0], [82500.0, 1.0], [87300.0, 2.0], [88900.0, 2.0], [130500.0, 1.0], [134200.0, 1.0], [11600.0, 1.0], [11800.0, 1.0], [12000.0, 2.0], [12400.0, 1.0], [13000.0, 1.0], [13400.0, 1.0], [13600.0, 2.0], [13800.0, 12.0], [14000.0, 10.0], [14200.0, 29.0], [14400.0, 16.0], [14600.0, 14.0], [14800.0, 30.0], [15000.0, 30.0], [15200.0, 40.0], [15400.0, 46.0], [15600.0, 57.0], [15800.0, 52.0], [16000.0, 37.0], [16200.0, 47.0], [17200.0, 76.0], [16400.0, 54.0], [16800.0, 47.0], [17600.0, 56.0], [18000.0, 43.0], [18400.0, 51.0], [19200.0, 70.0], [18800.0, 43.0], [19600.0, 46.0], [20000.0, 52.0], [20400.0, 43.0], [20800.0, 38.0], [21200.0, 34.0], [21600.0, 53.0], [22000.0, 74.0], [22400.0, 46.0], [22800.0, 78.0], [23200.0, 70.0], [23600.0, 58.0], [24000.0, 35.0], [24400.0, 22.0], [24800.0, 49.0], [25200.0, 43.0], [25600.0, 17.0], [26400.0, 19.0], [26000.0, 13.0], [27600.0, 5.0], [26800.0, 10.0], [27200.0, 6.0], [28000.0, 5.0], [28400.0, 9.0], [28800.0, 12.0], [29600.0, 10.0], [29200.0, 5.0], [30000.0, 1.0], [30400.0, 1.0], [31200.0, 9.0], [31600.0, 5.0], [30800.0, 11.0], [32000.0, 16.0], [32400.0, 5.0], [32800.0, 7.0], [33600.0, 5.0], [34400.0, 1.0], [138300.0, 1.0], [36000.0, 1.0], [35200.0, 10.0], [36800.0, 5.0], [37600.0, 6.0], [170300.0, 177.0], [46400.0, 2.0], [47200.0, 1.0], [48800.0, 7.0], [49600.0, 3.0], [50400.0, 5.0], [55200.0, 2.0], [54400.0, 1.0], [215100.0, 5.0], [61600.0, 1.0], [68800.0, 6.0], [65600.0, 3.0], [70400.0, 1.0], [81600.0, 1.0], [83200.0, 4.0], [86400.0, 3.0], [88000.0, 2.0], [129600.0, 8.0], [131200.0, 1.0], [138500.0, 1.0], [68700.0, 1.0], [73500.0, 2.0], [78300.0, 5.0], [84700.0, 3.0], [83100.0, 1.0], [86300.0, 1.0], [87900.0, 1.0], [107100.0, 3.0], [133000.0, 6.0], [33900.0, 8.0], [33100.0, 4.0], [137100.0, 2.0], [36300.0, 1.0], [35500.0, 2.0], [38700.0, 1.0], [37100.0, 8.0], [39500.0, 1.0], [40300.0, 1.0], [45100.0, 1.0], [49100.0, 8.0], [48300.0, 3.0], [49900.0, 1.0], [50700.0, 18.0], [51500.0, 1.0], [53900.0, 1.0], [56300.0, 3.0], [55500.0, 1.0], [62700.0, 4.0], [65100.0, 1.0], [69400.0, 1.0], [82200.0, 1.0], [83800.0, 7.0], [85400.0, 1.0], [130200.0, 5.0], [68500.0, 1.0], [70100.0, 2.0], [74900.0, 7.0], [78100.0, 7.0], [79700.0, 1.0], [81300.0, 1.0], [84500.0, 2.0], [86100.0, 1.0], [87700.0, 5.0], [90900.0, 1.0], [106900.0, 1.0], [130900.0, 12.0], [129300.0, 5.0], [133400.0, 1.0], [136600.0, 1.0], [16500.0, 52.0], [16900.0, 55.0], [17300.0, 70.0], [17700.0, 51.0], [18100.0, 50.0], [18500.0, 52.0], [18900.0, 43.0], [19300.0, 68.0], [19700.0, 56.0], [20100.0, 54.0], [21300.0, 49.0], [20900.0, 35.0], [20500.0, 39.0], [21700.0, 31.0], [22100.0, 55.0], [22500.0, 42.0], [22900.0, 71.0], [23300.0, 43.0], [23700.0, 54.0], [24100.0, 36.0], [24500.0, 46.0], [24900.0, 40.0], [25300.0, 30.0], [25700.0, 14.0], [26500.0, 13.0], [26100.0, 11.0], [26900.0, 3.0], [27300.0, 6.0], [28100.0, 7.0], [28500.0, 11.0], [27700.0, 13.0], [28900.0, 8.0], [29300.0, 8.0], [29700.0, 2.0], [30100.0, 4.0], [30500.0, 3.0], [30900.0, 7.0], [31300.0, 5.0], [31700.0, 10.0], [32100.0, 11.0], [32500.0, 14.0], [134300.0, 2.0], [33000.0, 21.0], [33800.0, 6.0], [34600.0, 1.0], [131100.0, 5.0], [35400.0, 6.0], [38600.0, 1.0], [37000.0, 8.0], [40200.0, 1.0], [49000.0, 5.0], [48200.0, 1.0], [49800.0, 1.0], [50600.0, 8.0], [51400.0, 1.0], [54600.0, 1.0], [62600.0, 1.0], [69200.0, 1.0], [78800.0, 2.0], [82000.0, 2.0], [83600.0, 9.0], [85200.0, 3.0], [86800.0, 1.0], [91600.0, 1.0], [130000.0, 3.0], [133600.0, 1.0], [78700.0, 3.0], [81900.0, 2.0], [85100.0, 3.0], [83500.0, 5.0], [86700.0, 1.0], [107500.0, 1.0], [129900.0, 8.0], [170600.0, 5.0], [133100.0, 5.0], [33300.0, 20.0], [34100.0, 6.0], [34900.0, 3.0], [35700.0, 6.0], [37300.0, 10.0], [38900.0, 1.0], [38100.0, 2.0], [48500.0, 5.0], [50900.0, 2.0], [49300.0, 3.0], [50100.0, 2.0], [54100.0, 2.0], [53300.0, 2.0], [56500.0, 2.0], [64500.0, 8.0], [69800.0, 8.0], [81000.0, 1.0], [84200.0, 2.0], [87400.0, 2.0], [130600.0, 7.0], [137200.0, 2.0], [68900.0, 3.0], [78500.0, 5.0], [84900.0, 1.0], [83300.0, 2.0], [86500.0, 3.0], [107300.0, 2.0], [129700.0, 9.0], [11300.0, 1.0], [11500.0, 1.0], [11700.0, 4.0], [11900.0, 1.0], [12900.0, 3.0], [13500.0, 4.0], [13700.0, 4.0], [14100.0, 16.0], [14300.0, 25.0], [13900.0, 5.0], [14500.0, 15.0], [14700.0, 17.0], [14900.0, 18.0], [15300.0, 48.0], [15100.0, 28.0], [15500.0, 40.0], [15700.0, 46.0], [15900.0, 41.0], [16100.0, 36.0], [16300.0, 47.0], [16600.0, 41.0], [17000.0, 55.0], [17400.0, 57.0], [18200.0, 50.0], [17800.0, 70.0], [18600.0, 47.0], [19000.0, 62.0], [19400.0, 58.0], [19800.0, 51.0], [20200.0, 61.0], [21400.0, 44.0], [21000.0, 37.0], [20600.0, 41.0], [21800.0, 67.0], [22200.0, 39.0], [22600.0, 46.0], [23000.0, 74.0], [23400.0, 54.0], [23800.0, 48.0], [24200.0, 36.0], [25400.0, 23.0], [24600.0, 46.0], [25000.0, 40.0], [25800.0, 15.0], [26600.0, 9.0], [26200.0, 10.0], [27000.0, 6.0], [27400.0, 6.0], [28200.0, 9.0], [28600.0, 12.0], [27800.0, 6.0], [29400.0, 8.0], [29000.0, 9.0], [29800.0, 6.0], [30200.0, 5.0], [30600.0, 5.0], [31400.0, 10.0], [31000.0, 2.0], [32600.0, 19.0], [31800.0, 9.0], [32200.0, 8.0], [133500.0, 1.0], [34800.0, 2.0], [33200.0, 23.0], [34000.0, 9.0], [136700.0, 1.0], [35600.0, 3.0], [36400.0, 1.0], [37200.0, 13.0], [38800.0, 1.0], [38000.0, 5.0], [46800.0, 1.0], [48400.0, 4.0], [47600.0, 1.0], [49200.0, 2.0], [50800.0, 5.0], [51600.0, 1.0], [53200.0, 3.0], [56400.0, 2.0], [55600.0, 1.0], [69600.0, 4.0], [82400.0, 2.0], [84000.0, 1.0], [130400.0, 6.0], [132800.0, 1.0], [133700.0, 1.0], [136900.0, 1.0], [80700.0, 1.0], [83900.0, 1.0], [82300.0, 1.0], [87100.0, 2.0], [130300.0, 11.0], [33500.0, 12.0], [34300.0, 3.0], [36700.0, 3.0], [35100.0, 3.0], [37500.0, 7.0], [38300.0, 2.0], [39900.0, 1.0], [43900.0, 1.0], [46300.0, 1.0], [48700.0, 16.0], [47900.0, 1.0], [51100.0, 4.0], [49500.0, 2.0], [50300.0, 1.0], [55100.0, 8.0], [53500.0, 3.0], [55900.0, 2.0], [63100.0, 1.0], [73400.0, 2.0], [78200.0, 5.0], [84600.0, 2.0], [86200.0, 1.0], [87800.0, 2.0], [107000.0, 2.0], [108600.0, 21.0], [131000.0, 9.0], [129400.0, 5.0], [133200.0, 12.0], [134100.0, 2.0], [69300.0, 1.0], [83700.0, 2.0], [85300.0, 3.0], [130100.0, 4.0], [170200.0, 61.0], [16700.0, 52.0], [17100.0, 51.0], [17500.0, 64.0], [17900.0, 60.0], [18300.0, 73.0], [18700.0, 38.0], [19100.0, 77.0], [19500.0, 68.0], [19900.0, 52.0], [20300.0, 43.0], [21500.0, 39.0], [21100.0, 31.0], [20700.0, 49.0], [22300.0, 48.0], [21900.0, 63.0], [22700.0, 56.0], [23100.0, 50.0], [23500.0, 41.0], [24300.0, 28.0], [23900.0, 36.0], [24700.0, 35.0], [25100.0, 40.0], [25500.0, 20.0], [25900.0, 14.0], [26300.0, 20.0], [27100.0, 5.0], [26700.0, 7.0], [27500.0, 7.0], [27900.0, 2.0], [28300.0, 13.0], [28700.0, 19.0], [29500.0, 5.0], [29100.0, 13.0], [29900.0, 3.0], [30300.0, 13.0], [30700.0, 4.0], [31500.0, 7.0], [31100.0, 6.0], [31900.0, 10.0], [32300.0, 13.0], [32700.0, 10.0], [33400.0, 23.0], [34200.0, 2.0], [35800.0, 1.0], [36600.0, 1.0], [37400.0, 9.0], [38200.0, 4.0], [39000.0, 3.0], [42200.0, 1.0], [43800.0, 4.0], [48600.0, 19.0], [51000.0, 1.0], [49400.0, 1.0], [50200.0, 1.0], [51800.0, 1.0], [54200.0, 1.0], [53400.0, 2.0], [56600.0, 1.0], [59000.0, 1.0], [63000.0, 1.0], [63800.0, 1.0], [64600.0, 1.0], [70000.0, 6.0], [74800.0, 1.0], [86000.0, 1.0], [84400.0, 3.0], [82800.0, 1.0], [87600.0, 7.0], [129200.0, 16.0], [130800.0, 11.0]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 215100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 425.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6869.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6869.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 425.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 4.4, "minX": 1.61262918E12, "maxY": 900.0, "series": [{"data": [[1.61262948E12, 682.5443708609279], [1.61262918E12, 900.0], [1.6126296E12, 4.4], [1.6126293E12, 900.0], [1.61262924E12, 900.0], [1.61262942E12, 900.0], [1.61262936E12, 900.0], [1.61262954E12, 49.595238095238095]], "isOverall": false, "label": "Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6126296E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17130.0, "minX": 2.0, "maxY": 215114.0, "series": [{"data": [[2.0, 215114.0], [5.0, 215110.5], [6.0, 130385.0], [10.0, 130252.0], [12.0, 130395.0], [13.0, 130399.0], [14.0, 130421.0], [15.0, 130431.5], [18.0, 130188.33333333333], [19.0, 130236.5], [21.0, 130364.0], [23.0, 130395.0], [25.0, 130286.5], [26.0, 130235.0], [28.0, 130257.0], [30.0, 130371.75], [35.0, 129276.0], [34.0, 131076.5], [38.0, 129290.66666666667], [43.0, 129381.0], [42.0, 129285.5], [47.0, 129443.0], [46.0, 129420.5], [51.0, 170680.0], [52.0, 170689.25], [61.0, 130876.0], [63.0, 130814.33333333333], [67.0, 130779.0], [66.0, 130737.0], [65.0, 130948.0], [64.0, 130846.0], [70.0, 130835.5], [68.0, 130815.0], [75.0, 129668.0], [79.0, 64587.0], [78.0, 64616.0], [77.0, 129651.5], [83.0, 64597.0], [82.0, 64571.0], [81.0, 64574.0], [80.0, 64588.0], [87.0, 63831.0], [86.0, 64548.0], [85.0, 64572.0], [84.0, 64594.0], [89.0, 130998.0], [88.0, 131200.0], [95.0, 38377.0], [94.0, 34020.0], [93.0, 34041.0], [92.0, 65655.33333333333], [98.0, 68955.0], [97.0, 68957.0], [96.0, 81621.0], [103.0, 68817.0], [102.0, 68887.0], [101.0, 62754.333333333336], [106.0, 71238.0], [104.0, 49716.0], [111.0, 73496.0], [110.0, 68874.0], [109.0, 71155.0], [108.0, 62722.0], [114.0, 68857.0], [113.0, 68940.0], [112.0, 68898.0], [119.0, 74933.5], [118.0, 74899.0], [116.0, 68038.0], [123.0, 74936.0], [122.0, 63143.0], [121.0, 74920.0], [120.0, 74949.0], [127.0, 81308.0], [126.0, 43886.0], [125.0, 74902.0], [124.0, 74917.0], [135.0, 48792.0], [134.0, 81164.0], [133.0, 43946.0], [132.0, 27822.0], [131.0, 43819.0], [130.0, 63080.0], [129.0, 43803.0], [128.0, 43857.0], [143.0, 48767.0], [142.0, 33425.0], [141.0, 48773.0], [140.0, 48779.0], [139.0, 64971.5], [137.0, 80759.0], [136.0, 81057.0], [150.0, 33546.0], [149.0, 31037.0], [147.0, 33385.0], [146.0, 33571.0], [145.0, 48744.0], [144.0, 81135.0], [159.0, 48694.0], [158.0, 33522.0], [157.0, 48721.0], [156.0, 33522.0], [155.0, 33398.5], [153.0, 41150.0], [152.0, 33553.0], [167.0, 48659.0], [166.0, 48666.0], [165.0, 40980.0], [163.0, 48679.0], [162.0, 33357.0], [161.0, 48690.0], [160.0, 48691.0], [175.0, 33298.0], [174.0, 33362.0], [173.0, 33389.0], [172.0, 27832.0], [171.0, 33179.0], [170.0, 48641.0], [169.0, 48646.0], [168.0, 48649.0], [183.0, 33324.0], [182.0, 33468.0], [181.0, 26075.0], [180.0, 27823.0], [179.0, 33507.0], [178.0, 33505.0], [177.0, 33459.0], [176.0, 33362.0], [191.0, 27711.0], [190.0, 50786.0], [189.0, 27797.0], [188.0, 27761.0], [187.0, 33478.0], [186.0, 33421.0], [185.0, 27828.0], [184.0, 33247.0], [199.0, 27750.0], [198.0, 33413.0], [197.0, 33390.0], [196.0, 33392.0], [195.0, 27717.0], [194.0, 27783.0], [193.0, 27991.0], [192.0, 27720.0], [207.0, 50728.0], [206.0, 50721.0], [205.0, 50730.0], [204.0, 27744.0], [203.0, 39227.0], [201.0, 50754.0], [200.0, 50730.0], [215.0, 43067.0], [213.0, 50585.0], [211.0, 27698.0], [210.0, 50582.0], [209.0, 26601.0], [208.0, 33335.0], [223.0, 50637.0], [222.0, 35345.0], [221.0, 27524.0], [220.0, 50468.0], [219.0, 26446.0], [218.0, 50669.0], [217.0, 26325.0], [216.0, 50694.0], [231.0, 50567.0], [230.0, 50733.0], [229.0, 50735.0], [228.0, 26175.0], [227.0, 27555.0], [226.0, 50376.0], [225.0, 26363.0], [224.0, 50605.0], [239.0, 35218.0], [238.0, 27564.0], [237.0, 27351.0], [236.0, 27398.0], [235.0, 26129.0], [234.0, 26128.0], [233.0, 27409.5], [247.0, 35443.0], [246.0, 35683.0], [245.0, 35713.0], [244.0, 35769.0], [243.0, 35735.0], [242.0, 27362.0], [241.0, 27440.0], [240.0, 35182.0], [255.0, 26584.0], [254.0, 137275.0], [253.0, 34818.0], [252.0, 68581.0], [251.0, 35293.0], [250.0, 35353.0], [249.0, 36849.0], [248.0, 35337.0], [270.0, 35369.0], [271.0, 35343.0], [269.0, 136767.0], [268.0, 35418.0], [267.0, 35492.0], [266.0, 136920.0], [265.0, 35585.0], [264.0, 137161.0], [263.0, 137163.0], [257.0, 26479.0], [256.0, 24044.0], [259.0, 35712.0], [258.0, 138359.0], [262.0, 137298.0], [261.0, 138522.0], [260.0, 26415.0], [286.0, 24194.0], [287.0, 23429.0], [285.0, 35289.0], [284.0, 23335.0], [283.0, 23448.0], [282.0, 35296.0], [281.0, 35284.0], [280.0, 35231.0], [279.0, 35315.0], [273.0, 25063.0], [272.0, 35378.0], [275.0, 25509.0], [274.0, 35405.0], [278.0, 35337.0], [277.0, 35301.0], [276.0, 35388.0], [302.0, 23771.0], [303.0, 23348.0], [301.0, 24680.0], [300.0, 25330.0], [299.0, 24701.0], [298.0, 35226.0], [297.0, 24811.0], [296.0, 22322.0], [295.0, 136654.0], [288.0, 23426.0], [291.0, 35231.0], [290.0, 29304.5], [294.0, 35194.0], [293.0, 23405.0], [292.0, 35203.0], [318.0, 23288.0], [319.0, 23310.0], [317.0, 24640.0], [316.0, 24623.0], [315.0, 25276.0], [314.0, 23243.0], [313.0, 23988.0], [312.0, 28143.0], [311.0, 24298.0], [305.0, 23322.0], [304.0, 24696.0], [307.0, 24676.0], [306.0, 23730.0], [310.0, 25300.0], [309.0, 23296.0], [308.0, 23299.0], [334.0, 23131.0], [335.0, 22945.0], [333.0, 23071.5], [323.0, 24591.0], [322.0, 34962.0], [321.0, 24511.0], [320.0, 34935.0], [331.0, 25327.0], [330.0, 24864.0], [329.0, 23034.0], [328.0, 23295.0], [327.0, 23061.0], [326.0, 23065.0], [325.0, 25377.0], [324.0, 24513.0], [350.0, 22869.0], [351.0, 22385.0], [349.0, 22642.0], [348.0, 24623.0], [347.0, 22075.0], [346.0, 23064.0], [345.0, 22837.0], [344.0, 25020.0], [343.0, 23088.0], [337.0, 23440.0], [336.0, 25221.0], [339.0, 23215.0], [338.0, 24866.0], [342.0, 22867.0], [341.0, 22877.0], [340.0, 25191.0], [366.0, 21818.0], [367.0, 22147.0], [365.0, 23883.0], [364.0, 22333.0], [363.0, 22351.0], [362.0, 24132.0], [361.0, 22367.0], [360.0, 22421.0], [359.0, 24187.0], [353.0, 23812.0], [352.0, 22884.0], [355.0, 23690.0], [354.0, 23762.0], [358.0, 22239.0], [357.0, 28691.0], [356.0, 22437.0], [382.0, 22785.0], [383.0, 21667.0], [381.0, 22881.0], [380.0, 22904.0], [379.0, 22923.0], [378.0, 21944.0], [377.0, 21993.0], [376.0, 22973.0], [375.0, 22859.0], [369.0, 23100.0], [368.0, 23150.0], [371.0, 23136.0], [370.0, 38203.0], [374.0, 22171.0], [373.0, 23663.0], [372.0, 23044.0], [398.0, 22105.0], [399.0, 23029.0], [397.0, 23005.0], [396.0, 23138.0], [395.0, 26226.0], [394.0, 23038.0], [393.0, 23042.0], [392.0, 22263.0], [391.0, 22212.0], [385.0, 22601.0], [384.0, 22641.0], [387.0, 22448.0], [386.0, 22529.0], [390.0, 22315.0], [389.0, 22380.0], [388.0, 22403.0], [414.0, 21492.0], [415.0, 29685.0], [413.0, 25652.0], [412.0, 21549.0], [411.0, 21562.0], [410.0, 24008.0], [409.0, 22619.0], [408.0, 29967.0], [407.0, 22779.0], [401.0, 26003.0], [400.0, 22094.0], [403.0, 26059.0], [402.0, 30275.0], [406.0, 26011.0], [405.0, 21926.0], [404.0, 21952.0], [430.0, 22094.0], [431.0, 29178.0], [429.0, 25154.0], [428.0, 25089.0], [427.0, 25144.0], [426.0, 22084.0], [425.0, 29346.0], [424.0, 25224.0], [423.0, 22233.0], [417.0, 22425.0], [416.0, 22412.0], [419.0, 25293.0], [418.0, 22349.0], [422.0, 25204.0], [421.0, 25262.0], [420.0, 29347.0], [446.0, 28832.0], [447.0, 21611.0], [445.0, 21689.0], [444.0, 24808.0], [443.0, 24868.0], [442.0, 21777.0], [441.0, 29030.0], [440.0, 29152.0], [439.0, 28870.0], [433.0, 29177.0], [432.0, 29231.0], [435.0, 28967.0], [434.0, 29185.0], [438.0, 29161.0], [437.0, 29129.0], [436.0, 29087.0], [462.0, 24290.0], [463.0, 24624.0], [461.0, 24654.0], [460.0, 25110.0], [459.0, 21443.0], [458.0, 25129.0], [457.0, 21665.0], [456.0, 25168.0], [455.0, 28628.0], [448.0, 28778.0], [451.0, 25059.0], [449.0, 28726.0], [454.0, 28724.0], [453.0, 24602.0], [452.0, 25298.0], [478.0, 28073.0], [479.0, 24566.0], [477.0, 28050.0], [476.0, 28221.0], [475.0, 28334.0], [474.0, 24790.0], [473.0, 24852.0], [472.0, 24197.0], [471.0, 28474.0], [465.0, 28537.0], [464.0, 28454.0], [467.0, 24988.0], [466.0, 28387.0], [470.0, 24925.0], [469.0, 25047.0], [468.0, 25014.0], [494.0, 22804.0], [495.0, 22811.0], [493.0, 39071.0], [492.0, 23608.0], [491.0, 23715.0], [490.0, 22994.0], [489.0, 23726.0], [488.0, 23734.0], [487.0, 23268.0], [481.0, 23886.0], [480.0, 23867.0], [483.0, 24346.0], [482.0, 27743.0], [486.0, 24029.0], [485.0, 23545.0], [484.0, 27568.0], [510.0, 22806.0], [511.0, 33314.0], [509.0, 21556.0], [508.0, 33468.0], [507.0, 33499.0], [506.0, 22970.0], [505.0, 23042.0], [504.0, 21754.0], [503.0, 22444.0], [497.0, 23358.0], [496.0, 22649.0], [499.0, 23205.0], [498.0, 21152.0], [502.0, 23162.0], [501.0, 22789.0], [500.0, 23140.0], [540.0, 54132.0], [543.0, 37689.0], [529.0, 32832.0], [528.0, 32798.0], [531.0, 25608.0], [530.0, 25451.0], [533.0, 87485.0], [532.0, 24288.0], [542.0, 24038.0], [541.0, 23958.0], [539.0, 32553.0], [538.0, 32624.0], [537.0, 90925.0], [536.0, 32677.0], [527.0, 25536.0], [513.0, 33288.0], [512.0, 22737.0], [515.0, 22646.0], [514.0, 33296.0], [517.0, 33180.0], [516.0, 33131.0], [519.0, 33000.0], [518.0, 33038.0], [526.0, 32749.0], [525.0, 22389.0], [524.0, 33079.0], [523.0, 22413.0], [522.0, 33061.0], [521.0, 33086.0], [520.0, 22537.0], [535.0, 32843.0], [534.0, 24257.0], [569.0, 70154.0], [574.0, 53348.0], [575.0, 24548.0], [561.0, 23607.0], [560.0, 23627.0], [563.0, 23430.0], [562.0, 23212.0], [573.0, 53463.0], [571.0, 53579.0], [570.0, 86629.0], [559.0, 23566.0], [545.0, 23984.0], [544.0, 25265.0], [547.0, 23628.0], [546.0, 23780.0], [549.0, 53948.0], [548.0, 32367.0], [551.0, 32453.0], [550.0, 23889.0], [558.0, 53765.0], [557.0, 23686.5], [556.0, 23669.0], [554.0, 23666.0], [553.0, 32402.0], [552.0, 32395.0], [567.0, 36983.0], [566.0, 86872.0], [565.0, 37146.0], [564.0, 23496.0], [604.0, 22594.0], [607.0, 55150.0], [593.0, 31143.0], [592.0, 31146.0], [595.0, 31297.0], [594.0, 23842.0], [597.0, 31210.0], [596.0, 23758.0], [606.0, 23481.0], [605.0, 23130.0], [603.0, 30922.0], [602.0, 55211.0], [601.0, 23631.0], [600.0, 30816.0], [591.0, 31328.0], [577.0, 24542.0], [576.0, 53542.0], [579.0, 24601.0], [578.0, 86635.0], [581.0, 24554.0], [580.0, 53390.0], [583.0, 53228.0], [582.0, 86598.0], [590.0, 24022.0], [589.0, 55577.0], [588.0, 23968.0], [587.0, 86543.0], [586.0, 53209.0], [585.0, 53276.0], [584.0, 24169.0], [599.0, 23689.0], [598.0, 23709.0], [636.0, 19029.0], [639.0, 19123.0], [625.0, 20352.0], [624.0, 28970.0], [627.0, 50791.0], [626.0, 45177.0], [629.0, 50683.0], [628.0, 26359.0], [638.0, 26140.0], [637.0, 26200.0], [635.0, 19130.0], [634.0, 26320.0], [633.0, 26301.0], [632.0, 84205.0], [623.0, 29022.0], [609.0, 55171.0], [608.0, 55164.0], [611.0, 23443.0], [610.0, 55180.0], [613.0, 30880.0], [612.0, 55135.0], [615.0, 23443.0], [614.0, 23516.0], [622.0, 29534.0], [621.0, 30726.0], [620.0, 23271.0], [619.0, 22398.0], [618.0, 23434.0], [617.0, 22425.0], [616.0, 30862.0], [631.0, 84340.0], [630.0, 26460.0], [664.0, 19211.0], [669.0, 83538.0], [671.0, 51244.0], [657.0, 25586.0], [656.0, 26897.0], [659.0, 25776.0], [658.0, 18992.0], [668.0, 55137.0], [666.0, 26713.0], [665.0, 19288.0], [655.0, 26832.0], [640.0, 26261.0], [642.0, 25900.0], [641.0, 25956.0], [645.0, 25871.0], [644.0, 22374.5], [647.0, 18788.0], [646.0, 50206.0], [654.0, 19582.0], [653.0, 26833.0], [652.0, 25716.0], [651.0, 50108.0], [650.0, 25810.0], [649.0, 27555.0], [648.0, 19513.0], [663.0, 83602.0], [662.0, 83586.0], [661.0, 26456.0], [660.0, 18714.0], [700.0, 50779.0], [703.0, 50824.0], [689.0, 83305.0], [688.0, 26223.0], [691.0, 19004.0], [690.0, 83206.0], [693.0, 18607.0], [692.0, 25754.0], [702.0, 26730.0], [701.0, 18662.0], [699.0, 18390.0], [698.0, 26335.0], [697.0, 50955.0], [696.0, 18656.0], [687.0, 26559.0], [673.0, 83540.0], [672.0, 19188.0], [675.0, 26824.0], [674.0, 26823.0], [677.0, 83490.0], [676.0, 83441.0], [679.0, 19203.0], [678.0, 83482.0], [686.0, 83424.0], [685.0, 51144.0], [684.0, 26985.0], [683.0, 51082.5], [681.0, 83420.0], [680.0, 26664.0], [695.0, 18637.0], [694.0, 26078.0], [732.0, 50661.0], [735.0, 50491.0], [721.0, 26106.0], [720.0, 50460.0], [723.0, 26030.0], [722.0, 26115.0], [725.0, 50583.0], [724.0, 18369.0], [734.0, 50642.0], [733.0, 26481.0], [731.0, 50751.0], [730.0, 18244.0], [729.0, 18990.0], [728.0, 50553.0], [719.0, 18601.0], [705.0, 26157.0], [704.0, 50735.0], [707.0, 50745.0], [706.0, 26619.0], [709.0, 18646.0], [708.0, 26531.0], [711.0, 50738.0], [710.0, 26167.0], [718.0, 50552.0], [717.0, 50751.0], [716.0, 50853.0], [715.0, 18381.0], [714.0, 50808.0], [713.0, 50863.0], [712.0, 50851.0], [727.0, 50745.0], [726.0, 18509.0], [761.0, 130981.0], [766.0, 131081.0], [767.0, 131101.0], [752.0, 24221.0], [754.0, 22796.0], [753.0, 24013.0], [765.0, 130956.0], [764.0, 131077.0], [763.0, 130567.0], [751.0, 24401.0], [737.0, 25553.0], [736.0, 42285.0], [739.0, 48893.0], [738.0, 24830.0], [741.0, 24646.0], [740.0, 24511.0], [743.0, 24135.0], [742.0, 48700.0], [750.0, 24115.0], [749.0, 23998.0], [748.0, 24519.0], [747.0, 24555.0], [746.0, 24518.0], [745.0, 24478.0], [744.0, 24676.0], [758.0, 130955.0], [757.0, 24359.0], [756.0, 17130.0], [755.0, 24022.0], [796.0, 22444.0], [799.0, 22343.0], [785.0, 22756.0], [784.0, 22913.0], [787.0, 22996.0], [786.0, 22911.0], [789.0, 22742.0], [788.0, 22981.0], [798.0, 22539.0], [797.0, 23377.0], [795.0, 22610.0], [794.0, 22456.0], [793.0, 22572.0], [792.0, 22643.0], [783.0, 22949.0], [768.0, 130946.0], [772.0, 131004.5], [771.0, 131124.0], [775.0, 131058.5], [773.0, 130853.0], [782.0, 23963.0], [781.0, 24114.0], [780.0, 24126.0], [779.0, 24154.0], [778.0, 21079.0], [777.0, 131032.5], [776.0, 131116.0], [791.0, 25869.0], [790.0, 22730.0], [828.0, 38542.0], [831.0, 25368.0], [817.0, 25928.0], [816.0, 25904.0], [819.0, 25133.0], [818.0, 22861.0], [821.0, 22848.0], [820.0, 22115.0], [830.0, 22520.0], [829.0, 22447.0], [827.0, 25604.0], [826.0, 25777.0], [825.0, 25742.0], [824.0, 25856.0], [815.0, 25934.0], [801.0, 22348.0], [800.0, 22516.0], [803.0, 22525.0], [802.0, 22331.0], [805.0, 22257.0], [804.0, 22425.0], [807.0, 23220.0], [806.0, 23252.0], [814.0, 22946.0], [813.0, 23061.0], [812.0, 26015.0], [811.0, 22360.0], [810.0, 22243.0], [809.0, 26172.0], [808.0, 22215.0], [823.0, 22739.0], [822.0, 22841.0], [858.0, 25817.0], [862.0, 28756.0], [863.0, 37212.0], [849.0, 24842.0], [848.0, 21907.0], [851.0, 24963.0], [850.0, 24923.0], [853.0, 21670.0], [852.0, 21767.0], [861.0, 22908.0], [860.0, 37184.0], [859.0, 28785.0], [856.0, 37029.0], [839.0, 22104.0], [838.0, 22105.0], [837.0, 25096.0], [836.0, 22033.0], [835.0, 25254.0], [834.0, 22205.0], [833.0, 22271.0], [832.0, 22208.0], [847.0, 21858.0], [846.0, 21879.0], [845.0, 21883.0], [844.0, 22011.0], [843.0, 22041.0], [842.0, 21999.0], [841.0, 21975.0], [840.0, 22152.0], [855.0, 22866.0], [854.0, 22962.0], [890.0, 28299.0], [894.0, 22411.0], [895.0, 22298.0], [880.0, 24255.0], [883.0, 28639.0], [882.0, 32794.5], [893.0, 22512.0], [892.0, 22193.0], [891.0, 22539.0], [889.0, 25307.0], [871.0, 37043.0], [870.0, 28764.0], [869.0, 28818.0], [868.0, 37164.0], [867.0, 22745.0], [866.0, 36778.0], [865.0, 25914.0], [879.0, 22707.0], [878.0, 22689.0], [877.0, 28617.0], [876.0, 36873.0], [875.0, 37010.0], [874.0, 24304.0], [873.0, 22694.0], [872.0, 28685.0], [887.0, 25875.0], [886.0, 25579.0], [885.0, 36974.0], [884.0, 22349.0], [900.0, 31266.53197810794], [899.0, 28148.0], [898.0, 28385.0], [897.0, 36608.0], [896.0, 22360.0]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[844.5749931450525, 33080.724705237226]], "isOverall": false, "label": "Home-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 900.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.61262918E12, "maxY": 17136.866666666665, "series": [{"data": [[1.61262948E12, 10122.7], [1.61262918E12, 1894.55], [1.6126296E12, 205.58333333333334], [1.6126293E12, 7102.683333333333], [1.61262924E12, 6259.733333333334], [1.61262942E12, 7159.833333333333], [1.61262936E12, 17136.866666666665], [1.61262954E12, 3387.5833333333335]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61262948E12, 3139.5], [1.61262918E12, 812.5], [1.6126296E12, 0.0], [1.6126293E12, 2749.5], [1.61262924E12, 2643.3333333333335], [1.61262942E12, 2792.8333333333335], [1.61262936E12, 2723.5], [1.61262954E12, 21.666666666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6126296E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 17015.138666666662, "minX": 1.61262918E12, "maxY": 215111.2, "series": [{"data": [[1.61262948E12, 36015.49072847679], [1.61262918E12, 17015.138666666662], [1.6126296E12, 215111.2], [1.6126293E12, 28240.293291731683], [1.61262924E12, 19276.23032786886], [1.61262942E12, 29327.676402767054], [1.61262936E12, 46860.59591298617], [1.61262954E12, 124848.73809523812]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6126296E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61262918E12, "maxY": 17686.736423841037, "series": [{"data": [[1.61262948E12, 17686.736423841037], [1.61262918E12, 3647.813333333332], [1.6126296E12, 0.0], [1.6126293E12, 13571.068642745708], [1.61262924E12, 5416.981967213116], [1.61262942E12, 14782.534973097621], [1.61262936E12, 6169.4673698088245], [1.61262954E12, 7636.119047619052]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6126296E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.7221311475409833, "minX": 1.61262918E12, "maxY": 118463.89285714284, "series": [{"data": [[1.61262948E12, 13904.046357615902], [1.61262918E12, 63.81333333333334], [1.6126296E12, 1034.8], [1.6126293E12, 6824.261310452425], [1.61262924E12, 1.7221311475409833], [1.61262942E12, 6722.887009992318], [1.61262936E12, 12327.711272247841], [1.61262954E12, 118463.89285714284]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6126296E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 11307.0, "minX": 1.61262918E12, "maxY": 138522.0, "series": [{"data": [[1.61262948E12, 138522.0], [1.61262918E12, 19400.0], [1.6126293E12, 134343.0], [1.61262924E12, 69962.0], [1.61262942E12, 88001.0], [1.61262936E12, 51872.0], [1.61262954E12, 64616.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61262948E12, 55211.0], [1.61262918E12, 19133.8], [1.6126293E12, 25522.0], [1.61262924E12, 28368.4], [1.61262942E12, 48578.0], [1.61262936E12, 24888.4], [1.61262954E12, 64614.1]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61262948E12, 86831.5], [1.61262918E12, 19371.64], [1.6126293E12, 133374.5], [1.61262924E12, 32728.27], [1.61262942E12, 84484.1], [1.61262936E12, 39407.48000000011], [1.61262954E12, 64616.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61262948E12, 83278.5], [1.61262918E12, 19257.2], [1.6126293E12, 87766.5], [1.61262924E12, 30161.350000000002], [1.61262942E12, 69876.5], [1.61262936E12, 32065.2], [1.61262954E12, 64616.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61262948E12, 14517.0], [1.61262918E12, 11307.0], [1.6126293E12, 15388.0], [1.61262924E12, 12926.0], [1.61262942E12, 15661.0], [1.61262936E12, 15580.0], [1.61262954E12, 63831.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61262948E12, 25108.0], [1.61262918E12, 17066.0], [1.6126293E12, 20239.0], [1.61262924E12, 16994.0], [1.61262942E12, 23324.0], [1.61262936E12, 20227.0], [1.61262954E12, 64580.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61262954E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 14202.0, "minX": 1.0, "maxY": 192903.5, "series": [{"data": [[2.0, 30692.5], [3.0, 22900.5], [4.0, 19770.5], [5.0, 23042.0], [6.0, 20581.0], [7.0, 23036.0], [8.0, 22011.0], [9.0, 17761.5], [10.0, 21202.0], [11.0, 15159.5], [12.0, 21705.0], [13.0, 19230.5], [14.0, 18820.0], [15.0, 18297.0], [16.0, 27743.0], [17.0, 23196.0], [18.0, 21990.5], [19.0, 20037.0], [20.0, 20904.0], [21.0, 24654.5], [22.0, 20765.0], [23.0, 20125.0], [24.0, 22289.0], [25.0, 22086.0], [26.0, 22181.5], [27.0, 133310.0], [28.0, 20483.0], [29.0, 19592.0], [30.0, 19022.0], [31.0, 23618.0], [33.0, 21891.0], [32.0, 22868.5], [35.0, 22578.0], [34.0, 21357.5], [36.0, 23671.5], [37.0, 33893.0], [38.0, 23528.5], [39.0, 29420.0], [41.0, 24758.0], [40.0, 20125.0], [43.0, 23212.0], [42.0, 24724.5], [45.0, 14202.0], [44.0, 23010.0], [47.0, 23064.5], [46.0, 20876.0], [49.0, 15198.0], [48.0, 23293.0], [51.0, 17534.0], [50.0, 20903.0], [52.0, 16735.0], [53.0, 23597.5], [54.0, 17988.5], [55.0, 23075.0], [56.0, 23685.5], [57.0, 18611.0], [58.0, 18737.0], [61.0, 17228.0], [60.0, 20053.5], [62.0, 18395.0], [63.0, 16978.0], [65.0, 20721.5], [66.0, 81978.0], [67.0, 26824.0], [70.0, 19511.5], [69.0, 20445.0], [75.0, 15438.0], [72.0, 16639.5], [77.0, 17372.5], [80.0, 18707.0], [81.0, 24776.0], [83.0, 24382.0], [85.0, 17582.0], [90.0, 16314.0], [96.0, 23633.5], [101.0, 19055.0], [115.0, 33522.0], [1.0, 21844.0], [308.0, 20119.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[38.0, 131014.5], [43.0, 129877.0], [12.0, 130644.5], [3.0, 131099.0], [53.0, 108609.0], [13.0, 129381.0], [16.0, 129238.0], [4.0, 131081.0], [18.0, 130830.5], [308.0, 170333.5], [5.0, 192903.5], [25.0, 130367.0], [7.0, 129665.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 308.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 119755.0, "series": [{"data": [[2.0, 12955.0], [3.0, 8680.0], [4.0, 4559.0], [5.0, 10246.0], [6.0, 6617.0], [7.0, 9274.0], [8.0, 8500.5], [9.0, 4129.0], [10.0, 7834.5], [11.0, 1119.5], [12.0, 9496.0], [13.0, 5577.0], [14.0, 5753.0], [15.0, 4435.0], [16.0, 11585.0], [17.0, 10431.0], [18.0, 9543.0], [19.0, 6278.0], [20.0, 8219.0], [21.0, 11641.0], [22.0, 7825.0], [23.0, 6472.0], [24.0, 6598.0], [25.0, 8435.5], [26.0, 7489.0], [27.0, 119755.0], [28.0, 7028.5], [29.0, 5578.0], [30.0, 7001.5], [31.0, 9944.0], [33.0, 8362.0], [32.0, 9524.5], [35.0, 9546.0], [34.0, 7336.0], [36.0, 10025.5], [37.0, 20526.0], [38.0, 9737.0], [39.0, 16330.0], [41.0, 10639.5], [40.0, 6238.5], [43.0, 8549.0], [42.0, 11358.0], [45.0, 671.0], [44.0, 9790.5], [47.0, 7479.5], [46.0, 8212.5], [49.0, 554.0], [48.0, 9630.5], [51.0, 3827.5], [50.0, 7561.0], [52.0, 3195.0], [53.0, 9963.5], [54.0, 5009.0], [55.0, 9085.0], [56.0, 10940.0], [57.0, 6280.0], [58.0, 5527.5], [61.0, 3104.0], [60.0, 7249.5], [62.0, 4260.5], [63.0, 3269.0], [65.0, 6564.0], [66.0, 68770.0], [67.0, 11804.0], [70.0, 5793.0], [69.0, 5759.0], [75.0, 932.0], [72.0, 2380.0], [77.0, 4950.5], [80.0, 4965.0], [81.0, 11091.0], [83.0, 10381.0], [85.0, 2940.0], [90.0, 3024.0], [96.0, 10263.0], [101.0, 5002.0], [115.0, 22593.0], [1.0, 8142.0], [308.0, 5421.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[38.0, 0.0], [43.0, 0.0], [12.0, 0.0], [3.0, 0.0], [53.0, 0.0], [13.0, 0.0], [16.0, 0.0], [4.0, 0.0], [18.0, 0.0], [308.0, 0.0], [5.0, 0.0], [25.0, 0.0], [7.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 308.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 13.683333333333334, "minX": 1.61262918E12, "maxY": 26.166666666666668, "series": [{"data": [[1.61262948E12, 13.683333333333334], [1.61262918E12, 15.266666666666667], [1.6126293E12, 23.0], [1.61262924E12, 23.366666666666667], [1.61262942E12, 20.083333333333332], [1.61262936E12, 26.166666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61262948E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.61262918E12, "maxY": 24.15, "series": [{"data": [[1.61262948E12, 24.15], [1.61262918E12, 6.25], [1.6126293E12, 21.15], [1.61262924E12, 20.333333333333332], [1.61262942E12, 21.483333333333334], [1.61262936E12, 20.95], [1.61262954E12, 0.16666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.61262948E12, 0.6666666666666666], [1.6126293E12, 0.21666666666666667], [1.61262942E12, 0.2], [1.61262954E12, 1.15]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.61262948E12, 0.35], [1.6126296E12, 0.08333333333333333], [1.61262936E12, 4.333333333333333], [1.61262954E12, 0.08333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6126296E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.61262918E12, "maxY": 24.15, "series": [{"data": [[1.61262948E12, 24.15], [1.61262918E12, 6.25], [1.6126293E12, 21.15], [1.61262924E12, 20.333333333333332], [1.61262942E12, 21.483333333333334], [1.61262936E12, 20.95], [1.61262954E12, 0.16666666666666666]], "isOverall": false, "label": "Home-success", "isController": false}, {"data": [[1.61262948E12, 1.0166666666666666], [1.6126296E12, 0.08333333333333333], [1.6126293E12, 0.21666666666666667], [1.61262942E12, 0.2], [1.61262936E12, 4.333333333333333], [1.61262954E12, 1.2333333333333334]], "isOverall": false, "label": "Home-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6126296E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.61262918E12, "maxY": 24.15, "series": [{"data": [[1.61262948E12, 24.15], [1.61262918E12, 6.25], [1.6126293E12, 21.15], [1.61262924E12, 20.333333333333332], [1.61262942E12, 21.483333333333334], [1.61262936E12, 20.95], [1.61262954E12, 0.16666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.61262948E12, 1.0166666666666666], [1.6126296E12, 0.08333333333333333], [1.6126293E12, 0.21666666666666667], [1.61262942E12, 0.2], [1.61262936E12, 4.333333333333333], [1.61262954E12, 1.2333333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6126296E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

