/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 12664.0, "minX": 0.0, "maxY": 170482.0, "series": [{"data": [[0.0, 12664.0], [0.1, 13206.0], [0.2, 13825.0], [0.3, 14179.0], [0.4, 14315.0], [0.5, 14458.0], [0.6, 14680.0], [0.7, 15091.0], [0.8, 15305.0], [0.9, 15425.0], [1.0, 15525.0], [1.1, 15626.0], [1.2, 15647.0], [1.3, 15688.0], [1.4, 15727.0], [1.5, 15768.0], [1.6, 15802.0], [1.7, 15824.0], [1.8, 15842.0], [1.9, 15873.0], [2.0, 15882.0], [2.1, 15908.0], [2.2, 15932.0], [2.3, 15945.0], [2.4, 15954.0], [2.5, 15966.0], [2.6, 15989.0], [2.7, 15999.0], [2.8, 16010.0], [2.9, 16031.0], [3.0, 16036.0], [3.1, 16050.0], [3.2, 16061.0], [3.3, 16070.0], [3.4, 16078.0], [3.5, 16082.0], [3.6, 16092.0], [3.7, 16100.0], [3.8, 16103.0], [3.9, 16117.0], [4.0, 16131.0], [4.1, 16145.0], [4.2, 16152.0], [4.3, 16165.0], [4.4, 16172.0], [4.5, 16180.0], [4.6, 16195.0], [4.7, 16207.0], [4.8, 16224.0], [4.9, 16236.0], [5.0, 16250.0], [5.1, 16256.0], [5.2, 16265.0], [5.3, 16277.0], [5.4, 16280.0], [5.5, 16295.0], [5.6, 16303.0], [5.7, 16311.0], [5.8, 16326.0], [5.9, 16340.0], [6.0, 16353.0], [6.1, 16370.0], [6.2, 16383.0], [6.3, 16411.0], [6.4, 16426.0], [6.5, 16457.0], [6.6, 16476.0], [6.7, 16491.0], [6.8, 16499.0], [6.9, 16531.0], [7.0, 16550.0], [7.1, 16571.0], [7.2, 16586.0], [7.3, 16606.0], [7.4, 16625.0], [7.5, 16634.0], [7.6, 16653.0], [7.7, 16662.0], [7.8, 16678.0], [7.9, 16686.0], [8.0, 16696.0], [8.1, 16707.0], [8.2, 16715.0], [8.3, 16728.0], [8.4, 16744.0], [8.5, 16760.0], [8.6, 16782.0], [8.7, 16790.0], [8.8, 16802.0], [8.9, 16819.0], [9.0, 16840.0], [9.1, 16854.0], [9.2, 16872.0], [9.3, 16892.0], [9.4, 16905.0], [9.5, 16926.0], [9.6, 16935.0], [9.7, 16951.0], [9.8, 16965.0], [9.9, 16977.0], [10.0, 16992.0], [10.1, 17006.0], [10.2, 17020.0], [10.3, 17028.0], [10.4, 17045.0], [10.5, 17052.0], [10.6, 17060.0], [10.7, 17071.0], [10.8, 17082.0], [10.9, 17098.0], [11.0, 17108.0], [11.1, 17122.0], [11.2, 17133.0], [11.3, 17141.0], [11.4, 17148.0], [11.5, 17155.0], [11.6, 17166.0], [11.7, 17171.0], [11.8, 17177.0], [11.9, 17189.0], [12.0, 17200.0], [12.1, 17207.0], [12.2, 17217.0], [12.3, 17234.0], [12.4, 17240.0], [12.5, 17250.0], [12.6, 17260.0], [12.7, 17274.0], [12.8, 17283.0], [12.9, 17296.0], [13.0, 17306.0], [13.1, 17314.0], [13.2, 17320.0], [13.3, 17327.0], [13.4, 17336.0], [13.5, 17348.0], [13.6, 17359.0], [13.7, 17375.0], [13.8, 17385.0], [13.9, 17404.0], [14.0, 17412.0], [14.1, 17427.0], [14.2, 17436.0], [14.3, 17449.0], [14.4, 17462.0], [14.5, 17473.0], [14.6, 17479.0], [14.7, 17485.0], [14.8, 17491.0], [14.9, 17504.0], [15.0, 17509.0], [15.1, 17516.0], [15.2, 17522.0], [15.3, 17530.0], [15.4, 17538.0], [15.5, 17543.0], [15.6, 17550.0], [15.7, 17561.0], [15.8, 17564.0], [15.9, 17570.0], [16.0, 17575.0], [16.1, 17576.0], [16.2, 17580.0], [16.3, 17586.0], [16.4, 17591.0], [16.5, 17600.0], [16.6, 17608.0], [16.7, 17613.0], [16.8, 17619.0], [16.9, 17622.0], [17.0, 17627.0], [17.1, 17635.0], [17.2, 17640.0], [17.3, 17645.0], [17.4, 17651.0], [17.5, 17660.0], [17.6, 17665.0], [17.7, 17669.0], [17.8, 17682.0], [17.9, 17690.0], [18.0, 17697.0], [18.1, 17703.0], [18.2, 17712.0], [18.3, 17729.0], [18.4, 17735.0], [18.5, 17742.0], [18.6, 17748.0], [18.7, 17754.0], [18.8, 17759.0], [18.9, 17764.0], [19.0, 17775.0], [19.1, 17784.0], [19.2, 17791.0], [19.3, 17794.0], [19.4, 17796.0], [19.5, 17804.0], [19.6, 17811.0], [19.7, 17816.0], [19.8, 17820.0], [19.9, 17825.0], [20.0, 17831.0], [20.1, 17842.0], [20.2, 17850.0], [20.3, 17856.0], [20.4, 17861.0], [20.5, 17873.0], [20.6, 17881.0], [20.7, 17884.0], [20.8, 17897.0], [20.9, 17900.0], [21.0, 17907.0], [21.1, 17916.0], [21.2, 17921.0], [21.3, 17930.0], [21.4, 17944.0], [21.5, 17955.0], [21.6, 17964.0], [21.7, 17976.0], [21.8, 17993.0], [21.9, 17999.0], [22.0, 18007.0], [22.1, 18022.0], [22.2, 18043.0], [22.3, 18055.0], [22.4, 18062.0], [22.5, 18069.0], [22.6, 18075.0], [22.7, 18086.0], [22.8, 18099.0], [22.9, 18106.0], [23.0, 18117.0], [23.1, 18131.0], [23.2, 18149.0], [23.3, 18159.0], [23.4, 18172.0], [23.5, 18179.0], [23.6, 18193.0], [23.7, 18202.0], [23.8, 18209.0], [23.9, 18226.0], [24.0, 18237.0], [24.1, 18252.0], [24.2, 18263.0], [24.3, 18279.0], [24.4, 18301.0], [24.5, 18311.0], [24.6, 18315.0], [24.7, 18327.0], [24.8, 18343.0], [24.9, 18358.0], [25.0, 18371.0], [25.1, 18380.0], [25.2, 18387.0], [25.3, 18402.0], [25.4, 18412.0], [25.5, 18426.0], [25.6, 18434.0], [25.7, 18442.0], [25.8, 18457.0], [25.9, 18468.0], [26.0, 18481.0], [26.1, 18488.0], [26.2, 18502.0], [26.3, 18512.0], [26.4, 18519.0], [26.5, 18528.0], [26.6, 18538.0], [26.7, 18554.0], [26.8, 18562.0], [26.9, 18570.0], [27.0, 18579.0], [27.1, 18587.0], [27.2, 18592.0], [27.3, 18608.0], [27.4, 18617.0], [27.5, 18619.0], [27.6, 18625.0], [27.7, 18631.0], [27.8, 18637.0], [27.9, 18650.0], [28.0, 18663.0], [28.1, 18679.0], [28.2, 18684.0], [28.3, 18696.0], [28.4, 18703.0], [28.5, 18713.0], [28.6, 18723.0], [28.7, 18735.0], [28.8, 18743.0], [28.9, 18758.0], [29.0, 18768.0], [29.1, 18777.0], [29.2, 18787.0], [29.3, 18797.0], [29.4, 18803.0], [29.5, 18810.0], [29.6, 18823.0], [29.7, 18839.0], [29.8, 18850.0], [29.9, 18866.0], [30.0, 18874.0], [30.1, 18886.0], [30.2, 18894.0], [30.3, 18902.0], [30.4, 18910.0], [30.5, 18915.0], [30.6, 18931.0], [30.7, 18948.0], [30.8, 18957.0], [30.9, 18963.0], [31.0, 18977.0], [31.1, 18985.0], [31.2, 18989.0], [31.3, 18998.0], [31.4, 19008.0], [31.5, 19017.0], [31.6, 19040.0], [31.7, 19051.0], [31.8, 19062.0], [31.9, 19077.0], [32.0, 19094.0], [32.1, 19111.0], [32.2, 19124.0], [32.3, 19135.0], [32.4, 19151.0], [32.5, 19188.0], [32.6, 19199.0], [32.7, 19216.0], [32.8, 19244.0], [32.9, 19262.0], [33.0, 19275.0], [33.1, 19288.0], [33.2, 19304.0], [33.3, 19329.0], [33.4, 19354.0], [33.5, 19388.0], [33.6, 19404.0], [33.7, 19429.0], [33.8, 19451.0], [33.9, 19478.0], [34.0, 19498.0], [34.1, 19515.0], [34.2, 19526.0], [34.3, 19546.0], [34.4, 19560.0], [34.5, 19579.0], [34.6, 19599.0], [34.7, 19615.0], [34.8, 19629.0], [34.9, 19638.0], [35.0, 19646.0], [35.1, 19660.0], [35.2, 19670.0], [35.3, 19683.0], [35.4, 19693.0], [35.5, 19710.0], [35.6, 19722.0], [35.7, 19736.0], [35.8, 19763.0], [35.9, 19787.0], [36.0, 19803.0], [36.1, 19814.0], [36.2, 19838.0], [36.3, 19846.0], [36.4, 19870.0], [36.5, 19911.0], [36.6, 19927.0], [36.7, 19934.0], [36.8, 19961.0], [36.9, 19972.0], [37.0, 19997.0], [37.1, 20013.0], [37.2, 20025.0], [37.3, 20037.0], [37.4, 20046.0], [37.5, 20055.0], [37.6, 20063.0], [37.7, 20072.0], [37.8, 20085.0], [37.9, 20089.0], [38.0, 20099.0], [38.1, 20110.0], [38.2, 20118.0], [38.3, 20126.0], [38.4, 20135.0], [38.5, 20155.0], [38.6, 20168.0], [38.7, 20179.0], [38.8, 20192.0], [38.9, 20212.0], [39.0, 20231.0], [39.1, 20251.0], [39.2, 20263.0], [39.3, 20280.0], [39.4, 20294.0], [39.5, 20312.0], [39.6, 20332.0], [39.7, 20363.0], [39.8, 20385.0], [39.9, 20398.0], [40.0, 20410.0], [40.1, 20422.0], [40.2, 20445.0], [40.3, 20459.0], [40.4, 20469.0], [40.5, 20477.0], [40.6, 20497.0], [40.7, 20513.0], [40.8, 20533.0], [40.9, 20555.0], [41.0, 20579.0], [41.1, 20597.0], [41.2, 20609.0], [41.3, 20618.0], [41.4, 20630.0], [41.5, 20657.0], [41.6, 20686.0], [41.7, 20705.0], [41.8, 20722.0], [41.9, 20735.0], [42.0, 20747.0], [42.1, 20763.0], [42.2, 20779.0], [42.3, 20796.0], [42.4, 20812.0], [42.5, 20831.0], [42.6, 20843.0], [42.7, 20859.0], [42.8, 20886.0], [42.9, 20901.0], [43.0, 20925.0], [43.1, 20945.0], [43.2, 20966.0], [43.3, 20992.0], [43.4, 21021.0], [43.5, 21050.0], [43.6, 21079.0], [43.7, 21091.0], [43.8, 21105.0], [43.9, 21119.0], [44.0, 21132.0], [44.1, 21149.0], [44.2, 21165.0], [44.3, 21173.0], [44.4, 21195.0], [44.5, 21210.0], [44.6, 21220.0], [44.7, 21247.0], [44.8, 21260.0], [44.9, 21278.0], [45.0, 21288.0], [45.1, 21302.0], [45.2, 21321.0], [45.3, 21333.0], [45.4, 21345.0], [45.5, 21356.0], [45.6, 21372.0], [45.7, 21391.0], [45.8, 21408.0], [45.9, 21440.0], [46.0, 21448.0], [46.1, 21462.0], [46.2, 21475.0], [46.3, 21510.0], [46.4, 21523.0], [46.5, 21536.0], [46.6, 21550.0], [46.7, 21565.0], [46.8, 21581.0], [46.9, 21590.0], [47.0, 21603.0], [47.1, 21625.0], [47.2, 21643.0], [47.3, 21662.0], [47.4, 21684.0], [47.5, 21697.0], [47.6, 21711.0], [47.7, 21731.0], [47.8, 21745.0], [47.9, 21762.0], [48.0, 21781.0], [48.1, 21791.0], [48.2, 21806.0], [48.3, 21821.0], [48.4, 21829.0], [48.5, 21843.0], [48.6, 21859.0], [48.7, 21873.0], [48.8, 21882.0], [48.9, 21893.0], [49.0, 21904.0], [49.1, 21923.0], [49.2, 21933.0], [49.3, 21944.0], [49.4, 21951.0], [49.5, 21970.0], [49.6, 21984.0], [49.7, 21997.0], [49.8, 22007.0], [49.9, 22030.0], [50.0, 22042.0], [50.1, 22054.0], [50.2, 22061.0], [50.3, 22069.0], [50.4, 22083.0], [50.5, 22098.0], [50.6, 22111.0], [50.7, 22126.0], [50.8, 22137.0], [50.9, 22162.0], [51.0, 22176.0], [51.1, 22195.0], [51.2, 22206.0], [51.3, 22224.0], [51.4, 22244.0], [51.5, 22269.0], [51.6, 22293.0], [51.7, 22308.0], [51.8, 22332.0], [51.9, 22347.0], [52.0, 22412.0], [52.1, 22441.0], [52.2, 22467.0], [52.3, 22487.0], [52.4, 22503.0], [52.5, 22517.0], [52.6, 22555.0], [52.7, 22571.0], [52.8, 22603.0], [52.9, 22626.0], [53.0, 22645.0], [53.1, 22668.0], [53.2, 22694.0], [53.3, 22708.0], [53.4, 22735.0], [53.5, 22754.0], [53.6, 22786.0], [53.7, 22828.0], [53.8, 22839.0], [53.9, 22859.0], [54.0, 22884.0], [54.1, 22900.0], [54.2, 22920.0], [54.3, 22931.0], [54.4, 22951.0], [54.5, 22965.0], [54.6, 22987.0], [54.7, 22998.0], [54.8, 23023.0], [54.9, 23043.0], [55.0, 23063.0], [55.1, 23081.0], [55.2, 23101.0], [55.3, 23132.0], [55.4, 23168.0], [55.5, 23183.0], [55.6, 23199.0], [55.7, 23219.0], [55.8, 23233.0], [55.9, 23246.0], [56.0, 23262.0], [56.1, 23268.0], [56.2, 23281.0], [56.3, 23305.0], [56.4, 23314.0], [56.5, 23336.0], [56.6, 23370.0], [56.7, 23383.0], [56.8, 23396.0], [56.9, 23413.0], [57.0, 23430.0], [57.1, 23436.0], [57.2, 23453.0], [57.3, 23484.0], [57.4, 23498.0], [57.5, 23505.0], [57.6, 23513.0], [57.7, 23532.0], [57.8, 23552.0], [57.9, 23571.0], [58.0, 23590.0], [58.1, 23603.0], [58.2, 23625.0], [58.3, 23649.0], [58.4, 23677.0], [58.5, 23700.0], [58.6, 23726.0], [58.7, 23742.0], [58.8, 23762.0], [58.9, 23788.0], [59.0, 23807.0], [59.1, 23831.0], [59.2, 23848.0], [59.3, 23872.0], [59.4, 23904.0], [59.5, 23914.0], [59.6, 23926.0], [59.7, 23961.0], [59.8, 23981.0], [59.9, 24000.0], [60.0, 24015.0], [60.1, 24026.0], [60.2, 24041.0], [60.3, 24075.0], [60.4, 24093.0], [60.5, 24101.0], [60.6, 24117.0], [60.7, 24134.0], [60.8, 24145.0], [60.9, 24159.0], [61.0, 24181.0], [61.1, 24207.0], [61.2, 24233.0], [61.3, 24251.0], [61.4, 24265.0], [61.5, 24282.0], [61.6, 24294.0], [61.7, 24318.0], [61.8, 24326.0], [61.9, 24342.0], [62.0, 24374.0], [62.1, 24389.0], [62.2, 24407.0], [62.3, 24423.0], [62.4, 24445.0], [62.5, 24463.0], [62.6, 24490.0], [62.7, 24506.0], [62.8, 24517.0], [62.9, 24544.0], [63.0, 24551.0], [63.1, 24560.0], [63.2, 24569.0], [63.3, 24582.0], [63.4, 24591.0], [63.5, 24609.0], [63.6, 24619.0], [63.7, 24644.0], [63.8, 24650.0], [63.9, 24668.0], [64.0, 24687.0], [64.1, 24699.0], [64.2, 24709.0], [64.3, 24724.0], [64.4, 24745.0], [64.5, 24760.0], [64.6, 24771.0], [64.7, 24786.0], [64.8, 24795.0], [64.9, 24804.0], [65.0, 24826.0], [65.1, 24858.0], [65.2, 24882.0], [65.3, 24905.0], [65.4, 24918.0], [65.5, 24935.0], [65.6, 24958.0], [65.7, 24980.0], [65.8, 24994.0], [65.9, 25008.0], [66.0, 25024.0], [66.1, 25033.0], [66.2, 25048.0], [66.3, 25060.0], [66.4, 25064.0], [66.5, 25074.0], [66.6, 25083.0], [66.7, 25086.0], [66.8, 25097.0], [66.9, 25117.0], [67.0, 25126.0], [67.1, 25142.0], [67.2, 25157.0], [67.3, 25165.0], [67.4, 25179.0], [67.5, 25196.0], [67.6, 25209.0], [67.7, 25220.0], [67.8, 25238.0], [67.9, 25260.0], [68.0, 25280.0], [68.1, 25297.0], [68.2, 25315.0], [68.3, 25332.0], [68.4, 25348.0], [68.5, 25365.0], [68.6, 25393.0], [68.7, 25417.0], [68.8, 25433.0], [68.9, 25467.0], [69.0, 25494.0], [69.1, 25513.0], [69.2, 25540.0], [69.3, 25566.0], [69.4, 25605.0], [69.5, 25647.0], [69.6, 25676.0], [69.7, 25717.0], [69.8, 25728.0], [69.9, 25757.0], [70.0, 25814.0], [70.1, 25875.0], [70.2, 25937.0], [70.3, 25968.0], [70.4, 26008.0], [70.5, 26047.0], [70.6, 26062.0], [70.7, 26076.0], [70.8, 26103.0], [70.9, 26170.0], [71.0, 26195.0], [71.1, 26233.0], [71.2, 26264.0], [71.3, 26284.0], [71.4, 26312.0], [71.5, 26329.0], [71.6, 26401.0], [71.7, 26489.0], [71.8, 26569.0], [71.9, 26641.0], [72.0, 26675.0], [72.1, 26750.0], [72.2, 26812.0], [72.3, 26860.0], [72.4, 26878.0], [72.5, 26912.0], [72.6, 26953.0], [72.7, 27027.0], [72.8, 27060.0], [72.9, 27084.0], [73.0, 27113.0], [73.1, 27139.0], [73.2, 27170.0], [73.3, 27236.0], [73.4, 27291.0], [73.5, 27337.0], [73.6, 27379.0], [73.7, 27417.0], [73.8, 27462.0], [73.9, 27512.0], [74.0, 27538.0], [74.1, 27565.0], [74.2, 27633.0], [74.3, 27688.0], [74.4, 27765.0], [74.5, 27811.0], [74.6, 27849.0], [74.7, 27917.0], [74.8, 27963.0], [74.9, 28185.0], [75.0, 28277.0], [75.1, 28394.0], [75.2, 28486.0], [75.3, 28612.0], [75.4, 28688.0], [75.5, 28739.0], [75.6, 28786.0], [75.7, 28852.0], [75.8, 28882.0], [75.9, 28933.0], [76.0, 29010.0], [76.1, 29045.0], [76.2, 29083.0], [76.3, 29173.0], [76.4, 29251.0], [76.5, 29337.0], [76.6, 29389.0], [76.7, 29478.0], [76.8, 29512.0], [76.9, 29547.0], [77.0, 29624.0], [77.1, 29673.0], [77.2, 29774.0], [77.3, 29865.0], [77.4, 29932.0], [77.5, 29974.0], [77.6, 30033.0], [77.7, 30072.0], [77.8, 30113.0], [77.9, 30213.0], [78.0, 30304.0], [78.1, 30337.0], [78.2, 30386.0], [78.3, 30432.0], [78.4, 30489.0], [78.5, 30541.0], [78.6, 30590.0], [78.7, 30644.0], [78.8, 30686.0], [78.9, 30850.0], [79.0, 31168.0], [79.1, 31356.0], [79.2, 31432.0], [79.3, 31531.0], [79.4, 31593.0], [79.5, 31637.0], [79.6, 31777.0], [79.7, 32019.0], [79.8, 32136.0], [79.9, 32222.0], [80.0, 32316.0], [80.1, 32404.0], [80.2, 32488.0], [80.3, 32522.0], [80.4, 32570.0], [80.5, 32599.0], [80.6, 32635.0], [80.7, 32680.0], [80.8, 32721.0], [80.9, 32754.0], [81.0, 32800.0], [81.1, 32843.0], [81.2, 32898.0], [81.3, 32924.0], [81.4, 33003.0], [81.5, 33046.0], [81.6, 33075.0], [81.7, 33113.0], [81.8, 33133.0], [81.9, 33164.0], [82.0, 33197.0], [82.1, 33214.0], [82.2, 33218.0], [82.3, 33227.0], [82.4, 33244.0], [82.5, 33263.0], [82.6, 33276.0], [82.7, 33289.0], [82.8, 33305.0], [82.9, 33329.0], [83.0, 33341.0], [83.1, 33357.0], [83.2, 33381.0], [83.3, 33418.0], [83.4, 33434.0], [83.5, 33443.0], [83.6, 33466.0], [83.7, 33487.0], [83.8, 33513.0], [83.9, 33569.0], [84.0, 33599.0], [84.1, 33674.0], [84.2, 33758.0], [84.3, 33881.0], [84.4, 33948.0], [84.5, 34070.0], [84.6, 34107.0], [84.7, 34181.0], [84.8, 34320.0], [84.9, 34573.0], [85.0, 34729.0], [85.1, 34849.0], [85.2, 34918.0], [85.3, 35057.0], [85.4, 35125.0], [85.5, 35234.0], [85.6, 35286.0], [85.7, 35378.0], [85.8, 35410.0], [85.9, 35451.0], [86.0, 35580.0], [86.1, 35646.0], [86.2, 35705.0], [86.3, 35867.0], [86.4, 35964.0], [86.5, 36032.0], [86.6, 36091.0], [86.7, 36142.0], [86.8, 36166.0], [86.9, 36211.0], [87.0, 36291.0], [87.1, 36476.0], [87.2, 36583.0], [87.3, 36677.0], [87.4, 36817.0], [87.5, 36890.0], [87.6, 36976.0], [87.7, 37110.0], [87.8, 37260.0], [87.9, 37965.0], [88.0, 38181.0], [88.1, 38456.0], [88.2, 38535.0], [88.3, 38589.0], [88.4, 38657.0], [88.5, 38689.0], [88.6, 38723.0], [88.7, 38776.0], [88.8, 38817.0], [88.9, 38838.0], [89.0, 38998.0], [89.1, 39060.0], [89.2, 39151.0], [89.3, 39541.0], [89.4, 39887.0], [89.5, 40282.0], [89.6, 40371.0], [89.7, 40772.0], [89.8, 41259.0], [89.9, 42421.0], [90.0, 42546.0], [90.1, 43495.0], [90.2, 45100.0], [90.3, 45378.0], [90.4, 46542.0], [90.5, 47930.0], [90.6, 48012.0], [90.7, 48100.0], [90.8, 48165.0], [90.9, 48256.0], [91.0, 48361.0], [91.1, 48424.0], [91.2, 48605.0], [91.3, 48872.0], [91.4, 48918.0], [91.5, 49027.0], [91.6, 49279.0], [91.7, 49509.0], [91.8, 49999.0], [91.9, 50273.0], [92.0, 50347.0], [92.1, 50521.0], [92.2, 50670.0], [92.3, 51091.0], [92.4, 51564.0], [92.5, 51815.0], [92.6, 51921.0], [92.7, 52205.0], [92.8, 53271.0], [92.9, 53566.0], [93.0, 53759.0], [93.1, 53885.0], [93.2, 53993.0], [93.3, 54621.0], [93.4, 54962.0], [93.5, 55505.0], [93.6, 55818.0], [93.7, 56063.0], [93.8, 57036.0], [93.9, 62295.0], [94.0, 65673.0], [94.1, 65742.0], [94.2, 65789.0], [94.3, 65840.0], [94.4, 65873.0], [94.5, 71847.0], [94.6, 75334.0], [94.7, 75423.0], [94.8, 81729.0], [94.9, 83419.0], [95.0, 83834.0], [95.1, 84023.0], [95.2, 84712.0], [95.3, 87939.0], [95.4, 88174.0], [95.5, 88464.0], [95.6, 88955.0], [95.7, 90014.0], [95.8, 90687.0], [95.9, 90937.0], [96.0, 91336.0], [96.1, 91481.0], [96.2, 91756.0], [96.3, 91984.0], [96.4, 129167.0], [96.5, 129195.0], [96.6, 129229.0], [96.7, 129261.0], [96.8, 129314.0], [96.9, 129376.0], [97.0, 129409.0], [97.1, 129463.0], [97.2, 129512.0], [97.3, 129593.0], [97.4, 129646.0], [97.5, 129842.0], [97.6, 129947.0], [97.7, 129964.0], [97.8, 130043.0], [97.9, 130201.0], [98.0, 130266.0], [98.1, 130303.0], [98.2, 130342.0], [98.3, 130367.0], [98.4, 130412.0], [98.5, 130587.0], [98.6, 130913.0], [98.7, 131056.0], [98.8, 131108.0], [98.9, 131141.0], [99.0, 131173.0], [99.1, 131176.0], [99.2, 131188.0], [99.3, 131198.0], [99.4, 137016.0], [99.5, 137479.0], [99.6, 170353.0], [99.7, 170361.0], [99.8, 170364.0], [99.9, 170447.0]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 12600.0, "maxY": 118.0, "series": [{"data": [[170400.0, 8.0], [82700.0, 1.0], [90700.0, 3.0], [129100.0, 13.0], [130700.0, 1.0], [137000.0, 1.0], [34500.0, 3.0], [32900.0, 12.0], [33700.0, 4.0], [35300.0, 12.0], [36100.0, 17.0], [36900.0, 6.0], [38500.0, 12.0], [40100.0, 2.0], [39300.0, 1.0], [41700.0, 1.0], [42500.0, 5.0], [46500.0, 1.0], [48100.0, 11.0], [48900.0, 7.0], [50500.0, 5.0], [49700.0, 1.0], [51300.0, 1.0], [52100.0, 2.0], [53700.0, 7.0], [54500.0, 1.0], [56100.0, 1.0], [56900.0, 1.0], [55300.0, 1.0], [65800.0, 13.0], [75400.0, 4.0], [83400.0, 3.0], [88200.0, 3.0], [91400.0, 4.0], [129800.0, 2.0], [80900.0, 3.0], [84100.0, 4.0], [88900.0, 2.0], [90500.0, 2.0], [92100.0, 1.0], [130500.0, 1.0], [137400.0, 4.0], [12600.0, 1.0], [12800.0, 1.0], [13000.0, 3.0], [13200.0, 2.0], [13800.0, 5.0], [14200.0, 6.0], [14400.0, 6.0], [14600.0, 5.0], [14800.0, 2.0], [15000.0, 3.0], [15200.0, 3.0], [15400.0, 7.0], [15600.0, 20.0], [15800.0, 32.0], [16000.0, 70.0], [16200.0, 66.0], [17200.0, 67.0], [16400.0, 38.0], [16800.0, 43.0], [17600.0, 109.0], [18000.0, 66.0], [18400.0, 66.0], [18800.0, 66.0], [19200.0, 41.0], [19600.0, 62.0], [20000.0, 71.0], [20400.0, 53.0], [20800.0, 41.0], [21200.0, 46.0], [22000.0, 55.0], [22400.0, 30.0], [21600.0, 38.0], [22800.0, 32.0], [23200.0, 48.0], [23600.0, 31.0], [24400.0, 38.0], [24000.0, 44.0], [24800.0, 32.0], [25200.0, 42.0], [25600.0, 22.0], [26000.0, 29.0], [26400.0, 10.0], [27200.0, 12.0], [27600.0, 12.0], [26800.0, 20.0], [28400.0, 7.0], [28000.0, 1.0], [28800.0, 16.0], [29200.0, 11.0], [29600.0, 16.0], [30000.0, 15.0], [30400.0, 14.0], [30800.0, 4.0], [31200.0, 2.0], [31600.0, 8.0], [32000.0, 5.0], [32400.0, 11.0], [32800.0, 17.0], [33600.0, 10.0], [35200.0, 8.0], [36000.0, 13.0], [36800.0, 13.0], [38400.0, 4.0], [40800.0, 2.0], [39200.0, 3.0], [42400.0, 5.0], [170300.0, 21.0], [44800.0, 1.0], [45600.0, 2.0], [48000.0, 9.0], [48800.0, 7.0], [49600.0, 3.0], [50400.0, 4.0], [54400.0, 3.0], [53600.0, 3.0], [56000.0, 7.0], [57600.0, 1.0], [65600.0, 4.0], [70400.0, 1.0], [75200.0, 2.0], [83200.0, 1.0], [88000.0, 5.0], [89600.0, 1.0], [91200.0, 3.0], [129600.0, 6.0], [137600.0, 2.0], [131200.0, 5.0], [84700.0, 1.0], [87900.0, 1.0], [89500.0, 1.0], [91100.0, 1.0], [129500.0, 15.0], [34700.0, 3.0], [33100.0, 25.0], [33900.0, 7.0], [35500.0, 4.0], [36300.0, 3.0], [38700.0, 15.0], [37900.0, 2.0], [37100.0, 2.0], [40300.0, 7.0], [39500.0, 1.0], [41100.0, 3.0], [42700.0, 2.0], [43500.0, 2.0], [45100.0, 2.0], [46700.0, 1.0], [48300.0, 8.0], [47500.0, 1.0], [49100.0, 1.0], [49900.0, 1.0], [50700.0, 5.0], [51500.0, 5.0], [54700.0, 4.0], [53900.0, 7.0], [55500.0, 2.0], [58700.0, 1.0], [65100.0, 2.0], [83800.0, 2.0], [88600.0, 2.0], [91800.0, 3.0], [130200.0, 15.0], [89300.0, 1.0], [87700.0, 2.0], [90900.0, 5.0], [129300.0, 13.0], [130900.0, 3.0], [16500.0, 33.0], [16900.0, 47.0], [17300.0, 68.0], [17700.0, 104.0], [18100.0, 59.0], [18500.0, 76.0], [18900.0, 75.0], [19300.0, 27.0], [20100.0, 58.0], [19700.0, 34.0], [21300.0, 50.0], [20900.0, 31.0], [20500.0, 35.0], [21700.0, 48.0], [22100.0, 46.0], [22500.0, 29.0], [22900.0, 44.0], [23300.0, 39.0], [23700.0, 32.0], [24500.0, 55.0], [24100.0, 43.0], [24900.0, 41.0], [25300.0, 35.0], [26500.0, 10.0], [26100.0, 17.0], [25700.0, 21.0], [26900.0, 13.0], [27300.0, 16.0], [27700.0, 11.0], [28100.0, 5.0], [28500.0, 5.0], [29300.0, 8.0], [28900.0, 11.0], [29700.0, 6.0], [30100.0, 9.0], [30500.0, 14.0], [31300.0, 7.0], [31700.0, 5.0], [30900.0, 2.0], [32100.0, 8.0], [32500.0, 18.0], [34600.0, 4.0], [33000.0, 20.0], [33800.0, 7.0], [137500.0, 1.0], [131100.0, 37.0], [35400.0, 14.0], [36200.0, 9.0], [37000.0, 7.0], [38600.0, 17.0], [40200.0, 7.0], [39400.0, 2.0], [42600.0, 1.0], [43400.0, 1.0], [48200.0, 6.0], [49000.0, 9.0], [49800.0, 1.0], [50600.0, 3.0], [51400.0, 2.0], [52200.0, 1.0], [53000.0, 1.0], [53800.0, 4.0], [54600.0, 3.0], [56200.0, 1.0], [55400.0, 5.0], [57000.0, 2.0], [72400.0, 1.0], [82000.0, 1.0], [90000.0, 1.0], [88400.0, 6.0], [91600.0, 2.0], [130000.0, 7.0], [137700.0, 1.0], [70700.0, 2.0], [83500.0, 2.0], [91500.0, 4.0], [129900.0, 16.0], [34100.0, 13.0], [33300.0, 37.0], [34900.0, 6.0], [36500.0, 7.0], [35700.0, 3.0], [38100.0, 5.0], [38900.0, 4.0], [37300.0, 1.0], [39700.0, 2.0], [42900.0, 1.0], [44500.0, 1.0], [43700.0, 1.0], [45300.0, 4.0], [48500.0, 1.0], [47700.0, 1.0], [50100.0, 4.0], [49300.0, 3.0], [51700.0, 1.0], [52500.0, 1.0], [53300.0, 1.0], [54900.0, 1.0], [55700.0, 3.0], [58900.0, 2.0], [87400.0, 1.0], [90600.0, 4.0], [92200.0, 1.0], [130600.0, 4.0], [65700.0, 15.0], [75300.0, 5.0], [81700.0, 1.0], [83300.0, 1.0], [88100.0, 2.0], [91300.0, 4.0], [129700.0, 5.0], [13100.0, 2.0], [13300.0, 1.0], [13500.0, 3.0], [13900.0, 2.0], [14100.0, 2.0], [14300.0, 2.0], [14500.0, 2.0], [14900.0, 3.0], [15100.0, 3.0], [15300.0, 6.0], [15500.0, 4.0], [15700.0, 20.0], [15900.0, 48.0], [16100.0, 68.0], [16300.0, 51.0], [16600.0, 58.0], [17000.0, 64.0], [17400.0, 69.0], [18200.0, 53.0], [17800.0, 101.0], [18600.0, 77.0], [19000.0, 50.0], [19400.0, 32.0], [20200.0, 43.0], [19800.0, 37.0], [21000.0, 31.0], [21400.0, 36.0], [20600.0, 37.0], [21800.0, 56.0], [22200.0, 34.0], [23000.0, 34.0], [23400.0, 44.0], [22600.0, 30.0], [24200.0, 38.0], [23800.0, 30.0], [24600.0, 48.0], [25000.0, 68.0], [25400.0, 32.0], [25800.0, 12.0], [26200.0, 23.0], [26600.0, 14.0], [27000.0, 22.0], [27400.0, 17.0], [28200.0, 7.0], [28600.0, 12.0], [27800.0, 13.0], [29400.0, 14.0], [29000.0, 16.0], [29800.0, 8.0], [30200.0, 8.0], [30600.0, 13.0], [31400.0, 8.0], [31000.0, 1.0], [31800.0, 3.0], [32200.0, 7.0], [32600.0, 18.0], [34800.0, 12.0], [33200.0, 53.0], [34000.0, 8.0], [36400.0, 6.0], [35600.0, 12.0], [38800.0, 15.0], [38000.0, 3.0], [37200.0, 8.0], [39600.0, 2.0], [40400.0, 4.0], [41200.0, 2.0], [42000.0, 1.0], [42800.0, 1.0], [45200.0, 3.0], [46800.0, 2.0], [48400.0, 10.0], [50800.0, 2.0], [49200.0, 2.0], [50000.0, 1.0], [51600.0, 4.0], [53200.0, 1.0], [52400.0, 3.0], [55600.0, 3.0], [58800.0, 1.0], [74400.0, 1.0], [84000.0, 3.0], [88800.0, 2.0], [130400.0, 8.0], [136900.0, 2.0], [74300.0, 1.0], [82300.0, 1.0], [83900.0, 6.0], [90300.0, 1.0], [91900.0, 2.0], [130300.0, 20.0], [137800.0, 2.0], [34300.0, 9.0], [33500.0, 18.0], [35100.0, 7.0], [35900.0, 10.0], [36700.0, 2.0], [38300.0, 2.0], [40700.0, 2.0], [39100.0, 4.0], [42300.0, 2.0], [45500.0, 1.0], [47900.0, 5.0], [48700.0, 2.0], [50300.0, 7.0], [49500.0, 2.0], [51900.0, 5.0], [53500.0, 1.0], [56700.0, 1.0], [59900.0, 1.0], [71800.0, 2.0], [83000.0, 1.0], [89400.0, 2.0], [86200.0, 1.0], [129400.0, 13.0], [131000.0, 11.0], [137300.0, 3.0], [72500.0, 1.0], [82100.0, 1.0], [83700.0, 1.0], [91700.0, 4.0], [130100.0, 3.0], [16700.0, 49.0], [17100.0, 77.0], [17500.0, 118.0], [17900.0, 73.0], [18300.0, 63.0], [18700.0, 73.0], [19100.0, 42.0], [19500.0, 43.0], [19900.0, 39.0], [20300.0, 35.0], [21100.0, 48.0], [20700.0, 48.0], [21500.0, 50.0], [21900.0, 55.0], [22300.0, 25.0], [23500.0, 45.0], [22700.0, 31.0], [23100.0, 30.0], [24300.0, 36.0], [23900.0, 37.0], [24700.0, 52.0], [25100.0, 52.0], [25500.0, 23.0], [25900.0, 17.0], [26300.0, 17.0], [27100.0, 22.0], [27500.0, 19.0], [26700.0, 9.0], [27900.0, 13.0], [28300.0, 6.0], [29500.0, 8.0], [28700.0, 13.0], [29100.0, 8.0], [29900.0, 16.0], [30300.0, 17.0], [30700.0, 5.0], [31500.0, 11.0], [31100.0, 4.0], [32700.0, 17.0], [32300.0, 9.0], [31900.0, 3.0], [33400.0, 35.0], [34200.0, 4.0], [35000.0, 8.0], [35800.0, 6.0], [36600.0, 6.0], [38200.0, 2.0], [37400.0, 2.0], [39000.0, 10.0], [39800.0, 3.0], [41400.0, 1.0], [43800.0, 1.0], [45400.0, 3.0], [48600.0, 2.0], [47800.0, 1.0], [50200.0, 4.0], [51000.0, 1.0], [49400.0, 3.0], [51800.0, 7.0], [52600.0, 1.0], [53400.0, 6.0], [54200.0, 2.0], [55800.0, 2.0], [62200.0, 1.0], [65400.0, 2.0], [66800.0, 2.0], [81200.0, 2.0], [87600.0, 2.0], [89200.0, 1.0], [90800.0, 1.0], [129200.0, 18.0], [130800.0, 1.0]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 170400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 247.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6907.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6907.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 247.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 29.436363636363637, "minX": 1.61262972E12, "maxY": 800.0, "series": [{"data": [[1.61262996E12, 800.0], [1.61263008E12, 29.436363636363637], [1.61262978E12, 800.0], [1.61262972E12, 800.0], [1.6126299E12, 800.0], [1.61262984E12, 800.0], [1.61263002E12, 553.6871111111108]], "isOverall": false, "label": "Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61263008E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 18064.0, "minX": 1.0, "maxY": 131190.0, "series": [{"data": [[4.0, 129167.0], [7.0, 129166.6], [11.0, 131179.0], [12.0, 131179.0], [16.0, 130547.5], [18.0, 131190.0], [19.0, 130515.5], [20.0, 131189.0], [21.0, 131188.5], [22.0, 131176.0], [23.0, 131174.25], [24.0, 65787.0], [25.0, 65764.0], [26.0, 65837.0], [27.0, 65871.0], [28.0, 65761.0], [29.0, 65791.0], [30.0, 65853.0], [31.0, 65689.0], [33.0, 65752.0], [32.0, 65705.0], [35.0, 65673.0], [34.0, 65743.0], [37.0, 65669.0], [36.0, 65713.0], [38.0, 65707.0], [41.0, 65805.0], [40.0, 65813.0], [43.0, 65642.0], [45.0, 65840.0], [44.0, 65870.0], [47.0, 65802.0], [46.0, 65859.0], [49.0, 65742.0], [48.0, 65849.0], [51.0, 65750.0], [53.0, 65824.0], [55.0, 65789.0], [54.0, 65771.0], [56.0, 65182.0], [59.0, 65348.0], [61.0, 25545.0], [60.0, 130846.0], [63.0, 66857.0], [62.0, 28863.0], [67.0, 72438.0], [66.0, 71847.0], [65.0, 72507.0], [64.0, 66807.0], [71.0, 40463.0], [70.0, 48865.0], [69.0, 23848.0], [68.0, 71835.0], [75.0, 40398.0], [74.0, 40301.5], [73.0, 40437.0], [79.0, 40299.5], [77.0, 40399.0], [76.0, 40368.0], [83.0, 40331.0], [82.0, 75423.0], [81.0, 40430.0], [80.0, 40428.0], [87.0, 40188.0], [86.0, 75349.0], [85.0, 40251.0], [84.0, 75275.0], [90.0, 75414.0], [89.0, 40296.0], [88.0, 40228.0], [95.0, 75335.33333333333], [92.0, 75381.0], [98.0, 75334.0], [97.0, 40282.0], [96.0, 75390.0], [103.0, 42421.0], [102.0, 42546.0], [101.0, 42524.0], [100.0, 42557.5], [107.0, 42833.0], [106.0, 42938.0], [105.0, 42350.0], [104.0, 42413.0], [111.0, 43495.0], [110.0, 43528.0], [109.0, 42492.0], [108.0, 42446.0], [115.0, 23758.0], [114.0, 23765.0], [113.0, 42786.0], [112.0, 43851.0], [119.0, 23957.0], [118.0, 23735.0], [117.0, 46891.0], [116.0, 42757.0], [123.0, 23788.0], [122.0, 23510.0], [121.0, 23796.0], [120.0, 43747.0], [127.0, 23536.0], [126.0, 23905.0], [125.0, 23724.0], [124.0, 27950.0], [135.0, 23835.0], [134.0, 36111.5], [132.0, 23687.0], [131.0, 23918.0], [130.0, 23826.0], [129.0, 46869.0], [128.0, 46542.0], [143.0, 42631.0], [142.0, 23831.0], [141.0, 23904.0], [140.0, 23739.0], [139.0, 23472.0], [138.0, 23647.0], [137.0, 23782.0], [136.0, 27900.0], [151.0, 24323.0], [150.0, 48374.0], [149.0, 23904.0], [148.0, 48416.0], [147.0, 23687.0], [146.0, 24294.0], [145.0, 48452.0], [144.0, 48424.0], [159.0, 27777.0], [158.0, 24284.0], [157.0, 27798.0], [156.0, 24558.0], [155.0, 43597.0], [154.0, 24197.0], [153.0, 24788.0], [152.0, 48323.0], [167.0, 24559.0], [166.0, 26257.0], [164.0, 24788.0], [163.0, 23735.0], [162.0, 24734.0], [161.0, 46745.0], [160.0, 23378.0], [175.0, 24512.0], [174.0, 24512.0], [173.0, 24445.0], [172.0, 24531.0], [171.0, 24644.0], [170.0, 24674.0], [169.0, 48196.0], [168.0, 24382.0], [183.0, 24654.0], [182.0, 24420.0], [181.0, 24756.0], [180.0, 24760.0], [179.0, 24786.0], [178.0, 23689.0], [177.0, 24692.0], [176.0, 24808.0], [191.0, 23443.0], [190.0, 23431.0], [189.0, 27061.0], [188.0, 23580.0], [187.0, 24541.0], [186.0, 24562.0], [185.0, 24624.0], [184.0, 24619.0], [199.0, 56069.0], [198.0, 27008.0], [197.0, 31638.0], [196.0, 31755.0], [195.0, 84080.0], [194.0, 23415.0], [193.0, 23415.0], [192.0, 22925.0], [207.0, 56039.0], [206.0, 56045.0], [205.0, 56046.0], [204.0, 22859.0], [203.0, 56062.0], [202.0, 43902.0], [200.0, 31621.0], [215.0, 26869.0], [214.0, 23313.0], [213.0, 83981.0], [212.0, 22839.0], [211.0, 57898.0], [209.0, 69899.0], [223.0, 84075.0], [222.0, 74387.0], [221.0, 23238.0], [220.0, 79279.5], [218.0, 84145.0], [217.0, 22991.0], [216.0, 56005.0], [231.0, 38807.0], [230.0, 38690.0], [229.0, 23159.0], [228.0, 22697.0], [227.0, 23063.0], [226.0, 83834.0], [225.0, 84023.0], [224.0, 83930.0], [239.0, 23099.0], [238.0, 23111.0], [237.0, 38754.0], [236.0, 55665.0], [235.0, 38819.0], [234.0, 23470.0], [233.0, 38838.0], [232.0, 23293.0], [247.0, 38535.0], [246.0, 38522.0], [245.0, 26673.0], [244.0, 26699.0], [243.0, 23266.0], [242.0, 23372.0], [241.0, 38767.0], [240.0, 38634.0], [255.0, 22816.0], [254.0, 26565.0], [253.0, 23441.0], [252.0, 23523.0], [251.0, 23187.0], [250.0, 23560.0], [249.0, 26264.0], [248.0, 23908.0], [270.0, 22341.0], [271.0, 22339.0], [269.0, 22042.0], [268.0, 25108.0], [267.0, 37465.0], [266.0, 25109.0], [265.0, 25150.0], [264.0, 22144.0], [263.0, 25173.0], [256.0, 25356.0], [259.0, 23723.5], [257.0, 25350.0], [262.0, 25198.0], [261.0, 25202.0], [260.0, 25203.0], [285.0, 22120.0], [286.0, 22122.0], [284.0, 22168.0], [274.0, 22286.0], [273.0, 25031.0], [272.0, 22302.0], [283.0, 22239.0], [282.0, 22132.0], [281.0, 22189.0], [280.0, 22114.0], [279.0, 21970.0], [278.0, 22293.0], [277.0, 29530.0], [276.0, 31159.5], [302.0, 25170.0], [303.0, 24990.0], [301.0, 39203.0], [300.0, 39092.0], [299.0, 25191.0], [298.0, 25048.0], [297.0, 25182.5], [295.0, 39088.0], [289.0, 21992.0], [288.0, 22171.5], [291.0, 25119.0], [290.0, 29196.0], [294.0, 25168.0], [293.0, 21983.0], [292.0, 24622.0], [318.0, 24974.0], [319.0, 23771.0], [317.0, 25864.0], [316.0, 25822.0], [315.0, 23424.0], [314.0, 25061.0], [313.0, 25915.0], [312.0, 39091.0], [311.0, 25090.0], [305.0, 39060.0], [304.0, 39139.0], [307.0, 38925.0], [306.0, 39141.0], [310.0, 22514.0], [309.0, 39043.0], [334.0, 23985.0], [335.0, 24014.0], [333.0, 38953.0], [332.0, 25659.0], [331.0, 24075.0], [330.0, 38786.0], [329.0, 24266.0], [328.0, 31593.5], [326.0, 31566.0], [323.0, 24331.0], [322.0, 24374.0], [321.0, 31613.5], [324.0, 38831.0], [350.0, 38456.0], [351.0, 24296.0], [349.0, 23967.0], [348.0, 24071.0], [347.0, 24108.0], [346.0, 23867.0], [345.0, 24114.5], [343.0, 25519.0], [337.0, 24021.0], [336.0, 24159.0], [339.0, 24260.0], [338.0, 25645.0], [342.0, 24138.0], [341.0, 24096.0], [340.0, 24116.0], [366.0, 22701.0], [367.0, 22706.0], [365.0, 37007.0], [364.0, 22077.0], [363.0, 36963.0], [362.0, 22133.0], [361.0, 37110.0], [360.0, 22888.0], [359.0, 37127.0], [353.0, 22319.0], [352.0, 22455.0], [355.0, 21984.0], [354.0, 37405.0], [358.0, 37239.0], [357.0, 37271.0], [356.0, 37367.0], [382.0, 21957.0], [383.0, 28969.0], [381.0, 21882.0], [380.0, 21871.0], [379.0, 22007.0], [378.0, 25473.0], [377.0, 21843.0], [376.0, 21915.0], [375.0, 21827.0], [369.0, 21951.0], [368.0, 36964.0], [371.0, 21476.0], [370.0, 22545.0], [374.0, 22040.0], [373.0, 36651.0], [372.0, 29053.0], [398.0, 21335.0], [399.0, 28727.0], [397.0, 21405.0], [396.0, 28718.0], [395.0, 28584.0], [394.0, 28831.0], [393.0, 21731.0], [392.0, 21050.0], [391.0, 22137.0], [385.0, 21986.0], [384.0, 36568.0], [387.0, 21899.0], [386.0, 28983.0], [390.0, 28699.0], [389.0, 21473.0], [388.0, 21881.0], [414.0, 21097.0], [415.0, 21457.0], [413.0, 21163.0], [412.0, 22904.5], [410.0, 53009.0], [409.0, 21302.0], [408.0, 35922.0], [407.0, 21283.0], [401.0, 28588.0], [400.0, 21523.0], [403.0, 21474.0], [402.0, 21232.0], [406.0, 21304.0], [405.0, 21448.0], [404.0, 21519.0], [430.0, 21228.0], [431.0, 24239.0], [429.0, 35485.0], [428.0, 35606.0], [427.0, 52436.0], [426.0, 52431.0], [425.0, 52506.0], [424.0, 24305.0], [423.0, 52619.0], [417.0, 21060.0], [416.0, 24459.0], [419.0, 24156.0], [418.0, 21087.0], [422.0, 24095.0], [421.0, 22716.5], [446.0, 23535.0], [447.0, 20391.0], [445.0, 20606.0], [444.0, 20741.0], [443.0, 20781.0], [442.0, 20882.0], [441.0, 20800.0], [440.0, 20901.0], [439.0, 20872.0], [433.0, 21149.0], [432.0, 35439.0], [435.0, 24098.0], [434.0, 21070.0], [438.0, 20876.0], [437.0, 24015.0], [436.0, 21057.0], [462.0, 22608.0], [463.0, 19518.0], [461.0, 22648.0], [460.0, 19614.0], [459.0, 22865.0], [458.0, 19925.0], [457.0, 19985.0], [456.0, 23140.0], [455.0, 20134.0], [449.0, 59960.0], [448.0, 23476.0], [451.0, 23434.0], [450.0, 20355.0], [454.0, 20095.0], [453.0, 20113.0], [452.0, 20332.0], [478.0, 21946.0], [479.0, 21976.0], [477.0, 21933.0], [476.0, 22008.0], [475.0, 18873.0], [474.0, 22053.0], [473.0, 19024.0], [472.0, 19068.0], [471.0, 19056.0], [465.0, 19381.0], [464.0, 22555.0], [467.0, 19290.0], [466.0, 19290.0], [470.0, 19050.0], [469.0, 22283.0], [468.0, 19277.0], [494.0, 18723.0], [495.0, 21743.0], [493.0, 18661.0], [492.0, 18767.0], [491.0, 18588.0], [490.0, 18715.0], [489.0, 18622.0], [488.0, 18735.0], [487.0, 21684.0], [481.0, 18834.0], [480.0, 21891.0], [483.0, 18886.0], [482.0, 18886.0], [486.0, 21825.0], [485.0, 22044.0], [484.0, 21831.0], [509.0, 20402.0], [510.0, 18468.0], [508.0, 18314.0], [499.0, 18548.0], [498.0, 21581.0], [497.0, 18662.0], [496.0, 21606.0], [507.0, 21462.0], [506.0, 24509.0], [505.0, 37055.0], [504.0, 18530.0], [503.0, 18534.0], [502.0, 18540.0], [501.0, 18652.0], [500.0, 18759.0], [540.0, 21274.0], [543.0, 36607.0], [529.0, 20071.0], [528.0, 18118.0], [531.0, 36828.0], [530.0, 24239.0], [533.0, 24249.0], [532.0, 36656.0], [542.0, 21135.0], [541.0, 36737.0], [539.0, 24194.0], [538.0, 20083.0], [537.0, 21249.0], [536.0, 36677.0], [527.0, 21248.0], [513.0, 18564.0], [512.0, 22919.0], [515.0, 37044.0], [514.0, 18255.0], [517.0, 24544.0], [516.0, 21557.0], [519.0, 18202.0], [518.0, 21532.0], [526.0, 20077.0], [525.0, 21301.0], [524.0, 36880.0], [523.0, 21165.0], [522.0, 24463.0], [521.0, 21297.0], [520.0, 18245.0], [535.0, 18064.0], [534.0, 21167.0], [572.0, 20445.0], [575.0, 20334.0], [561.0, 36166.0], [560.0, 20810.0], [563.0, 20621.0], [562.0, 36150.0], [565.0, 35983.0], [564.0, 36034.0], [574.0, 20192.0], [573.0, 35673.0], [571.0, 20331.0], [570.0, 35847.0], [569.0, 23487.0], [568.0, 20597.0], [559.0, 20764.5], [544.0, 36605.0], [546.0, 36382.0], [545.0, 36430.0], [548.0, 44566.0], [547.0, 36550.0], [551.0, 36098.0], [550.0, 36371.5], [557.0, 20773.0], [556.0, 23829.0], [555.0, 20855.0], [554.0, 20822.0], [553.0, 36147.0], [552.0, 23793.0], [567.0, 23521.0], [566.0, 20740.0], [604.0, 35545.0], [607.0, 19506.0], [593.0, 30045.666666666668], [595.0, 35690.0], [594.0, 35772.0], [597.0, 19774.0], [596.0, 20226.0], [606.0, 54962.0], [605.0, 20155.0], [603.0, 20210.0], [602.0, 20212.0], [601.0, 34940.0], [600.0, 35626.0], [590.0, 35825.0], [577.0, 35413.0], [576.0, 20127.0], [579.0, 36038.0], [578.0, 55336.0], [581.0, 20104.0], [580.0, 55414.0], [583.0, 35914.0], [582.0, 35984.0], [589.0, 21278.0], [588.0, 22937.0], [587.0, 35788.0], [586.0, 19881.0], [585.0, 23157.0], [584.0, 35914.0], [599.0, 19962.0], [598.0, 34989.0], [636.0, 53717.0], [639.0, 57027.0], [625.0, 54273.0], [624.0, 54279.0], [627.0, 53949.0], [626.0, 53869.0], [629.0, 53885.0], [628.0, 53933.0], [638.0, 57036.0], [637.0, 28739.0], [635.0, 53905.0], [634.0, 53786.0], [633.0, 53987.0], [632.0, 53993.0], [623.0, 29113.0], [609.0, 20061.0], [608.0, 20067.0], [611.0, 54706.0], [610.0, 20051.0], [613.0, 20003.0], [612.0, 20040.0], [615.0, 54771.0], [614.0, 54777.0], [622.0, 21538.0], [621.0, 54621.0], [620.0, 19885.0], [619.0, 54649.0], [618.0, 19956.0], [617.0, 20383.0], [616.0, 54664.0], [631.0, 53915.0], [630.0, 28788.0], [668.0, 24000.0], [671.0, 23192.0], [657.0, 89677.0], [656.0, 23395.0], [659.0, 25212.0], [658.0, 25323.0], [661.0, 89578.0], [660.0, 23374.0], [670.0, 22984.0], [669.0, 23263.0], [667.0, 25117.0], [666.0, 23181.0], [665.0, 23340.0], [664.0, 23383.0], [655.0, 23603.0], [641.0, 56978.0], [640.0, 53702.0], [643.0, 28621.0], [642.0, 53723.0], [645.0, 53481.0], [644.0, 53641.0], [647.0, 56765.0], [646.0, 53680.0], [654.0, 23572.0], [653.0, 23659.0], [652.0, 23535.0], [651.0, 24924.0], [650.0, 39140.0], [649.0, 25556.0], [648.0, 25566.0], [663.0, 23026.0], [662.0, 23391.0], [700.0, 28982.0], [703.0, 88431.0], [689.0, 88662.0], [688.0, 24286.0], [691.0, 32051.0], [690.0, 88675.0], [693.0, 27176.0], [692.0, 23168.0], [702.0, 88452.0], [701.0, 22989.0], [699.0, 88464.0], [698.0, 88461.0], [697.0, 27170.0], [696.0, 27523.0], [687.0, 23390.0], [673.0, 23000.0], [672.0, 23122.0], [675.0, 26647.0], [674.0, 23069.0], [677.0, 27947.0], [676.0, 22558.0], [679.0, 88945.0], [678.0, 27922.0], [686.0, 24569.0], [685.0, 88877.0], [684.0, 23754.0], [683.0, 23964.0], [682.0, 24582.0], [681.0, 24777.0], [680.0, 23914.0], [695.0, 88428.0], [694.0, 88473.0], [729.0, 88096.0], [734.0, 29313.5], [735.0, 31537.0], [721.0, 88277.0], [720.0, 25578.0], [723.0, 27191.0], [722.0, 23302.0], [725.0, 23856.0], [724.0, 24099.0], [732.0, 87939.0], [731.0, 26675.0], [730.0, 88064.0], [728.0, 23098.0], [711.0, 88217.0], [710.0, 27402.0], [709.0, 24056.0], [708.0, 23503.0], [707.0, 23233.0], [706.0, 23335.0], [705.0, 23052.0], [704.0, 27454.0], [719.0, 27243.0], [718.0, 88163.0], [717.0, 27323.0], [716.0, 88174.0], [715.0, 27304.0], [714.0, 24000.0], [713.0, 88277.0], [712.0, 26886.0], [727.0, 23910.0], [726.0, 26761.0], [761.0, 21334.0], [766.0, 21246.0], [767.0, 21283.0], [753.0, 21555.0], [752.0, 21536.0], [755.0, 21700.0], [754.0, 21510.0], [757.0, 23433.0], [756.0, 21550.0], [765.0, 27512.0], [764.0, 29492.0], [763.0, 24437.0], [760.0, 21869.0], [743.0, 87719.0], [742.0, 25262.0], [741.0, 24177.0], [740.0, 88055.0], [739.0, 88049.0], [737.0, 27113.0], [736.0, 87684.0], [751.0, 21692.0], [750.0, 27898.0], [749.0, 36732.0], [748.0, 23319.0], [747.0, 27964.0], [746.0, 87719.0], [745.0, 28264.0], [744.0, 31174.0], [759.0, 27668.0], [758.0, 21556.0], [796.0, 28580.0], [799.0, 20639.0], [785.0, 28848.0], [784.0, 20939.0], [787.0, 28705.0], [786.0, 20853.0], [798.0, 23508.0], [797.0, 23327.0], [795.0, 20774.0], [794.0, 28599.0], [793.0, 20118.0], [792.0, 28752.0], [783.0, 28777.0], [768.0, 27388.0], [770.0, 21151.0], [769.0, 21130.0], [772.0, 20983.0], [771.0, 21082.0], [774.0, 22261.0], [773.0, 22532.0], [782.0, 29081.0], [781.0, 21114.0], [780.0, 21102.0], [779.0, 28933.0], [778.0, 21115.0], [777.0, 29013.0], [776.0, 29083.5], [791.0, 28881.0], [790.0, 28653.0], [789.0, 28663.0], [788.0, 28679.0], [800.0, 28403.925885129884], [1.0, 129169.0]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[755.3420464076056, 29363.430528375826]], "isOverall": false, "label": "Home-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 800.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 69.33333333333333, "minX": 1.61262972E12, "maxY": 11937.85, "series": [{"data": [[1.61262996E12, 11937.85], [1.61263008E12, 1208.2333333333333], [1.61262978E12, 6554.0], [1.61262972E12, 2545.133333333333], [1.6126299E12, 10801.066666666668], [1.61262984E12, 7087.333333333333], [1.61263002E12, 6243.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61262996E12, 2903.3333333333335], [1.61263008E12, 69.33333333333333], [1.61262978E12, 2777.6666666666665], [1.61262972E12, 1089.8333333333333], [1.6126299E12, 2840.5], [1.61262984E12, 2873.0], [1.61263002E12, 2411.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61263008E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 19807.986083498992, "minX": 1.61262972E12, "maxY": 92825.05454545455, "series": [{"data": [[1.61262996E12, 32126.676997245155], [1.61263008E12, 92825.05454545455], [1.61262978E12, 28348.471138845587], [1.61262972E12, 19807.986083498992], [1.6126299E12, 29531.9188034188], [1.61262984E12, 26153.053263315807], [1.61263002E12, 31717.04711111113]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61263008E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 6631.320079522864, "minX": 1.61262972E12, "maxY": 37455.38181818183, "series": [{"data": [[1.61262996E12, 9608.967630853993], [1.61263008E12, 37455.38181818183], [1.61262978E12, 14360.694227769114], [1.61262972E12, 6631.320079522864], [1.6126299E12, 7330.459401709402], [1.61262984E12, 12098.06601650412], [1.61263002E12, 16230.467555555548]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61263008E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 35.02584493041749, "minX": 1.61262972E12, "maxY": 91970.65454545454, "series": [{"data": [[1.61262996E12, 13823.11432506887], [1.61263008E12, 91970.65454545454], [1.61262978E12, 7881.170826833074], [1.61262972E12, 35.02584493041749], [1.6126299E12, 9206.865384615377], [1.61262984E12, 5919.041260315071], [1.61263002E12, 11504.18488888889]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61263008E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 12664.0, "minX": 1.61262972E12, "maxY": 137863.0, "series": [{"data": [[1.61262996E12, 89483.0], [1.61263008E12, 65873.0], [1.61262978E12, 92282.0], [1.61262972E12, 32912.0], [1.6126299E12, 87615.0], [1.61262984E12, 137863.0], [1.61263002E12, 89677.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61262996E12, 32934.8], [1.61263008E12, 65869.8], [1.61262978E12, 38709.5], [1.61262972E12, 30372.4], [1.6126299E12, 27050.0], [1.61262984E12, 34151.299999999996], [1.61263002E12, 51508.200000000055]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61262996E12, 70767.56999999999], [1.61263008E12, 65873.0], [1.61262978E12, 91623.01000000001], [1.61262972E12, 32712.96], [1.6126299E12, 53377.47999999999], [1.61262984E12, 137232.08000000002], [1.61263002E12, 88430.58]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61262996E12, 38011.45000000003], [1.61263008E12, 65873.0], [1.61262978E12, 51834.7], [1.61262972E12, 31357.999999999993], [1.6126299E12, 32443.39999999992], [1.61262984E12, 48307.9], [1.61263002E12, 74658.99999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61262996E12, 15640.0], [1.61263008E12, 65642.0], [1.61262978E12, 15218.0], [1.61262972E12, 12664.0], [1.6126299E12, 15623.0], [1.61262984E12, 15627.0], [1.61263002E12, 17175.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61262996E12, 21293.0], [1.61263008E12, 65779.5], [1.61262978E12, 24380.5], [1.61262972E12, 17809.0], [1.6126299E12, 19350.0], [1.61262984E12, 21394.5], [1.61263002E12, 24562.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61263008E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 16179.0, "minX": 1.0, "maxY": 170364.0, "series": [{"data": [[2.0, 25655.0], [3.0, 22691.0], [4.0, 21269.0], [5.0, 24650.0], [6.0, 25260.0], [7.0, 18953.0], [8.0, 24788.0], [9.0, 19647.0], [10.0, 21257.0], [11.0, 22339.0], [12.0, 53561.0], [13.0, 21710.5], [14.0, 25375.0], [15.0, 23527.5], [16.0, 22648.0], [17.0, 22063.0], [18.0, 25670.0], [19.0, 23431.0], [20.0, 22243.5], [21.0, 22692.0], [22.0, 21198.5], [23.0, 20538.5], [24.0, 18765.5], [25.0, 23257.5], [26.0, 18764.5], [27.0, 21629.0], [28.0, 22134.5], [29.0, 21228.0], [30.0, 29838.0], [31.0, 22764.5], [33.0, 29073.0], [32.0, 25385.0], [34.0, 21299.0], [35.0, 25428.5], [36.0, 20611.5], [37.0, 25403.5], [39.0, 34859.0], [38.0, 25589.5], [41.0, 35255.0], [40.0, 25034.5], [43.0, 27036.5], [42.0, 21443.5], [44.0, 20280.0], [47.0, 29571.0], [46.0, 21310.0], [48.0, 32876.5], [49.0, 18001.5], [50.0, 18966.0], [51.0, 16179.0], [53.0, 21944.0], [52.0, 17764.0], [54.0, 18091.0], [57.0, 31546.0], [58.0, 18104.0], [59.0, 20545.0], [61.0, 24363.0], [63.0, 18211.0], [62.0, 24747.5], [66.0, 38657.0], [67.0, 24974.0], [70.0, 16532.5], [71.0, 21411.0], [68.0, 21654.0], [76.0, 16343.5], [78.0, 16342.0], [79.0, 24998.0], [81.0, 17283.0], [83.0, 20074.0], [84.0, 21269.5], [91.0, 16803.0], [88.0, 17871.5], [89.0, 18751.0], [95.0, 17873.0], [92.0, 19764.0], [96.0, 21694.0], [100.0, 17762.5], [108.0, 20079.5], [123.0, 33122.0], [1.0, 27113.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 129261.0], [34.0, 129619.0], [36.0, 130367.0], [37.0, 129265.0], [3.0, 129355.0], [13.0, 131082.0], [14.0, 129409.0], [16.0, 131176.0], [1.0, 130846.0], [17.0, 129585.0], [21.0, 130254.0], [23.0, 131014.5], [108.0, 130345.0], [7.0, 129167.0], [29.0, 170364.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 123.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 38118.0, "series": [{"data": [[2.0, 13650.5], [3.0, 10764.0], [4.0, 11704.0], [5.0, 12662.0], [6.0, 11997.0], [7.0, 4978.0], [8.0, 12258.0], [9.0, 7020.0], [10.0, 7592.0], [11.0, 11234.0], [12.0, 38118.0], [13.0, 10970.5], [14.0, 13498.0], [15.0, 12292.5], [16.0, 8969.0], [17.0, 10324.0], [18.0, 12641.5], [19.0, 11747.0], [20.0, 11943.0], [21.0, 12270.0], [22.0, 8639.5], [23.0, 8711.0], [24.0, 7667.0], [25.0, 8727.5], [26.0, 5852.0], [27.0, 8127.5], [28.0, 9687.5], [29.0, 3782.0], [30.0, 11746.5], [31.0, 9333.5], [33.0, 14980.0], [32.0, 12230.0], [34.0, 9694.0], [35.0, 12751.5], [36.0, 6621.5], [37.0, 12705.5], [39.0, 20166.0], [38.0, 10829.5], [41.0, 20088.0], [40.0, 10889.0], [43.0, 14367.0], [42.0, 8459.0], [44.0, 7105.5], [47.0, 16055.0], [46.0, 9310.0], [48.0, 18054.5], [49.0, 6312.0], [50.0, 6997.5], [51.0, 3366.0], [53.0, 7363.0], [52.0, 3492.5], [54.0, 4798.0], [57.0, 16878.0], [58.0, 4138.5], [59.0, 5961.0], [61.0, 9724.0], [63.0, 2590.0], [62.0, 12390.5], [66.0, 23557.5], [67.0, 9348.0], [70.0, 2215.5], [71.0, 9585.0], [68.0, 7344.0], [76.0, 940.5], [78.0, 1653.0], [79.0, 10789.0], [81.0, 2640.0], [83.0, 5683.0], [84.0, 7480.5], [91.0, 4888.0], [88.0, 5211.5], [89.0, 3977.0], [95.0, 3293.0], [92.0, 4806.0], [96.0, 7848.5], [100.0, 3470.0], [108.0, 7528.0], [123.0, 18105.0], [1.0, 10742.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 0.0], [34.0, 0.0], [36.0, 0.0], [37.0, 0.0], [3.0, 0.0], [13.0, 0.0], [14.0, 0.0], [16.0, 0.0], [1.0, 0.0], [17.0, 0.0], [21.0, 0.0], [23.0, 0.0], [108.0, 0.0], [7.0, 0.0], [29.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 123.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.383333333333333, "minX": 1.61262972E12, "maxY": 23.016666666666666, "series": [{"data": [[1.61262996E12, 23.016666666666666], [1.61262978E12, 22.25], [1.61262972E12, 20.0], [1.6126299E12, 22.9], [1.61262984E12, 22.683333333333334], [1.61263002E12, 8.383333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61263002E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.61262972E12, "maxY": 22.333333333333332, "series": [{"data": [[1.61262996E12, 22.333333333333332], [1.61263008E12, 0.5333333333333333], [1.61262978E12, 21.366666666666667], [1.61262972E12, 8.383333333333333], [1.6126299E12, 21.85], [1.61262984E12, 22.1], [1.61263002E12, 18.55]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.61262996E12, 1.8666666666666667], [1.61263008E12, 0.38333333333333336], [1.6126299E12, 1.0666666666666667], [1.61262984E12, 0.11666666666666667], [1.61263002E12, 0.18333333333333332]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.61263002E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.6126299E12, 0.48333333333333334]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61263008E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.61262972E12, "maxY": 22.333333333333332, "series": [{"data": [[1.61262996E12, 22.333333333333332], [1.61263008E12, 0.5333333333333333], [1.61262978E12, 21.366666666666667], [1.61262972E12, 8.383333333333333], [1.6126299E12, 21.85], [1.61262984E12, 22.1], [1.61263002E12, 18.55]], "isOverall": false, "label": "Home-success", "isController": false}, {"data": [[1.61262996E12, 1.8666666666666667], [1.61263008E12, 0.38333333333333336], [1.6126299E12, 1.55], [1.61262984E12, 0.11666666666666667], [1.61263002E12, 0.2]], "isOverall": false, "label": "Home-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61263008E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.61262972E12, "maxY": 22.333333333333332, "series": [{"data": [[1.61262996E12, 22.333333333333332], [1.61263008E12, 0.5333333333333333], [1.61262978E12, 21.366666666666667], [1.61262972E12, 8.383333333333333], [1.6126299E12, 21.85], [1.61262984E12, 22.1], [1.61263002E12, 18.55]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.61262996E12, 1.8666666666666667], [1.61263008E12, 0.38333333333333336], [1.6126299E12, 1.55], [1.61262984E12, 0.11666666666666667], [1.61263002E12, 0.2]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61263008E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

