/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 12102.0, "minX": 0.0, "maxY": 130928.0, "series": [{"data": [[0.0, 12102.0], [0.1, 12970.0], [0.2, 13119.0], [0.3, 13175.0], [0.4, 13214.0], [0.5, 13286.0], [0.6, 13314.0], [0.7, 13340.0], [0.8, 13349.0], [0.9, 13396.0], [1.0, 13460.0], [1.1, 13502.0], [1.2, 13563.0], [1.3, 13603.0], [1.4, 13678.0], [1.5, 13764.0], [1.6, 13830.0], [1.7, 13890.0], [1.8, 13952.0], [1.9, 14002.0], [2.0, 14069.0], [2.1, 14147.0], [2.2, 14253.0], [2.3, 14274.0], [2.4, 14322.0], [2.5, 14400.0], [2.6, 14423.0], [2.7, 14481.0], [2.8, 14519.0], [2.9, 14619.0], [3.0, 14726.0], [3.1, 14799.0], [3.2, 14843.0], [3.3, 14874.0], [3.4, 14909.0], [3.5, 14922.0], [3.6, 14943.0], [3.7, 14979.0], [3.8, 14990.0], [3.9, 15002.0], [4.0, 15025.0], [4.1, 15033.0], [4.2, 15058.0], [4.3, 15067.0], [4.4, 15086.0], [4.5, 15094.0], [4.6, 15104.0], [4.7, 15117.0], [4.8, 15128.0], [4.9, 15143.0], [5.0, 15154.0], [5.1, 15157.0], [5.2, 15170.0], [5.3, 15183.0], [5.4, 15195.0], [5.5, 15201.0], [5.6, 15210.0], [5.7, 15217.0], [5.8, 15227.0], [5.9, 15237.0], [6.0, 15243.0], [6.1, 15252.0], [6.2, 15263.0], [6.3, 15268.0], [6.4, 15281.0], [6.5, 15288.0], [6.6, 15299.0], [6.7, 15304.0], [6.8, 15311.0], [6.9, 15316.0], [7.0, 15322.0], [7.1, 15328.0], [7.2, 15332.0], [7.3, 15341.0], [7.4, 15353.0], [7.5, 15356.0], [7.6, 15370.0], [7.7, 15379.0], [7.8, 15393.0], [7.9, 15402.0], [8.0, 15425.0], [8.1, 15441.0], [8.2, 15453.0], [8.3, 15468.0], [8.4, 15475.0], [8.5, 15483.0], [8.6, 15498.0], [8.7, 15517.0], [8.8, 15536.0], [8.9, 15546.0], [9.0, 15561.0], [9.1, 15573.0], [9.2, 15589.0], [9.3, 15600.0], [9.4, 15613.0], [9.5, 15627.0], [9.6, 15640.0], [9.7, 15660.0], [9.8, 15667.0], [9.9, 15695.0], [10.0, 15713.0], [10.1, 15717.0], [10.2, 15744.0], [10.3, 15761.0], [10.4, 15774.0], [10.5, 15790.0], [10.6, 15807.0], [10.7, 15825.0], [10.8, 15829.0], [10.9, 15837.0], [11.0, 15856.0], [11.1, 15868.0], [11.2, 15887.0], [11.3, 15902.0], [11.4, 15906.0], [11.5, 15919.0], [11.6, 15924.0], [11.7, 15937.0], [11.8, 15950.0], [11.9, 15960.0], [12.0, 15968.0], [12.1, 15980.0], [12.2, 15995.0], [12.3, 15998.0], [12.4, 16010.0], [12.5, 16015.0], [12.6, 16025.0], [12.7, 16033.0], [12.8, 16042.0], [12.9, 16048.0], [13.0, 16057.0], [13.1, 16065.0], [13.2, 16076.0], [13.3, 16081.0], [13.4, 16086.0], [13.5, 16095.0], [13.6, 16102.0], [13.7, 16110.0], [13.8, 16116.0], [13.9, 16126.0], [14.0, 16139.0], [14.1, 16147.0], [14.2, 16154.0], [14.3, 16159.0], [14.4, 16166.0], [14.5, 16172.0], [14.6, 16180.0], [14.7, 16187.0], [14.8, 16190.0], [14.9, 16198.0], [15.0, 16201.0], [15.1, 16207.0], [15.2, 16211.0], [15.3, 16216.0], [15.4, 16219.0], [15.5, 16226.0], [15.6, 16230.0], [15.7, 16235.0], [15.8, 16242.0], [15.9, 16248.0], [16.0, 16252.0], [16.1, 16258.0], [16.2, 16262.0], [16.3, 16265.0], [16.4, 16270.0], [16.5, 16275.0], [16.6, 16279.0], [16.7, 16282.0], [16.8, 16284.0], [16.9, 16287.0], [17.0, 16290.0], [17.1, 16296.0], [17.2, 16305.0], [17.3, 16308.0], [17.4, 16312.0], [17.5, 16317.0], [17.6, 16321.0], [17.7, 16326.0], [17.8, 16329.0], [17.9, 16335.0], [18.0, 16340.0], [18.1, 16346.0], [18.2, 16351.0], [18.3, 16356.0], [18.4, 16360.0], [18.5, 16360.0], [18.6, 16364.0], [18.7, 16368.0], [18.8, 16375.0], [18.9, 16379.0], [19.0, 16383.0], [19.1, 16387.0], [19.2, 16392.0], [19.3, 16397.0], [19.4, 16400.0], [19.5, 16407.0], [19.6, 16410.0], [19.7, 16418.0], [19.8, 16422.0], [19.9, 16427.0], [20.0, 16433.0], [20.1, 16437.0], [20.2, 16442.0], [20.3, 16451.0], [20.4, 16454.0], [20.5, 16456.0], [20.6, 16459.0], [20.7, 16463.0], [20.8, 16466.0], [20.9, 16468.0], [21.0, 16477.0], [21.1, 16480.0], [21.2, 16482.0], [21.3, 16485.0], [21.4, 16492.0], [21.5, 16495.0], [21.6, 16498.0], [21.7, 16506.0], [21.8, 16509.0], [21.9, 16512.0], [22.0, 16517.0], [22.1, 16519.0], [22.2, 16523.0], [22.3, 16526.0], [22.4, 16534.0], [22.5, 16538.0], [22.6, 16542.0], [22.7, 16552.0], [22.8, 16554.0], [22.9, 16560.0], [23.0, 16564.0], [23.1, 16569.0], [23.2, 16571.0], [23.3, 16577.0], [23.4, 16579.0], [23.5, 16590.0], [23.6, 16595.0], [23.7, 16601.0], [23.8, 16604.0], [23.9, 16611.0], [24.0, 16617.0], [24.1, 16622.0], [24.2, 16626.0], [24.3, 16631.0], [24.4, 16634.0], [24.5, 16639.0], [24.6, 16641.0], [24.7, 16646.0], [24.8, 16652.0], [24.9, 16658.0], [25.0, 16662.0], [25.1, 16666.0], [25.2, 16669.0], [25.3, 16677.0], [25.4, 16682.0], [25.5, 16685.0], [25.6, 16689.0], [25.7, 16693.0], [25.8, 16697.0], [25.9, 16699.0], [26.0, 16702.0], [26.1, 16705.0], [26.2, 16710.0], [26.3, 16714.0], [26.4, 16718.0], [26.5, 16723.0], [26.6, 16727.0], [26.7, 16733.0], [26.8, 16738.0], [26.9, 16740.0], [27.0, 16743.0], [27.1, 16746.0], [27.2, 16750.0], [27.3, 16753.0], [27.4, 16757.0], [27.5, 16760.0], [27.6, 16767.0], [27.7, 16772.0], [27.8, 16777.0], [27.9, 16780.0], [28.0, 16781.0], [28.1, 16786.0], [28.2, 16793.0], [28.3, 16800.0], [28.4, 16806.0], [28.5, 16810.0], [28.6, 16815.0], [28.7, 16821.0], [28.8, 16825.0], [28.9, 16828.0], [29.0, 16833.0], [29.1, 16839.0], [29.2, 16844.0], [29.3, 16848.0], [29.4, 16853.0], [29.5, 16864.0], [29.6, 16869.0], [29.7, 16871.0], [29.8, 16875.0], [29.9, 16882.0], [30.0, 16890.0], [30.1, 16894.0], [30.2, 16899.0], [30.3, 16906.0], [30.4, 16910.0], [30.5, 16917.0], [30.6, 16923.0], [30.7, 16930.0], [30.8, 16934.0], [30.9, 16940.0], [31.0, 16944.0], [31.1, 16954.0], [31.2, 16960.0], [31.3, 16966.0], [31.4, 16972.0], [31.5, 16974.0], [31.6, 16980.0], [31.7, 16986.0], [31.8, 16992.0], [31.9, 16998.0], [32.0, 17005.0], [32.1, 17014.0], [32.2, 17018.0], [32.3, 17022.0], [32.4, 17027.0], [32.5, 17036.0], [32.6, 17039.0], [32.7, 17047.0], [32.8, 17052.0], [32.9, 17057.0], [33.0, 17063.0], [33.1, 17068.0], [33.2, 17077.0], [33.3, 17081.0], [33.4, 17090.0], [33.5, 17092.0], [33.6, 17098.0], [33.7, 17104.0], [33.8, 17114.0], [33.9, 17125.0], [34.0, 17134.0], [34.1, 17144.0], [34.2, 17150.0], [34.3, 17159.0], [34.4, 17166.0], [34.5, 17175.0], [34.6, 17186.0], [34.7, 17201.0], [34.8, 17214.0], [34.9, 17220.0], [35.0, 17226.0], [35.1, 17232.0], [35.2, 17238.0], [35.3, 17251.0], [35.4, 17260.0], [35.5, 17271.0], [35.6, 17280.0], [35.7, 17288.0], [35.8, 17302.0], [35.9, 17308.0], [36.0, 17315.0], [36.1, 17318.0], [36.2, 17326.0], [36.3, 17338.0], [36.4, 17346.0], [36.5, 17354.0], [36.6, 17364.0], [36.7, 17366.0], [36.8, 17372.0], [36.9, 17380.0], [37.0, 17392.0], [37.1, 17402.0], [37.2, 17410.0], [37.3, 17428.0], [37.4, 17436.0], [37.5, 17446.0], [37.6, 17450.0], [37.7, 17468.0], [37.8, 17474.0], [37.9, 17484.0], [38.0, 17490.0], [38.1, 17503.0], [38.2, 17513.0], [38.3, 17521.0], [38.4, 17538.0], [38.5, 17550.0], [38.6, 17559.0], [38.7, 17570.0], [38.8, 17576.0], [38.9, 17596.0], [39.0, 17603.0], [39.1, 17616.0], [39.2, 17627.0], [39.3, 17633.0], [39.4, 17645.0], [39.5, 17658.0], [39.6, 17676.0], [39.7, 17690.0], [39.8, 17710.0], [39.9, 17726.0], [40.0, 17737.0], [40.1, 17748.0], [40.2, 17760.0], [40.3, 17767.0], [40.4, 17771.0], [40.5, 17783.0], [40.6, 17798.0], [40.7, 17808.0], [40.8, 17822.0], [40.9, 17833.0], [41.0, 17845.0], [41.1, 17856.0], [41.2, 17859.0], [41.3, 17873.0], [41.4, 17882.0], [41.5, 17889.0], [41.6, 17901.0], [41.7, 17915.0], [41.8, 17925.0], [41.9, 17933.0], [42.0, 17941.0], [42.1, 17958.0], [42.2, 17969.0], [42.3, 17980.0], [42.4, 17991.0], [42.5, 18001.0], [42.6, 18011.0], [42.7, 18017.0], [42.8, 18023.0], [42.9, 18035.0], [43.0, 18046.0], [43.1, 18055.0], [43.2, 18060.0], [43.3, 18070.0], [43.4, 18079.0], [43.5, 18088.0], [43.6, 18097.0], [43.7, 18103.0], [43.8, 18111.0], [43.9, 18115.0], [44.0, 18120.0], [44.1, 18127.0], [44.2, 18131.0], [44.3, 18143.0], [44.4, 18150.0], [44.5, 18156.0], [44.6, 18160.0], [44.7, 18170.0], [44.8, 18176.0], [44.9, 18185.0], [45.0, 18188.0], [45.1, 18199.0], [45.2, 18203.0], [45.3, 18211.0], [45.4, 18218.0], [45.5, 18222.0], [45.6, 18229.0], [45.7, 18234.0], [45.8, 18239.0], [45.9, 18246.0], [46.0, 18258.0], [46.1, 18264.0], [46.2, 18276.0], [46.3, 18283.0], [46.4, 18294.0], [46.5, 18302.0], [46.6, 18308.0], [46.7, 18313.0], [46.8, 18324.0], [46.9, 18331.0], [47.0, 18346.0], [47.1, 18356.0], [47.2, 18364.0], [47.3, 18373.0], [47.4, 18382.0], [47.5, 18390.0], [47.6, 18396.0], [47.7, 18403.0], [47.8, 18412.0], [47.9, 18428.0], [48.0, 18445.0], [48.1, 18461.0], [48.2, 18471.0], [48.3, 18483.0], [48.4, 18492.0], [48.5, 18501.0], [48.6, 18510.0], [48.7, 18525.0], [48.8, 18533.0], [48.9, 18541.0], [49.0, 18565.0], [49.1, 18577.0], [49.2, 18586.0], [49.3, 18598.0], [49.4, 18615.0], [49.5, 18624.0], [49.6, 18631.0], [49.7, 18637.0], [49.8, 18647.0], [49.9, 18658.0], [50.0, 18665.0], [50.1, 18671.0], [50.2, 18680.0], [50.3, 18693.0], [50.4, 18701.0], [50.5, 18707.0], [50.6, 18715.0], [50.7, 18724.0], [50.8, 18730.0], [50.9, 18736.0], [51.0, 18744.0], [51.1, 18758.0], [51.2, 18767.0], [51.3, 18772.0], [51.4, 18777.0], [51.5, 18788.0], [51.6, 18807.0], [51.7, 18836.0], [51.8, 18846.0], [51.9, 18853.0], [52.0, 18861.0], [52.1, 18871.0], [52.2, 18883.0], [52.3, 18900.0], [52.4, 18912.0], [52.5, 18936.0], [52.6, 18948.0], [52.7, 18956.0], [52.8, 18974.0], [52.9, 18991.0], [53.0, 19010.0], [53.1, 19028.0], [53.2, 19037.0], [53.3, 19063.0], [53.4, 19078.0], [53.5, 19097.0], [53.6, 19111.0], [53.7, 19151.0], [53.8, 19159.0], [53.9, 19192.0], [54.0, 19216.0], [54.1, 19241.0], [54.2, 19258.0], [54.3, 19277.0], [54.4, 19296.0], [54.5, 19311.0], [54.6, 19325.0], [54.7, 19344.0], [54.8, 19368.0], [54.9, 19392.0], [55.0, 19436.0], [55.1, 19474.0], [55.2, 19489.0], [55.3, 19511.0], [55.4, 19537.0], [55.5, 19572.0], [55.6, 19590.0], [55.7, 19602.0], [55.8, 19627.0], [55.9, 19639.0], [56.0, 19648.0], [56.1, 19660.0], [56.2, 19678.0], [56.3, 19688.0], [56.4, 19696.0], [56.5, 19717.0], [56.6, 19736.0], [56.7, 19746.0], [56.8, 19757.0], [56.9, 19772.0], [57.0, 19782.0], [57.1, 19789.0], [57.2, 19801.0], [57.3, 19818.0], [57.4, 19834.0], [57.5, 19850.0], [57.6, 19857.0], [57.7, 19877.0], [57.8, 19891.0], [57.9, 19903.0], [58.0, 19922.0], [58.1, 19932.0], [58.2, 19955.0], [58.3, 19968.0], [58.4, 19979.0], [58.5, 19992.0], [58.6, 20007.0], [58.7, 20024.0], [58.8, 20039.0], [58.9, 20058.0], [59.0, 20101.0], [59.1, 20120.0], [59.2, 20146.0], [59.3, 20168.0], [59.4, 20198.0], [59.5, 20215.0], [59.6, 20224.0], [59.7, 20246.0], [59.8, 20270.0], [59.9, 20280.0], [60.0, 20298.0], [60.1, 20310.0], [60.2, 20331.0], [60.3, 20350.0], [60.4, 20371.0], [60.5, 20391.0], [60.6, 20404.0], [60.7, 20424.0], [60.8, 20437.0], [60.9, 20456.0], [61.0, 20479.0], [61.1, 20499.0], [61.2, 20512.0], [61.3, 20538.0], [61.4, 20568.0], [61.5, 20598.0], [61.6, 20636.0], [61.7, 20654.0], [61.8, 20665.0], [61.9, 20685.0], [62.0, 20694.0], [62.1, 20713.0], [62.2, 20727.0], [62.3, 20756.0], [62.4, 20771.0], [62.5, 20795.0], [62.6, 20815.0], [62.7, 20833.0], [62.8, 20852.0], [62.9, 20859.0], [63.0, 20874.0], [63.1, 20888.0], [63.2, 20896.0], [63.3, 20913.0], [63.4, 20923.0], [63.5, 20929.0], [63.6, 20942.0], [63.7, 20960.0], [63.8, 20968.0], [63.9, 20993.0], [64.0, 21017.0], [64.1, 21033.0], [64.2, 21061.0], [64.3, 21076.0], [64.4, 21104.0], [64.5, 21115.0], [64.6, 21134.0], [64.7, 21165.0], [64.8, 21192.0], [64.9, 21218.0], [65.0, 21241.0], [65.1, 21267.0], [65.2, 21293.0], [65.3, 21331.0], [65.4, 21362.0], [65.5, 21416.0], [65.6, 21423.0], [65.7, 21466.0], [65.8, 21522.0], [65.9, 21541.0], [66.0, 21586.0], [66.1, 21617.0], [66.2, 21637.0], [66.3, 21659.0], [66.4, 21670.0], [66.5, 21699.0], [66.6, 21716.0], [66.7, 21735.0], [66.8, 21769.0], [66.9, 21793.0], [67.0, 21809.0], [67.1, 21835.0], [67.2, 21852.0], [67.3, 21883.0], [67.4, 21907.0], [67.5, 21936.0], [67.6, 21966.0], [67.7, 22018.0], [67.8, 22036.0], [67.9, 22078.0], [68.0, 22118.0], [68.1, 22163.0], [68.2, 22184.0], [68.3, 22231.0], [68.4, 22264.0], [68.5, 22292.0], [68.6, 22320.0], [68.7, 22355.0], [68.8, 22381.0], [68.9, 22401.0], [69.0, 22427.0], [69.1, 22471.0], [69.2, 22512.0], [69.3, 22533.0], [69.4, 22569.0], [69.5, 22605.0], [69.6, 22622.0], [69.7, 22642.0], [69.8, 22673.0], [69.9, 22688.0], [70.0, 22707.0], [70.1, 22743.0], [70.2, 22790.0], [70.3, 22807.0], [70.4, 22826.0], [70.5, 22862.0], [70.6, 22886.0], [70.7, 22908.0], [70.8, 22914.0], [70.9, 22938.0], [71.0, 22973.0], [71.1, 23003.0], [71.2, 23026.0], [71.3, 23054.0], [71.4, 23097.0], [71.5, 23108.0], [71.6, 23120.0], [71.7, 23138.0], [71.8, 23156.0], [71.9, 23178.0], [72.0, 23190.0], [72.1, 23203.0], [72.2, 23227.0], [72.3, 23247.0], [72.4, 23270.0], [72.5, 23300.0], [72.6, 23310.0], [72.7, 23336.0], [72.8, 23381.0], [72.9, 23418.0], [73.0, 23438.0], [73.1, 23454.0], [73.2, 23472.0], [73.3, 23494.0], [73.4, 23526.0], [73.5, 23559.0], [73.6, 23578.0], [73.7, 23588.0], [73.8, 23612.0], [73.9, 23630.0], [74.0, 23651.0], [74.1, 23683.0], [74.2, 23716.0], [74.3, 23739.0], [74.4, 23750.0], [74.5, 23771.0], [74.6, 23793.0], [74.7, 23817.0], [74.8, 23838.0], [74.9, 23867.0], [75.0, 23895.0], [75.1, 23915.0], [75.2, 23932.0], [75.3, 23946.0], [75.4, 23955.0], [75.5, 23991.0], [75.6, 24000.0], [75.7, 24012.0], [75.8, 24045.0], [75.9, 24057.0], [76.0, 24086.0], [76.1, 24116.0], [76.2, 24144.0], [76.3, 24169.0], [76.4, 24206.0], [76.5, 24233.0], [76.6, 24254.0], [76.7, 24273.0], [76.8, 24296.0], [76.9, 24309.0], [77.0, 24316.0], [77.1, 24344.0], [77.2, 24364.0], [77.3, 24396.0], [77.4, 24411.0], [77.5, 24435.0], [77.6, 24446.0], [77.7, 24491.0], [77.8, 24507.0], [77.9, 24536.0], [78.0, 24567.0], [78.1, 24579.0], [78.2, 24599.0], [78.3, 24636.0], [78.4, 24665.0], [78.5, 24681.0], [78.6, 24693.0], [78.7, 24714.0], [78.8, 24735.0], [78.9, 24754.0], [79.0, 24773.0], [79.1, 24799.0], [79.2, 24821.0], [79.3, 24840.0], [79.4, 24871.0], [79.5, 24888.0], [79.6, 24901.0], [79.7, 24915.0], [79.8, 24935.0], [79.9, 24942.0], [80.0, 24961.0], [80.1, 24979.0], [80.2, 25001.0], [80.3, 25007.0], [80.4, 25014.0], [80.5, 25022.0], [80.6, 25032.0], [80.7, 25053.0], [80.8, 25072.0], [80.9, 25096.0], [81.0, 25109.0], [81.1, 25128.0], [81.2, 25151.0], [81.3, 25168.0], [81.4, 25191.0], [81.5, 25208.0], [81.6, 25234.0], [81.7, 25241.0], [81.8, 25264.0], [81.9, 25287.0], [82.0, 25303.0], [82.1, 25333.0], [82.2, 25355.0], [82.3, 25378.0], [82.4, 25396.0], [82.5, 25410.0], [82.6, 25444.0], [82.7, 25468.0], [82.8, 25490.0], [82.9, 25503.0], [83.0, 25522.0], [83.1, 25546.0], [83.2, 25563.0], [83.3, 25582.0], [83.4, 25614.0], [83.5, 25632.0], [83.6, 25655.0], [83.7, 25667.0], [83.8, 25687.0], [83.9, 25697.0], [84.0, 25703.0], [84.1, 25715.0], [84.2, 25727.0], [84.3, 25759.0], [84.4, 25769.0], [84.5, 25785.0], [84.6, 25810.0], [84.7, 25823.0], [84.8, 25852.0], [84.9, 25870.0], [85.0, 25888.0], [85.1, 25899.0], [85.2, 25909.0], [85.3, 25916.0], [85.4, 25928.0], [85.5, 25941.0], [85.6, 25954.0], [85.7, 25964.0], [85.8, 25979.0], [85.9, 25998.0], [86.0, 26016.0], [86.1, 26028.0], [86.2, 26052.0], [86.3, 26061.0], [86.4, 26078.0], [86.5, 26124.0], [86.6, 26147.0], [86.7, 26170.0], [86.8, 26184.0], [86.9, 26215.0], [87.0, 26232.0], [87.1, 26247.0], [87.2, 26258.0], [87.3, 26280.0], [87.4, 26314.0], [87.5, 26331.0], [87.6, 26355.0], [87.7, 26383.0], [87.8, 26407.0], [87.9, 26427.0], [88.0, 26451.0], [88.1, 26467.0], [88.2, 26486.0], [88.3, 26496.0], [88.4, 26556.0], [88.5, 26582.0], [88.6, 26597.0], [88.7, 26621.0], [88.8, 26640.0], [88.9, 26651.0], [89.0, 26678.0], [89.1, 26698.0], [89.2, 26718.0], [89.3, 26762.0], [89.4, 26790.0], [89.5, 26817.0], [89.6, 26841.0], [89.7, 26896.0], [89.8, 26923.0], [89.9, 26957.0], [90.0, 26988.0], [90.1, 27034.0], [90.2, 27131.0], [90.3, 27164.0], [90.4, 27217.0], [90.5, 27269.0], [90.6, 27337.0], [90.7, 27453.0], [90.8, 27502.0], [90.9, 27565.0], [91.0, 27643.0], [91.1, 27764.0], [91.2, 27852.0], [91.3, 27930.0], [91.4, 28038.0], [91.5, 28100.0], [91.6, 28204.0], [91.7, 28287.0], [91.8, 28363.0], [91.9, 28419.0], [92.0, 28541.0], [92.1, 28730.0], [92.2, 28912.0], [92.3, 28998.0], [92.4, 29238.0], [92.5, 29377.0], [92.6, 29525.0], [92.7, 29658.0], [92.8, 29796.0], [92.9, 29884.0], [93.0, 29966.0], [93.1, 30035.0], [93.2, 30097.0], [93.3, 30175.0], [93.4, 30295.0], [93.5, 30415.0], [93.6, 30534.0], [93.7, 30619.0], [93.8, 30667.0], [93.9, 30744.0], [94.0, 30787.0], [94.1, 30836.0], [94.2, 30891.0], [94.3, 30927.0], [94.4, 31014.0], [94.5, 31060.0], [94.6, 31129.0], [94.7, 31213.0], [94.8, 31237.0], [94.9, 31252.0], [95.0, 31321.0], [95.1, 31353.0], [95.2, 31391.0], [95.3, 31536.0], [95.4, 31602.0], [95.5, 31777.0], [95.6, 31973.0], [95.7, 32152.0], [95.8, 32268.0], [95.9, 32418.0], [96.0, 32491.0], [96.1, 32554.0], [96.2, 32638.0], [96.3, 32696.0], [96.4, 32810.0], [96.5, 32927.0], [96.6, 33066.0], [96.7, 33273.0], [96.8, 33767.0], [96.9, 33854.0], [97.0, 34014.0], [97.1, 34182.0], [97.2, 34388.0], [97.3, 34677.0], [97.4, 36289.0], [97.5, 38318.0], [97.6, 38673.0], [97.7, 39219.0], [97.8, 41689.0], [97.9, 47636.0], [98.0, 47810.0], [98.1, 48099.0], [98.2, 51985.0], [98.3, 56382.0], [98.4, 83431.0], [98.5, 83695.0], [98.6, 83940.0], [98.7, 84095.0], [98.8, 89024.0], [98.9, 89054.0], [99.0, 89208.0], [99.1, 89252.0], [99.2, 89354.0], [99.3, 89440.0], [99.4, 92083.0], [99.5, 93606.0], [99.6, 93919.0], [99.7, 129470.0], [99.8, 129480.0], [99.9, 130613.0], [100.0, 130928.0]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 12100.0, "maxY": 160.0, "series": [{"data": [[70700.0, 1.0], [88300.0, 1.0], [89100.0, 4.0], [93900.0, 2.0], [130700.0, 4.0], [33700.0, 3.0], [34100.0, 4.0], [32900.0, 7.0], [34500.0, 3.0], [36100.0, 2.0], [36500.0, 1.0], [34900.0, 2.0], [38100.0, 1.0], [38500.0, 1.0], [40900.0, 1.0], [41700.0, 2.0], [41300.0, 1.0], [47700.0, 2.0], [48100.0, 1.0], [52100.0, 2.0], [83400.0, 7.0], [89000.0, 8.0], [89800.0, 1.0], [93800.0, 1.0], [130600.0, 1.0], [83300.0, 2.0], [88900.0, 3.0], [93700.0, 2.0], [91300.0, 2.0], [129700.0, 4.0], [12100.0, 1.0], [12600.0, 1.0], [12700.0, 1.0], [13100.0, 13.0], [13200.0, 13.0], [13300.0, 23.0], [12900.0, 5.0], [13000.0, 4.0], [13500.0, 13.0], [13600.0, 8.0], [13700.0, 11.0], [13800.0, 10.0], [13400.0, 13.0], [14000.0, 13.0], [14100.0, 5.0], [13900.0, 11.0], [14300.0, 11.0], [14200.0, 12.0], [14400.0, 18.0], [14500.0, 8.0], [14600.0, 6.0], [14800.0, 18.0], [14700.0, 9.0], [14900.0, 32.0], [15000.0, 49.0], [15100.0, 62.0], [15200.0, 75.0], [15300.0, 86.0], [15400.0, 48.0], [15500.0, 46.0], [15600.0, 43.0], [15700.0, 44.0], [15800.0, 46.0], [15900.0, 71.0], [16000.0, 84.0], [16100.0, 91.0], [16200.0, 150.0], [16300.0, 150.0], [17200.0, 75.0], [16400.0, 151.0], [16600.0, 151.0], [16800.0, 130.0], [17000.0, 115.0], [17400.0, 66.0], [18200.0, 92.0], [17600.0, 56.0], [17800.0, 62.0], [18000.0, 78.0], [18400.0, 54.0], [18600.0, 71.0], [18800.0, 48.0], [19000.0, 39.0], [19400.0, 21.0], [19200.0, 34.0], [19600.0, 49.0], [20400.0, 35.0], [20200.0, 41.0], [19800.0, 47.0], [20000.0, 29.0], [21000.0, 31.0], [21400.0, 19.0], [21200.0, 23.0], [20600.0, 36.0], [20800.0, 48.0], [22000.0, 18.0], [21800.0, 28.0], [21600.0, 30.0], [22200.0, 20.0], [22400.0, 21.0], [23400.0, 33.0], [22600.0, 33.0], [22800.0, 29.0], [23000.0, 22.0], [23200.0, 29.0], [23600.0, 28.0], [23800.0, 28.0], [24000.0, 29.0], [24400.0, 28.0], [24200.0, 31.0], [25400.0, 30.0], [25200.0, 37.0], [24600.0, 30.0], [25000.0, 51.0], [24800.0, 30.0], [25800.0, 40.0], [25600.0, 41.0], [26000.0, 36.0], [26200.0, 34.0], [26600.0, 35.0], [26400.0, 36.0], [27600.0, 9.0], [27200.0, 14.0], [26800.0, 21.0], [27400.0, 9.0], [27000.0, 9.0], [28000.0, 10.0], [28200.0, 10.0], [28400.0, 7.0], [28600.0, 6.0], [27800.0, 6.0], [29000.0, 3.0], [29200.0, 4.0], [28800.0, 1.0], [29400.0, 3.0], [29600.0, 5.0], [29800.0, 8.0], [30000.0, 12.0], [30200.0, 4.0], [30600.0, 12.0], [30400.0, 6.0], [30800.0, 13.0], [31000.0, 10.0], [31200.0, 19.0], [31400.0, 3.0], [31600.0, 5.0], [32200.0, 6.0], [32600.0, 9.0], [31800.0, 1.0], [32000.0, 3.0], [32400.0, 8.0], [34000.0, 4.0], [32800.0, 6.0], [33200.0, 3.0], [33600.0, 3.0], [34400.0, 2.0], [34800.0, 1.0], [36400.0, 1.0], [38800.0, 1.0], [39200.0, 2.0], [41600.0, 1.0], [47600.0, 4.0], [48000.0, 3.0], [48400.0, 1.0], [56400.0, 1.0], [83200.0, 1.0], [84000.0, 7.0], [93600.0, 4.0], [92000.0, 1.0], [83900.0, 3.0], [93500.0, 5.0], [33100.0, 3.0], [33500.0, 2.0], [33900.0, 5.0], [34300.0, 2.0], [36700.0, 1.0], [36300.0, 1.0], [35100.0, 1.0], [38300.0, 5.0], [38700.0, 2.0], [39100.0, 2.0], [39500.0, 1.0], [47500.0, 3.0], [47900.0, 3.0], [48300.0, 1.0], [50700.0, 1.0], [51900.0, 2.0], [56300.0, 2.0], [83800.0, 3.0], [89400.0, 2.0], [91800.0, 1.0], [129400.0, 14.0], [84500.0, 1.0], [89300.0, 8.0], [93300.0, 1.0], [130900.0, 1.0], [16500.0, 138.0], [16700.0, 160.0], [16900.0, 114.0], [17100.0, 71.0], [17300.0, 86.0], [17500.0, 58.0], [17700.0, 60.0], [17900.0, 63.0], [18100.0, 99.0], [18300.0, 78.0], [18500.0, 59.0], [18700.0, 80.0], [18900.0, 44.0], [19300.0, 32.0], [19100.0, 28.0], [19700.0, 52.0], [19900.0, 46.0], [20100.0, 28.0], [20300.0, 39.0], [19500.0, 30.0], [21300.0, 17.0], [20700.0, 32.0], [21100.0, 33.0], [21500.0, 21.0], [20500.0, 26.0], [20900.0, 47.0], [21700.0, 30.0], [22500.0, 20.0], [22100.0, 19.0], [21900.0, 20.0], [22300.0, 24.0], [23100.0, 44.0], [23300.0, 22.0], [22900.0, 28.0], [22700.0, 18.0], [23500.0, 30.0], [23700.0, 30.0], [23900.0, 37.0], [24100.0, 25.0], [24300.0, 32.0], [24500.0, 31.0], [25500.0, 31.0], [25300.0, 30.0], [24700.0, 32.0], [25100.0, 33.0], [24900.0, 42.0], [25700.0, 38.0], [25900.0, 56.0], [26100.0, 25.0], [26300.0, 28.0], [26500.0, 20.0], [27100.0, 15.0], [26700.0, 20.0], [27300.0, 6.0], [26900.0, 18.0], [27500.0, 10.0], [28100.0, 7.0], [27700.0, 6.0], [28500.0, 2.0], [27900.0, 6.0], [28300.0, 9.0], [28900.0, 8.0], [29100.0, 3.0], [29300.0, 6.0], [29500.0, 4.0], [28700.0, 5.0], [29700.0, 6.0], [29900.0, 7.0], [30100.0, 9.0], [30500.0, 6.0], [30300.0, 6.0], [30700.0, 12.0], [30900.0, 11.0], [31100.0, 10.0], [31300.0, 17.0], [31500.0, 9.0], [31700.0, 3.0], [32500.0, 10.0], [31900.0, 5.0], [32100.0, 6.0], [32300.0, 5.0], [32700.0, 6.0], [33800.0, 6.0], [34200.0, 4.0], [33000.0, 3.0], [34600.0, 2.0], [36200.0, 1.0], [38600.0, 3.0], [41000.0, 1.0], [42600.0, 1.0], [47800.0, 3.0], [55000.0, 1.0], [54600.0, 1.0], [55400.0, 1.0], [83600.0, 2.0], [84400.0, 1.0], [89200.0, 12.0], [90000.0, 1.0], [91600.0, 1.0], [130800.0, 1.0]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 130900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 25.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6705.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6705.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 25.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 233.05591397849466, "minX": 1.61263074E12, "maxY": 600.0, "series": [{"data": [[1.61263074E12, 600.0], [1.61263104E12, 233.05591397849466], [1.61263092E12, 600.0], [1.61263098E12, 592.6709886547811], [1.6126308E12, 600.0], [1.61263086E12, 600.0]], "isOverall": false, "label": "Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61263104E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 16517.0, "minX": 6.0, "maxY": 130796.83333333334, "series": [{"data": [[6.0, 130796.83333333334], [7.0, 22552.0], [8.0, 20984.0], [9.0, 19319.0], [10.0, 19678.0], [11.0, 19653.0], [12.0, 19682.0], [14.0, 51888.0], [15.0, 84052.0], [16.0, 16750.0], [18.0, 51883.5], [19.0, 16558.0], [20.0, 16631.0], [21.0, 19785.0], [22.0, 19642.0], [23.0, 84085.0], [24.0, 16622.0], [25.0, 16720.0], [26.0, 20849.0], [27.0, 19788.0], [28.0, 16517.0], [29.0, 16741.0], [30.0, 19773.0], [31.0, 16880.0], [33.0, 83420.0], [32.0, 19713.0], [35.0, 83494.0], [34.0, 19678.0], [37.0, 84032.0], [36.0, 83464.0], [39.0, 16717.0], [38.0, 16702.0], [41.0, 50111.0], [43.0, 19558.0], [42.0, 83940.0], [45.0, 51846.0], [47.0, 84007.0], [46.0, 19375.0], [49.0, 19746.0], [48.0, 83910.0], [51.0, 19542.0], [50.0, 19709.0], [53.0, 19412.0], [52.0, 17893.0], [55.0, 19681.0], [54.0, 19687.0], [57.0, 16667.0], [56.0, 16679.0], [59.0, 19561.0], [58.0, 19367.0], [61.0, 16745.0], [60.0, 19667.0], [63.0, 16770.0], [62.0, 16702.0], [67.0, 16717.0], [66.0, 83325.0], [65.0, 83471.0], [64.0, 83881.0], [71.0, 19925.0], [70.0, 83392.0], [69.0, 16746.0], [68.0, 16689.0], [75.0, 19069.0], [74.0, 83886.0], [73.0, 19906.0], [72.0, 19485.0], [79.0, 22020.0], [78.0, 19725.0], [77.0, 19803.0], [76.0, 83851.0], [83.0, 19659.0], [82.0, 19679.0], [81.0, 19718.0], [80.0, 19675.0], [87.0, 19746.0], [86.0, 19693.0], [85.0, 19752.0], [84.0, 19660.0], [91.0, 19659.0], [90.0, 19580.0], [89.0, 20517.0], [88.0, 19712.0], [95.0, 19648.0], [94.0, 19801.0], [93.0, 19786.0], [92.0, 19639.0], [99.0, 20310.0], [98.0, 19714.0], [97.0, 19690.0], [96.0, 19789.0], [103.0, 19753.0], [102.0, 19916.0], [101.0, 20292.0], [100.0, 20292.0], [107.0, 20442.0], [106.0, 20478.0], [105.0, 20030.0], [111.0, 20388.0], [110.0, 20246.0], [109.0, 20469.0], [108.0, 20388.0], [115.0, 20831.0], [114.0, 20454.0], [113.0, 20408.0], [112.0, 20542.0], [119.0, 20279.0], [118.0, 20270.0], [117.0, 20249.0], [116.0, 20392.0], [123.0, 20208.0], [122.0, 20250.0], [121.0, 20300.0], [120.0, 20404.0], [127.0, 20727.0], [126.0, 20763.0], [125.0, 20151.0], [124.0, 20809.0], [135.0, 20369.0], [134.0, 20349.0], [133.0, 20424.0], [132.0, 20332.0], [131.0, 20356.0], [130.0, 20392.0], [129.0, 20415.0], [128.0, 23012.0], [143.0, 20344.0], [142.0, 20327.0], [141.0, 20356.0], [140.0, 20320.0], [139.0, 20371.0], [138.0, 20391.0], [137.0, 20305.0], [136.0, 20393.0], [151.0, 20282.0], [150.0, 20287.0], [149.0, 20280.0], [148.0, 20229.0], [147.0, 20258.5], [145.0, 20357.0], [144.0, 20300.0], [159.0, 19885.0], [158.0, 19877.0], [157.0, 19955.0], [156.0, 19850.0], [155.0, 19962.0], [154.0, 19987.0], [153.0, 19984.0], [152.0, 20270.0], [167.0, 19746.0], [166.0, 19746.0], [165.0, 20054.0], [164.0, 19884.0], [163.0, 19976.0], [162.0, 19783.0], [161.0, 19892.0], [160.0, 19887.0], [175.0, 19860.0], [174.0, 19782.0], [173.0, 19961.0], [172.0, 20031.0], [171.0, 19757.0], [170.0, 19930.0], [169.0, 19922.0], [168.0, 19877.0], [183.0, 19278.0], [182.0, 19319.0], [181.0, 19339.0], [180.0, 19280.0], [179.0, 19440.0], [178.0, 19504.0], [177.0, 19741.0], [176.0, 19757.0], [191.0, 19235.0], [190.0, 19252.0], [189.0, 19159.0], [188.0, 19250.0], [187.0, 19221.0], [186.0, 19241.0], [185.0, 19274.0], [184.0, 19271.0], [199.0, 19108.0], [198.0, 19090.0], [197.0, 19137.0], [196.0, 19103.0], [195.0, 19153.0], [194.0, 19216.0], [193.0, 19068.0], [192.0, 19152.0], [207.0, 19028.0], [206.0, 19063.0], [205.0, 18974.0], [204.0, 18830.0], [203.0, 18866.0], [202.0, 18946.0], [201.0, 18965.0], [200.0, 18948.0], [215.0, 18663.0], [214.0, 18719.0], [213.0, 18876.0], [212.0, 18733.0], [211.0, 18730.0], [210.0, 18772.0], [209.0, 18836.0], [208.0, 18777.0], [223.0, 18712.0], [222.0, 19800.0], [221.0, 18525.0], [220.0, 18586.0], [219.0, 18624.0], [218.0, 18771.0], [217.0, 18872.0], [216.0, 18715.0], [231.0, 18740.0], [230.0, 18747.0], [229.0, 18483.0], [228.0, 18799.0], [227.0, 18783.0], [226.0, 18476.0], [225.0, 18772.0], [224.0, 18428.0], [239.0, 18653.0], [238.0, 18567.0], [237.0, 18582.0], [236.0, 18670.0], [235.0, 18663.0], [234.0, 18671.0], [233.0, 18710.0], [232.0, 18732.0], [247.0, 18531.0], [246.0, 18565.0], [245.0, 18570.5], [243.0, 18520.0], [242.0, 18606.0], [241.0, 18618.0], [240.0, 18634.0], [255.0, 18507.0], [254.0, 18515.0], [253.0, 18492.0], [252.0, 18529.0], [251.0, 18456.0], [250.0, 18396.0], [249.0, 19336.0], [248.0, 18490.0], [270.0, 18261.0], [271.0, 18294.0], [269.0, 23651.0], [268.0, 18324.0], [267.0, 18349.0], [266.0, 18461.0], [265.0, 18346.0], [264.0, 18387.0], [263.0, 18412.0], [257.0, 18479.0], [256.0, 19248.0], [259.0, 18390.0], [258.0, 18529.0], [262.0, 18427.0], [261.0, 19192.0], [260.0, 18461.0], [286.0, 18856.0], [287.0, 18676.0], [285.0, 18647.0], [284.0, 18901.0], [283.0, 18688.0], [282.0, 34266.0], [281.0, 18740.0], [280.0, 18981.0], [279.0, 18966.0], [273.0, 18178.0], [272.0, 18210.0], [275.0, 18055.0], [274.0, 19127.0], [278.0, 18790.0], [277.0, 18871.0], [276.0, 17980.0], [302.0, 33842.0], [303.0, 18690.0], [301.0, 33802.0], [300.0, 33854.0], [299.0, 18736.0], [298.0, 18724.0], [297.0, 18411.0], [296.0, 33932.0], [295.0, 18627.0], [289.0, 18656.0], [291.0, 18773.0], [290.0, 18777.0], [294.0, 18510.0], [293.0, 18698.0], [292.0, 18584.0], [318.0, 18500.0], [319.0, 19208.0], [317.0, 19061.0], [316.0, 19931.0], [315.0, 35136.0], [314.0, 18953.0], [313.0, 18992.0], [312.0, 33772.0], [311.0, 33781.0], [304.0, 18956.0], [307.0, 18782.5], [305.0, 18740.0], [310.0, 19159.0], [309.0, 18746.0], [308.0, 18656.0], [334.0, 19015.0], [335.0, 18804.0], [333.0, 19476.0], [332.0, 19663.0], [331.0, 19812.0], [330.0, 33956.0], [329.0, 18844.0], [328.0, 19717.0], [327.0, 19058.0], [321.0, 18697.0], [320.0, 33698.0], [323.0, 18766.0], [322.0, 19311.0], [325.0, 19852.0], [324.0, 18766.0], [350.0, 18188.0], [351.0, 19010.0], [349.0, 18898.0], [348.0, 19083.0], [347.0, 18711.0], [346.0, 34836.0], [345.0, 34909.0], [344.0, 19198.5], [342.0, 19038.0], [337.0, 18931.0], [336.0, 19639.0], [339.0, 18891.0], [338.0, 34998.0], [341.0, 18856.0], [340.0, 18943.0], [366.0, 18388.0], [367.0, 18330.0], [365.0, 21487.0], [364.0, 18744.0], [363.0, 18631.0], [362.0, 34677.0], [361.0, 27502.0], [360.0, 18764.0], [359.0, 18769.0], [353.0, 18327.0], [352.0, 19010.0], [355.0, 18152.0], [354.0, 18663.0], [358.0, 18540.0], [357.0, 18860.0], [356.0, 19277.0], [382.0, 19531.0], [383.0, 19799.0], [381.0, 19576.0], [380.0, 27094.0], [379.0, 19161.0], [378.0, 27008.0], [377.0, 18857.0], [376.0, 18929.0], [375.0, 19894.0], [369.0, 34544.0], [368.0, 19158.0], [371.0, 27337.0], [370.0, 19081.0], [374.0, 19940.0], [373.0, 19304.0], [372.0, 27131.0], [398.0, 20192.0], [399.0, 22892.0], [397.0, 20991.0], [396.0, 26581.0], [395.0, 26630.0], [394.0, 24331.0], [393.0, 19537.0], [392.0, 27034.0], [391.0, 19237.0], [385.0, 24446.0], [384.0, 19857.0], [387.0, 34388.0], [386.0, 20897.0], [390.0, 19258.0], [389.0, 19343.0], [388.0, 27147.0], [414.0, 19627.0], [415.0, 19906.0], [413.0, 19959.0], [412.0, 20176.0], [411.0, 19758.0], [410.0, 19915.0], [409.0, 20224.0], [408.0, 20024.0], [407.0, 20146.0], [401.0, 20267.0], [400.0, 19717.0], [403.0, 20119.0], [402.0, 19773.0], [406.0, 22660.0], [405.0, 20208.0], [404.0, 20241.0], [430.0, 21048.0], [431.0, 28930.0], [429.0, 21061.0], [428.0, 21761.0], [427.0, 21245.0], [426.0, 29085.0], [425.0, 21288.0], [424.0, 21535.0], [423.0, 21617.0], [417.0, 19741.0], [416.0, 19586.0], [419.0, 19622.0], [418.0, 19822.0], [422.0, 21663.0], [421.0, 29340.0], [420.0, 19657.0], [446.0, 18916.0], [447.0, 20698.0], [445.0, 28672.0], [444.0, 20822.0], [443.0, 21435.0], [442.0, 27048.0], [441.0, 28735.0], [440.0, 19095.0], [439.0, 20889.0], [433.0, 21134.0], [432.0, 21165.0], [435.0, 20969.0], [434.0, 20962.0], [438.0, 20891.0], [437.0, 20723.0], [436.0, 20886.0], [462.0, 28069.0], [463.0, 27824.0], [461.0, 27894.0], [460.0, 23426.0], [459.0, 20847.0], [458.0, 28092.0], [457.0, 28176.0], [456.0, 22881.0], [455.0, 28335.0], [449.0, 28395.0], [448.0, 21322.0], [451.0, 23612.0], [450.0, 28153.0], [454.0, 29380.0], [453.0, 28998.0], [452.0, 28367.0], [478.0, 25350.0], [479.0, 25563.0], [477.0, 28287.0], [476.0, 25252.0], [475.0, 21420.0], [474.0, 25501.0], [473.0, 25235.0], [472.0, 21575.0], [471.0, 21932.0], [465.0, 23384.0], [464.0, 23381.0], [467.0, 27908.0], [466.0, 23233.0], [470.0, 36542.0], [469.0, 27798.0], [468.0, 27943.0], [494.0, 23973.0], [495.0, 21237.0], [492.0, 25823.0], [483.0, 21395.0], [482.0, 21522.0], [481.0, 21420.0], [480.0, 28204.0], [491.0, 28100.0], [490.0, 21541.0], [489.0, 26781.0], [488.0, 24076.0], [486.0, 26817.0], [485.0, 29445.0], [484.0, 26762.0], [510.0, 27807.0], [511.0, 21072.0], [509.0, 26959.0], [508.0, 26899.0], [507.0, 26480.0], [506.0, 27852.0], [505.0, 26543.0], [504.0, 27903.0], [503.0, 26929.0], [497.0, 21328.0], [496.0, 21357.0], [499.0, 26596.0], [498.0, 28000.0], [502.0, 27925.0], [501.0, 26557.0], [500.0, 26718.0], [540.0, 24722.0], [543.0, 25377.0], [529.0, 24986.0], [528.0, 25024.0], [531.0, 24792.0], [530.0, 25092.0], [533.0, 24833.0], [532.0, 24770.0], [542.0, 25389.0], [541.0, 24569.0], [539.0, 24726.0], [538.0, 25289.0], [537.0, 24735.0], [536.0, 24693.0], [527.0, 24962.0], [513.0, 25091.0], [512.0, 26429.0], [515.0, 26349.0], [514.0, 26427.0], [517.0, 27668.0], [516.0, 26327.0], [519.0, 27502.0], [518.0, 26170.0], [526.0, 24980.0], [525.0, 25217.0], [524.0, 25920.0], [523.0, 25289.0], [522.0, 25159.0], [521.0, 28639.0], [520.0, 42622.0], [535.0, 24739.0], [534.0, 24874.0], [572.0, 23948.0], [575.0, 38696.0], [561.0, 23771.0], [560.0, 25125.0], [563.0, 24165.0], [562.0, 25006.0], [565.0, 25049.0], [564.0, 25037.0], [574.0, 23231.0], [573.0, 23721.0], [571.0, 24071.0], [570.0, 24799.0], [569.0, 24782.0], [568.0, 24976.0], [559.0, 25032.0], [545.0, 24441.0], [544.0, 24598.0], [547.0, 25017.0], [546.0, 25244.0], [549.0, 25269.0], [548.0, 25378.0], [551.0, 25362.0], [550.0, 25291.0], [558.0, 23841.0], [557.0, 25264.0], [556.0, 23918.0], [555.0, 24006.0], [554.0, 25024.0], [553.0, 24592.0], [567.0, 25002.0], [566.0, 24935.0], [592.0, 22554.0], [596.0, 22707.0], [600.0, 21365.939304943695], [583.0, 23165.0], [582.0, 23199.0], [581.0, 23048.0], [580.0, 22938.0], [579.0, 23300.0], [578.0, 23270.0], [577.0, 38703.0], [576.0, 38376.0], [599.0, 20258.666666666668], [598.0, 20310.0], [597.0, 22790.0], [595.0, 22693.0], [594.0, 22640.0], [593.0, 22423.0], [591.0, 22582.0], [590.0, 22912.0], [589.0, 22922.0], [588.0, 22731.0], [587.0, 22743.0], [586.0, 23054.0], [585.0, 23108.0], [584.0, 23001.0]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[573.3026745913833, 21661.451411589915]], "isOverall": false, "label": "Home-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 600.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 994.5, "minX": 1.61263074E12, "maxY": 7876.066666666667, "series": [{"data": [[1.61263074E12, 6067.333333333333], [1.61263104E12, 2628.016666666667], [1.61263092E12, 6004.766666666666], [1.61263098E12, 6543.116666666667], [1.6126308E12, 6416.133333333333], [1.61263086E12, 7876.066666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61263074E12, 2576.1666666666665], [1.61263104E12, 994.5], [1.61263092E12, 2535.0], [1.61263098E12, 2662.8333333333335], [1.6126308E12, 2704.0], [1.61263086E12, 3055.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61263104E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 18741.13877207736, "minX": 1.61263074E12, "maxY": 24519.63010752688, "series": [{"data": [[1.61263074E12, 18741.13877207736], [1.61263104E12, 24519.63010752688], [1.61263092E12, 22423.610256410295], [1.61263098E12, 21010.816855753663], [1.6126308E12, 22784.96874999996], [1.61263086E12, 22119.461376404553]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61263104E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4793.078216989065, "minX": 1.61263074E12, "maxY": 8912.661538461536, "series": [{"data": [[1.61263074E12, 4793.078216989065], [1.61263104E12, 8463.593548387096], [1.61263092E12, 8912.661538461536], [1.61263098E12, 6877.586709886549], [1.6126308E12, 8847.306891025646], [1.61263086E12, 7370.266853932594]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61263104E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 14.824222035323794, "minX": 1.61263074E12, "maxY": 5441.012903225804, "series": [{"data": [[1.61263074E12, 14.824222035323794], [1.61263104E12, 5441.012903225804], [1.61263092E12, 2592.0042735042784], [1.61263098E12, 1410.9392220421394], [1.6126308E12, 3281.045673076922], [1.61263086E12, 2916.9213483146045]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61263104E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 12102.0, "minX": 1.61263074E12, "maxY": 93941.0, "series": [{"data": [[1.61263074E12, 50719.0], [1.61263104E12, 84095.0], [1.61263092E12, 48416.0], [1.61263098E12, 56486.0], [1.6126308E12, 93941.0], [1.61263086E12, 92083.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61263074E12, 29239.0], [1.61263104E12, 28176.0], [1.61263092E12, 32101.4], [1.61263098E12, 25563.0], [1.6126308E12, 26769.300000000003], [1.61263086E12, 25758.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61263074E12, 31575.0], [1.61263104E12, 84040.0], [1.61263092E12, 47776.57], [1.61263098E12, 36507.50000000001], [1.6126308E12, 93522.69], [1.61263086E12, 54713.250000000284]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61263074E12, 30800.0], [1.61263104E12, 34836.0], [1.61263092E12, 33609.100000000006], [1.61263098E12, 27585.0], [1.6126308E12, 32431.899999999987], [1.61263086E12, 27194.300000000003]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61263074E12, 12102.0], [1.61263104E12, 16517.0], [1.61263092E12, 15921.0], [1.61263098E12, 15808.0], [1.6126308E12, 14616.0], [1.61263086E12, 15374.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61263074E12, 16695.0], [1.61263104E12, 19681.0], [1.61263092E12, 20501.5], [1.61263098E12, 18704.0], [1.6126308E12, 17845.0], [1.61263086E12, 19817.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61263104E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 14412.0, "minX": 1.0, "maxY": 130776.0, "series": [{"data": [[2.0, 22263.0], [3.0, 20186.0], [4.0, 19616.5], [5.0, 23554.0], [6.0, 21138.0], [7.0, 24754.0], [8.0, 23217.0], [9.0, 23935.0], [10.0, 23285.0], [11.0, 22819.0], [12.0, 22588.0], [13.0, 18853.0], [15.0, 22611.0], [16.0, 24004.5], [17.0, 20832.0], [18.0, 23014.5], [19.0, 20146.0], [20.0, 22741.5], [21.0, 23748.0], [22.0, 23655.0], [23.0, 24082.0], [24.0, 24451.0], [25.0, 19228.0], [26.0, 17712.5], [27.0, 21005.0], [28.0, 17503.0], [29.0, 19884.0], [31.0, 16974.0], [33.0, 14412.0], [32.0, 23480.5], [35.0, 16014.0], [34.0, 18774.5], [37.0, 21709.0], [36.0, 16416.0], [39.0, 16312.0], [38.0, 17467.5], [41.0, 16758.0], [40.0, 24327.5], [43.0, 22520.0], [42.0, 24751.0], [44.0, 18055.5], [45.0, 20706.5], [47.0, 17524.0], [48.0, 18450.0], [50.0, 17292.5], [52.0, 15912.5], [53.0, 15396.0], [55.0, 15301.0], [54.0, 26732.0], [56.0, 17400.5], [62.0, 26010.0], [63.0, 18653.0], [66.0, 19642.5], [70.0, 17205.0], [69.0, 16573.0], [68.0, 17473.0], [75.0, 15565.0], [73.0, 16876.0], [76.0, 21961.5], [82.0, 27193.5], [80.0, 19913.0], [87.0, 17591.0], [85.0, 17526.5], [84.0, 19460.0], [88.0, 18422.5], [90.0, 25875.0], [91.0, 18091.0], [92.0, 16523.0], [97.0, 16232.0], [104.0, 17905.0], [113.0, 16847.0], [118.0, 16213.0], [122.0, 16630.0], [132.0, 17860.0], [1.0, 23103.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 130613.0], [22.0, 129721.0], [6.0, 130776.0], [14.0, 129472.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 132.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 14678.0, "series": [{"data": [[2.0, 11156.0], [3.0, 8547.0], [4.0, 4900.5], [5.0, 9172.0], [6.0, 9995.5], [7.0, 11198.0], [8.0, 10954.0], [9.0, 14678.0], [10.0, 11219.0], [11.0, 11998.0], [12.0, 10888.0], [13.0, 8896.0], [15.0, 11598.5], [16.0, 9666.0], [17.0, 7023.0], [18.0, 11622.5], [19.0, 5047.0], [20.0, 7551.5], [21.0, 12358.0], [22.0, 12067.0], [23.0, 11350.0], [24.0, 11891.0], [25.0, 6294.0], [26.0, 6235.5], [27.0, 6419.0], [28.0, 4738.0], [29.0, 6816.0], [31.0, 3864.0], [33.0, 312.0], [32.0, 12134.5], [35.0, 1930.0], [34.0, 8544.0], [37.0, 6787.0], [36.0, 2100.0], [39.0, 2732.0], [38.0, 3597.5], [41.0, 2125.0], [40.0, 9842.5], [43.0, 10302.0], [42.0, 10308.5], [44.0, 7222.5], [45.0, 6845.0], [47.0, 4242.0], [48.0, 6875.5], [50.0, 2370.0], [52.0, 958.0], [53.0, 508.0], [55.0, 1130.0], [54.0, 12591.5], [56.0, 2651.0], [62.0, 13304.5], [63.0, 2107.0], [66.0, 4797.0], [70.0, 2768.5], [69.0, 1696.0], [68.0, 2162.5], [75.0, 885.0], [73.0, 1621.0], [76.0, 8873.5], [82.0, 12842.0], [80.0, 4735.5], [87.0, 1490.0], [85.0, 2478.0], [84.0, 4025.5], [88.0, 4868.0], [90.0, 10966.0], [91.0, 3328.0], [92.0, 1646.0], [97.0, 1562.0], [104.0, 2613.5], [113.0, 2554.0], [118.0, 2086.0], [122.0, 3933.0], [132.0, 3041.0], [1.0, 7402.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [22.0, 0.0], [6.0, 0.0], [14.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 132.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.85, "minX": 1.61263068E12, "maxY": 22.45, "series": [{"data": [[1.61263074E12, 21.216666666666665], [1.61263092E12, 22.15], [1.61263098E12, 21.116666666666667], [1.6126308E12, 22.45], [1.61263086E12, 19.383333333333333], [1.61263068E12, 5.85]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61263098E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.61263074E12, "maxY": 23.5, "series": [{"data": [[1.61263074E12, 19.816666666666666], [1.61263104E12, 7.65], [1.61263092E12, 19.5], [1.61263098E12, 20.483333333333334], [1.6126308E12, 20.8], [1.61263086E12, 23.5]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.61263104E12, 0.1], [1.61263098E12, 0.08333333333333333], [1.61263086E12, 0.23333333333333334]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61263104E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.61263074E12, "maxY": 23.5, "series": [{"data": [[1.61263074E12, 19.816666666666666], [1.61263104E12, 7.65], [1.61263092E12, 19.5], [1.61263098E12, 20.483333333333334], [1.6126308E12, 20.8], [1.61263086E12, 23.5]], "isOverall": false, "label": "Home-success", "isController": false}, {"data": [[1.61263104E12, 0.1], [1.61263098E12, 0.08333333333333333], [1.61263086E12, 0.23333333333333334]], "isOverall": false, "label": "Home-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61263104E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.61263074E12, "maxY": 23.5, "series": [{"data": [[1.61263074E12, 19.816666666666666], [1.61263104E12, 7.65], [1.61263092E12, 19.5], [1.61263098E12, 20.483333333333334], [1.6126308E12, 20.8], [1.61263086E12, 23.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.61263104E12, 0.1], [1.61263098E12, 0.08333333333333333], [1.61263086E12, 0.23333333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61263104E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

